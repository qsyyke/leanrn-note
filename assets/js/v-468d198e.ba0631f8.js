"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[373],{3681:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-468d198e",path:"/javaweb/%E5%93%8D%E5%BA%94.html",title:"服务器响应",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"响应行",slug:"响应行",children:[{level:3,title:"响应状态码",slug:"响应状态码",children:[]}]},{level:2,title:"响应头",slug:"响应头",children:[]},{level:2,title:"响应空行",slug:"响应空行",children:[]},{level:2,title:"响应体",slug:"响应体",children:[]},{level:2,title:"设置响应行",slug:"设置响应行",children:[{level:3,title:"状态码",slug:"状态码",children:[]}]},{level:2,title:"设置响应头",slug:"设置响应头",children:[{level:3,title:"Content-Length",slug:"content-length",children:[]}]},{level:2,title:"重定向",slug:"重定向",children:[{level:3,title:"重定向自己",slug:"重定向自己",children:[]},{level:3,title:"重定向特点",slug:"重定向特点",children:[]}]},{level:2,title:"相对路径",slug:"相对路径",children:[]},{level:2,title:"绝对路径",slug:"绝对路径",children:[]},{level:2,title:"相对路径和绝对路径使用",slug:"相对路径和绝对路径使用",children:[]},{level:2,title:"如何判断需不需要加虚拟目录",slug:"如何判断需不需要加虚拟目录",children:[]},{level:2,title:"输出字符到浏览器",slug:"输出字符到浏览器",children:[]},{level:2,title:"乱码",slug:"乱码",children:[]},{level:2,title:"字节流",slug:"字节流",children:[{level:3,title:"打印图片？",slug:"打印图片",children:[]}]},{level:2,title:"数据存储",slug:"数据存储",children:[]},{level:2,title:"MiME",slug:"mime",children:[]},{level:2,title:"作用",slug:"作用",children:[]},{level:2,title:"文件下载案例",slug:"文件下载案例",children:[{level:3,title:"解决中文乱码问题",slug:"解决中文乱码问题",children:[]}]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},82462:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var p=a(66252);const t=(0,p.uE)('<h1 id="服务器响应" tabindex="-1"><a class="header-anchor" href="#服务器响应" aria-hidden="true">#</a> 服务器响应</h1><p>响应和请求一样，也是分为响应行，响应头，响应空行，响应体</p><h2 id="响应行" tabindex="-1"><a class="header-anchor" href="#响应行" aria-hidden="true">#</a> 响应行</h2><p>组成: <code>HTTP/1.1 200 OK</code> 协议/版本 状态码 状态码描述</p><p>响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。</p><p><code>响应状态码都是由三位数字组成</code></p><h3 id="响应状态码" tabindex="-1"><a class="header-anchor" href="#响应状态码" aria-hidden="true">#</a> 响应状态码</h3><p>分类</p><blockquote><ol><li>1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码</li><li>2xx：成功。代表：200</li><li>3xx：重定向。代表：302(重定向)，304(访问缓存)</li><li>4xx：客户端错误。 <ol><li>代表04（请求路径没有对应的资源）</li><li>405：请求方式没有对应的doXxx方法</li></ol></li><li>5xx：服务器端错误。代表：500(服务器内部出现异常)</li></ol></blockquote><h2 id="响应头" tabindex="-1"><a class="header-anchor" href="#响应头" aria-hidden="true">#</a> 响应头</h2><blockquote><p>格式</p><p><code>头名称:值</code>形式</p></blockquote>',11),e=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image-20210217202938865",originSrc:"C:%5CUsers%5Cchuchen%5CPictures%5C%E8%A7%86%E9%A2%91%E6%88%AA%E5%9B%BE%5Cjavaweb%5Cweb%5Cimage-20210217202938865.png",data:"aurora"})],-1),o=(0,p.uE)('<p><code>Content-Type</code>：服务器告诉客户端本次响应体数据格式以及编码格式 <code>Content-disposition</code>：服务器告诉客户端以什么格式打开响应体数据</p><blockquote><p><code>Content-disposition</code>的应用比如使用在下载文件的时候</p><p>默认情况都是<code>in-line:默认值,在当前页面内打开</code></p><p><code>attachment;filename=xxx</code>以附件形式打开响应体。文件下载，提示下载信息就是<code>filename</code>值</p></blockquote><h2 id="响应空行" tabindex="-1"><a class="header-anchor" href="#响应空行" aria-hidden="true">#</a> 响应空行</h2><p>请求和响应都纯在响应空行，作用都是和响应体和请求体进行区分开</p><h2 id="响应体" tabindex="-1"><a class="header-anchor" href="#响应体" aria-hidden="true">#</a> 响应体</h2><p>就是传输的数据</p><img src="http://ooszy.cco.vin/img/blog-note/image-20210217203822585.png?x-oss-process=style/pictureProcess1" alt="image-20210217203822585" style="zoom:47%;"><p>像这种我们能看懂的数据，一般都是字符数据，像上面的这个html页面的代码，是字符，我们能看懂，但是有的像图片，视频，二维码这种是字节的，我们看不懂，</p><p>像图片这种，应该传的是二进制数据，但是我们看不懂，就会将其转化为图片展示</p><h1 id="response对象" tabindex="-1"><a class="header-anchor" href="#response对象" aria-hidden="true">#</a> response对象</h1><p>我们可以使用这个对象设置响应信息，请求我们一般使用请求对象获取请求信息，刚好相反</p><h2 id="设置响应行" tabindex="-1"><a class="header-anchor" href="#设置响应行" aria-hidden="true">#</a> 设置响应行</h2><h3 id="状态码" tabindex="-1"><a class="header-anchor" href="#状态码" aria-hidden="true">#</a> 状态码</h3><p><code>setStatus(200)</code>设置状态码为200，设置什么状态码，浏览器端就会发生什么变化，如果设置404，尽管资源是存在，浏览器也打不开</p><h2 id="设置响应头" tabindex="-1"><a class="header-anchor" href="#设置响应头" aria-hidden="true">#</a> 设置响应头</h2><blockquote><p><code>setHeader(String name, String value)</code>进行设置</p><p>设置响应头的<code>name</code>是不区分大小写的，但是一定要写准确</p></blockquote><h3 id="content-length" tabindex="-1"><a class="header-anchor" href="#content-length" aria-hidden="true">#</a> Content-Length</h3><p>设置<code>Content-Length</code>的值不能出现除数字以外的字符，否则显示为0</p><p>这样设置也不会显示<code>response.setHeader(&quot;Connection&quot;,&quot;none&quot;);</code>还是需要规范</p><h2 id="重定向" tabindex="-1"><a class="header-anchor" href="#重定向" aria-hidden="true">#</a> 重定向</h2><p>重定向也是资源跳转的方式</p><img src="http://ooszy.cco.vin/img/blog-note/image-20210218091808467.png?x-oss-process=style/pictureProcess1" alt="image-20210218091808467" style="zoom:50%;"><p>步骤</p><ol><li><p>设置状态码为<code>302</code></p><p><code>setStatus(302)</code></p><p>不需要设置状态码也是可以的</p></li><li><p>设置重定向的地址(跳转到哪里)</p><p><code>response.sendRedirect()</code>可以访问外部，注意：<code>需要协商虚拟目录</code>，否则可能会发生404</p></li><li><p><code>如果把虚拟目录写死，我们改变虚拟目录，并会发生404，最好的办法就是使用方法获取虚拟目录，并将其传入</code></p><blockquote><p>方法<code>request.getContextPath()</code></p></blockquote></li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> doGet <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//完成重定向的实现</span>\n        <span class="token comment">//设置状态码</span>\n        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//设置重定向地址</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;正在重定向...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//response.sendRedirect(&quot;/chu/responseDemon3&quot;);</span>\n        <span class="token comment">//改进  获取虚拟目录</span>\n        <span class="token class-name">String</span> contextPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//虚拟目录</span>\n        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>contextPath<span class="token operator">+</span><span class="token string">&quot;/responseDemon3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="重定向自己" tabindex="-1"><a class="header-anchor" href="#重定向自己" aria-hidden="true">#</a> 重定向自己</h3><p>像这种情况，自己重定向自己，就仿佛自己调用自己一样，但是会挺下来</p><img src="http://ooszy.cco.vin/img/blog-note/image-20210217212359466.png?x-oss-process=style/pictureProcess1" alt="image-20210217212359466" style="zoom:33%;"><h3 id="重定向特点" tabindex="-1"><a class="header-anchor" href="#重定向特点" aria-hidden="true">#</a> 重定向特点</h3><p><code>请求转发特点</code></p><blockquote><ol><li><p>浏览器的地址不会发生变化，尽管在内部访问的是两个servlet文件，但是浏览器中的地址是一个</p></li><li><p>只能转发内部的资源，对于外部的资源不能进行转发</p><p>外部资源像另一个module项目</p></li><li><p>不仅仅是针对于java程序，我们还可以是web页面</p><p>但是不知道为什么会出现这种情况</p></li><li><p>转发请求只有一个，通过抓包就可以看到</p></li></ol></blockquote><p>重定向的特点刚好和请求转发相反</p><blockquote><ol><li><p>地址栏会发生变化（变为重定向后的那个地址）</p></li><li><p>可以重定向外部资源，比如自己博客，百度</p></li><li><p>重定向是两个请求，</p></li><li><p>重定向不能共享对象，域对象</p><p><code>request.setAttribute(&quot;msg&quot;,&quot;hh&quot;);</code>获取msg值为<code>null</code></p></li></ol></blockquote><h1 id="路径" tabindex="-1"><a class="header-anchor" href="#路径" aria-hidden="true">#</a> 路径</h1><h2 id="相对路径" tabindex="-1"><a class="header-anchor" href="#相对路径" aria-hidden="true">#</a> 相对路径</h2><p>通过相对路径不能确定唯一资源</p><p>比如当前目录下<code>./</code>，当前目录的前一级目录<code>../</code></p><blockquote><p>注意:<code>这里的相对路径并不能通过看资源在包中的位置，来确定</code></p><img src="http://ooszy.cco.vin/img/blog-note/image-20210217213837071.png?x-oss-process=style/pictureProcess1" alt="image-20210217213837071" style="zoom:50%;"><p>比如这两个servlet文件，我们访问他们的时候分别是:<code>localhost/chu/r1</code>,<code>localhost/chu/p1</code>，在这里他们都是出于同一级目录<code>/chu</code>下，但是如果按照以前的那种，这个时候，r1到p1就需要回到上一级<code>request</code>，然后在进入<code>response</code>进行访问，所以<code>servlet中的相对位置是以url进行比较的</code></p></blockquote><p><code>写法</code>:不以<code>/</code>开头，使用<code>.</code>开头，如<code>./login.html</code></p><h2 id="绝对路径" tabindex="-1"><a class="header-anchor" href="#绝对路径" aria-hidden="true">#</a> 绝对路径</h2><p>通过绝对路径就可以唯一确定一个资源</p><blockquote><p><code>https://vipblogs.cn/2757.html</code>就可以唯一确定这一篇博客的位置，一般，我们<code>协议，端口，url</code>不用写，直接写成<code>/2757.html</code>也是可以的</p></blockquote><p><code>写法</code>:以<code>/</code>开头，比如<code>/2757.html</code></p><h2 id="相对路径和绝对路径使用" tabindex="-1"><a class="header-anchor" href="#相对路径和绝对路径使用" aria-hidden="true">#</a> 相对路径和绝对路径使用</h2><p>在html中使用</p><p>html页面地址: <code>http://localhost/rs/lj.html</code></p><p>responseDemon4地址: <code>localhost/rs/responseDemon4</code></p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./responseDemon4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>相对路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/rs/responseDemon4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>绝对路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>写相对路径时，一定要注意，是以<code>.</code>开头</p><p><code>写绝对路径时，一定不能在/rs/responseDemon4</code>前面加上<code>localhost</code>，因为真实地址会继续在url前面加上<code>localhost</code>,否则就会变成这样<code>http://localhost/rs/localhost/rs/responseDemon4</code> 404</p><h2 id="如何判断需不需要加虚拟目录" tabindex="-1"><a class="header-anchor" href="#如何判断需不需要加虚拟目录" aria-hidden="true">#</a> 如何判断需不需要加虚拟目录</h2><p>判断资源是给浏览器用的还是给服务器用的</p><p>如果是给浏览器用的，那么就需要加上虚拟目录，就比如重定向</p><p>如果是给服务器使用的，那么就不用加上虚拟目录</p><h1 id="输出到浏览器" tabindex="-1"><a class="header-anchor" href="#输出到浏览器" aria-hidden="true">#</a> 输出到浏览器</h1><h2 id="输出字符到浏览器" tabindex="-1"><a class="header-anchor" href="#输出字符到浏览器" aria-hidden="true">#</a> 输出字符到浏览器</h2><blockquote><p>步骤</p><ol><li><p>获取输出流</p><p><code>PrintWriter pw = response.getWriter();</code></p></li><li><p>使用输出流进行打印</p><p><code>pw.write(&quot;..........&quot;);</code></p></li></ol></blockquote><p>注意：如果输入的是中文，那么会出现乱码的情况</p><img src="C:\\Users\\chuchen\\Pictures\\视频截图\\javaweb\\web\\image-20210217232352694.png" alt="image-20210217232352694" style="zoom:50%;"><p>出现乱码情况是因为编码和浏览器解码的方式不同，就比如编码使用<code>utf-8</code>但是浏览器解码使用的是，<code>操作系统的编码，如果使用的是微软中文的操作系统，那么编码方式就是GBK或者GB2312</code>，这样就会出现乱码情况</p><p>解决乱码情况就是为其设置编码方式</p><h2 id="乱码" tabindex="-1"><a class="header-anchor" href="#乱码" aria-hidden="true">#</a> 乱码</h2><p>但是如果只是单纯的设置编码方式</p><blockquote><p><code>response.setCharacterEncoding(&quot;...&quot;)</code>，那么下一次在外网访问，可能又会出现这种乱码情况，解决办法就是，</p><ol><li><p>不仅仅设置编码方式<code>response.setCharacterEncoding(&quot;....&quot;)</code></p></li><li><p>还应该告诉浏览器，服务器发送的消息体数据的编码。建议浏览器使用该编码解码 <code>response.setHeader(&quot;content-type&quot;,&quot;text/html;charset=utf-8&quot;);</code></p><p>这个设置的意思就是，我使用的是utf-8进行编码，建议你（浏览器）使用utf-8进行解码</p></li></ol><p>只要浏览器收到这个消息，他就一定会使用建议的编码方式进行解码，因为这是在HTTP协议中规定的，他们必须要遵守</p></blockquote><p><code>记住简单形式设置编码就行，必须记住：response.setContentType(&quot;text/html;charset=utf-8&quot;);</code></p><h2 id="字节流" tabindex="-1"><a class="header-anchor" href="#字节流" aria-hidden="true">#</a> 字节流</h2><p>使用步骤和字符是一样的</p><p>注意：<code>如果通过String类型.getBytes(),需要在参数中指明使用的字符集</code>如果是空参，通过打印中文时，就会出现乱码情况，像下面这样</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//设置编码方式</span>\n        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//打印信息到浏览器</span>\n        <span class="token comment">//获取字节流</span>\n        <span class="token class-name">ServletOutputStream</span> sos <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">&quot;博客&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//使用输出流</span>\n        sos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> aByte <span class="token operator">:</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aByte<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><img src="http://ooszy.cco.vin/img/blog-note/image-20210217234857530.png?x-oss-process=style/pictureProcess1" alt="image-20210217234857530" style="zoom:67%;"><p><code>使用.getBytes(&quot;utf-8&quot;)就可以解决</code></p><h3 id="打印图片" tabindex="-1"><a class="header-anchor" href="#打印图片" aria-hidden="true">#</a> 打印图片？</h3><p>可以么</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//设置编码方式</span>\nresponse<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//打印信息到浏览器</span>\n<span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\chuchen\\\\Pictures\\\\好看动漫图片\\\\f.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//获取字节流</span>\n<span class="token class-name">ServletOutputStream</span> sos <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//打印图片</span>\n<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    sos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>原本想，应该是可以的，没想到编程这样了</p><img src="http://ooszy.cco.vin/img/blog-note/image-20210217235421387.png?x-oss-process=style/pictureProcess1" alt="image-20210217235421387" style="zoom:33%;"><p>应该是追加的，这个输出流中不能设置追加</p><p>应该是这个原因</p><p>所以才，读取到一点，就打印出来，并不像图片那样</p><blockquote><p>注意：<code>出现这种情况是因为默认值是在页面类进行显示，所以就会把字节打印到网页上，如果想要将字节转化为图片，就必须设置这个的值</code></p><p><code>response.setHeader(&quot;Content-disposition&quot;,&quot;attachment;filename=fg.jpg&quot;);</code></p></blockquote><h1 id="验证码" tabindex="-1"><a class="header-anchor" href="#验证码" aria-hidden="true">#</a> 验证码</h1><p>设置验证码的方式可以有两种选择</p><ol><li><p>将1万张或者更多的验证码图片上传至服务器，然后在随机的进行显示，但是这种情况，验证码里面的字符，你就......,</p></li><li><p>使用程序进行生成，这是我们选择的，还能保证基本不重复，而且还能拿到验证码的值</p></li></ol><blockquote><p>步骤</p><ol><li>画一个方框</li><li>随机取一个数字，并将其画在方框上</li><li>画一些随机分布的点</li><li>设置页面的JavaScript代码，点击切换</li></ol></blockquote><p>代码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>chu<span class="token punctuation">.</span>pirture</span><span class="token punctuation">;</span> \n<span class="token doc-comment comment">/**\n * @Author 程钦义 vipblogs.cn\n * @Version 1.0\n */</span>\n\n<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span></span><span class="token class-name">ImageIO</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>image<span class="token punctuation">.</span></span><span class="token class-name">BufferedImage</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/pictureDemon1&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PictureDemon1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token keyword">void</span> doGet <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//图片验证码</span>\n        <span class="token comment">//创建一个图片对象</span>\n        <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>\n        <span class="token class-name">BufferedImage</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">,</span><span class="token class-name">BufferedImage</span><span class="token punctuation">.</span>TYPE_INT_RGB<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//美化图片</span>\n        <span class="token comment">//获取画笔对象</span>\n        <span class="token class-name">Graphics</span> g <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">getGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//设置颜色</span>\n        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//画方框</span>\n        g<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>width<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>height<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//验证码</span>\n        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789&quot;</span><span class="token punctuation">;</span>\n        <span class="token comment">//随机数对象</span>\n        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//获取随机数字</span>\n            <span class="token keyword">int</span> nextInt <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">char</span> c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>nextInt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            g<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span>c<span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">//画点</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">700</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">int</span> width1 <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">int</span> height1 <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            g<span class="token punctuation">.</span><span class="token function">drawOval</span><span class="token punctuation">(</span>width1<span class="token punctuation">,</span>height1<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n\n        <span class="token comment">//将图片输出到页面</span>\n        <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span><span class="token string">&quot;png&quot;</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token keyword">void</span> doPost <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><p>显示效果</p><img src="http://ooszy.cco.vin/img/blog-note/image-20210218085808559.png?x-oss-process=style/pictureProcess1" alt="image-20210218085808559" style="zoom:80%;"><p>HTML页面</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>实现点击切换验证码效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./pictureDemon1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>200px<span class="token punctuation">&quot;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100px<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">margin</span><span class="token punctuation">:</span> 0 auto</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>看不清换一张<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;img&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    img<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&quot;./pictureDemon1?name=&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// img.src = &quot;./pictureDemon1?name=&quot;+(+new Date());</span>\n        img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&quot;./pictureDemon1&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><blockquote><p><code>我们写的http://localhost/rs//pictureDemon1就是一个图片的路径，那么我们想要在图片中的什么位置进行显示，就使用img标签，地址就是这个</code></p><p>点击进行切换，其实就是点击设置这个图片的路径，就能起到切换的效果，但是<code>如果图片的名字都是一样的，那么其并不会进行再一次发送一个请求，因为浏览器有缓存的功能，名字相同，就使用缓存的这张图片</code>，所以我们要做的就是如何让浏览器不缓存，可以在图片的后面加上参数，<code>参数是请求的信息</code>，可以使用时间戳</p><p><code>img.src = &quot;./pictureDemon1?name=&quot;+(+new Date())</code></p></blockquote><p>另外一种方式缓存的方式就是<code>设置响应头信息</code></p><img src="http://ooszy.cco.vin/img/blog-note/image-20210218090933645.png?x-oss-process=style/pictureProcess1" alt="image-20210218090933645" style="zoom:37%;"><blockquote><p><code>response.setHeader(&quot;Cache-Control&quot;,&quot;no-store&quot;);</code>禁止客户端进行缓存</p></blockquote><p>上图是点击图片切换(在路径中加上时间戳)，另一种是点击按钮，地址没改变的比较</p><h1 id="servletcontext" tabindex="-1"><a class="header-anchor" href="#servletcontext" aria-hidden="true">#</a> ServletContext</h1><p>域对象只能对请求转发的情况有作用，但是对于重定向等等，并不会有作用，对对象进行存储，打印出来的值也是<code>null</code>，但是我们可以使用<code>ServletContext</code>，这个代表的是整个web应用，可以使用这个对象和服务器(容器)进行通信</p><p>只要能够获取到此对象，那么所有的地址值都是相同的</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> doGet <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n   <span class="token comment">//获取ServletContex对象</span>\n   <span class="token comment">//1.通过request进行获取</span>\n   <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;r2&quot;</span><span class="token operator">+</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;chuchen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用servletContext对象存储数据</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>另一个servlet文件</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> doGet <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//获取ServletContex对象</span>\n        <span class="token comment">//1.通过request进行获取</span>\n        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;r3&quot;</span><span class="token operator">+</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Object</span> msg <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取数据</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>运行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>r2   <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationContextFacade</span><span class="token annotation punctuation">@3326e437</span>\n\nr3   <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationContextFacade</span><span class="token annotation punctuation">@3326e437</span>\nchuchen\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>他们的哈希码值是一样的，他们都是同一个对象</p></blockquote><p>如果先运行<code>r3</code>的话，那么打印出来的是一个<code>null</code>，因为还没有进行数据的存储，数据存储是在<code>r2</code>文件中进行的</p><h2 id="数据存储" tabindex="-1"><a class="header-anchor" href="#数据存储" aria-hidden="true">#</a> 数据存储</h2><p>和域对象一样，调用方法: <code>servletContext.setAttribute(&quot;msg&quot;,&quot;chuchen&quot;);</code>存储数据，调用</p><p><code>servletContext.getAttribute(&quot;msg&quot;);</code>拿到存储的数据，注意先来后到</p><p>调用<code>removeAttribute(String name)</code>移除存储的数据</p><h2 id="mime" tabindex="-1"><a class="header-anchor" href="#mime" aria-hidden="true">#</a> MiME</h2><p>https://webplatform.github.io/docs/concepts/Internet_and_Web/mime_types/</p><p>MIME类型使浏览器可以识别Web服务器通过HTTP发送的文件的文件类型。结果，浏览器能够选择合适的显示方法</p><blockquote><p>格式</p><p>大类型/小类型 text/html image/jpeg</p></blockquote><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h2><p>ServletContext对象有什么用？</p><ol><li><p>根据一个文件名获取其mime类型(<code>一定要是某某.某某的形式</code>)</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//获取ServletContex对象</span>\n<span class="token comment">//1.通过request进行获取</span>\n<span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//定义一个文件，获取这个文件的mime</span>\n<span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">&quot;a.html&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> mimeType <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>存储对象</p></li><li><p>获取一个文件的真实路径</p><img src="http://ooszy.cco.vin/img/blog-note/image-20210218195008429.png?x-oss-process=style/pictureProcess1" alt="image-20210218195008429" style="zoom:50%;"><p>有三个文件<code>a.txt,b.txt,c.txt</code>他们之间的存放位置如图，通过ServletContext获取这几个文件的真实路径</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//获取一个文件的真实路径 使用ServletContext对象                                     </span>\n<span class="token class-name">ServletContext</span> context <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                \n<span class="token comment">//  /rs/servletContextDemon5                                         </span>\n<span class="token class-name">String</span> a <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;./WEB-INF/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   \n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a: &quot;</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                                         \n<span class="token class-name">String</span> b <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;./b.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           \n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;b: &quot;</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>                                         \n<span class="token class-name">String</span> c <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;./WEB-INF/classes/com/chu/c.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;c: &quot;</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                                         \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>c.txt</code>文件不是在类<code>ServletContextDemon5</code>的上一级目录中么，<code>ServletContextDemon5</code>文件的url为<code>http://localhost/rs/servletContextDemon5</code>，那他的上一级，不就是<code>../c.txt</code>就可以获取到了么？？？？</p><p>不能这样进行获取，<code>忽略了Tomcat中java文件的存放位置</code>，所有的java文件都是存放在<code>WEB-INF/classes</code>目录中，下面就是src目录，所以，用相对路径的写法，<code>c.txt</code>的路径应该写为<code>./WEB-INF/classes/com/chu/c.txt</code>，web目录就是当前位置，所以直接从这里进去</p><p>运行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>a<span class="token operator">:</span> <span class="token class-name">D</span><span class="token operator">:</span>\\<span class="token class-name">Code</span>\\webservlet\\out\\artifacts\\webresponse_war_exploded\\WEB<span class="token operator">-</span>INF\\a<span class="token punctuation">.</span>txt\nb<span class="token operator">:</span> <span class="token class-name">D</span><span class="token operator">:</span>\\<span class="token class-name">Code</span>\\webservlet\\out\\artifacts\\webresponse_war_exploded\\b<span class="token punctuation">.</span>txt\nc<span class="token operator">:</span> <span class="token class-name">D</span><span class="token operator">:</span>\\<span class="token class-name">Code</span>\\webservlet\\out\\artifacts\\webresponse_war_exploded\\WEB<span class="token operator">-</span>INF\\classes\\com\\chu\\c<span class="token punctuation">.</span>txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="文件下载案例" tabindex="-1"><a class="header-anchor" href="#文件下载案例" aria-hidden="true">#</a> 文件下载案例</h2><p>因为像图片，html这种，浏览器已经提供了解析，所以图片这些可以直接显示出来，我们要的需求是，所有的文件，都通过下载进行查看</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>chu</span><span class="token punctuation">;</span> <span class="token doc-comment comment">/**\n * @Author 程钦义 vipblogs.cn\n * @Version 1.0\n */</span>\n\n<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servletDownload&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDownload</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token keyword">void</span> doGet <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token keyword">void</span> doPost <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//完成文件的下载功能</span>\n        <span class="token comment">// 1.通过Context对象获取文件的真实路径</span>\n        <span class="token class-name">ServletContext</span> context <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//通过页面的请求获取那个文件的字节流</span>\n        <span class="token class-name">String</span> filename <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;filename&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;filename: &quot;</span><span class="token operator">+</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//设置响应头</span>\n        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;content-disposition&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;attachment;filename=&quot;</span><span class="token operator">+</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">String</span> file_path <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;/img/&quot;</span><span class="token operator">+</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;file_path: &quot;</span><span class="token operator">+</span>file_path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//获取流</span>\n        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token comment">//获取输出流</span>\n        <span class="token keyword">int</span> read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token class-name">ServletOutputStream</span> sos <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            sos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>HTML页面</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/rs/servletDownload?filename=a.jpg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>a图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/rs/servletDownload?filename=f.jpg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>f图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/rs/servletDownload?filename=bj.md<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>笔记<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>发现一个问题，页面在img目录中有，但是运行时找不大到</p></li></ol><h3 id="解决中文乱码问题" tabindex="-1"><a class="header-anchor" href="#解决中文乱码问题" aria-hidden="true">#</a> 解决中文乱码问题</h3><p>使用工具类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span><span class="token class-name">BASE64Encoder</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">UnsupportedEncodingException</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLEncoder</span><span class="token punctuation">;</span>\n\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DownLoadUtils</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token class-name">String</span> agent<span class="token punctuation">,</span> <span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnsupportedEncodingException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>agent<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;MSIE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// IE浏览器</span>\n            filename <span class="token operator">=</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            filename <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;+&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>agent<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;Firefox&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 火狐浏览器</span>\n            <span class="token class-name">BASE64Encoder</span> base64Encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BASE64Encoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            filename <span class="token operator">=</span> <span class="token string">&quot;=?utf-8?B?&quot;</span> <span class="token operator">+</span> base64Encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;?=&quot;</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 其它浏览器</span>\n            filename <span class="token operator">=</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> filename<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>需要进行导包</p>',118),c={},l=(0,a(83744).Z)(c,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,o],64)}]])}}]);