"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5035],{90791:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-c172abee",path:"/datastructure/hash/hash.html",title:"哈希表",lang:"en-US",frontmatter:{date:"2021/11/1 12:00"},excerpt:"",headers:[{level:2,title:"概念",slug:"概念",children:[]},{level:2,title:"代码演示",slug:"代码演示",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},4848:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var p=a(66252);const e=(0,p.uE)('<h1 id="哈希表" tabindex="-1"><a class="header-anchor" href="#哈希表" aria-hidden="true">#</a> 哈希表</h1><ul><li>例题</li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>一个公司,当有新的员工来报道时,要求将该员工的信息加入(id,性别,年龄,住址..),当输入该员工的id时,要求查找到该员工的 所有信息.</p><blockquote><p>要求: 不使用数据库,尽量节省内存,速度越快越好=&gt;哈希表(散列)</p></blockquote></div><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><p><code>散列表（Hash table，也叫哈希表）</code>，是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射(<code>例如id</code>)到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p><img src="https://picture.xcye.xyz/image-20211101140649005.png?x-oss-process=style/pictureProcess1" alt="image-20211101140649005" style="zoom:50%;"><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>理解</p><p>哈希表就是在一个数组中，每一个下标对应的是一个链表(<code>如单链表</code>)，因为链表是通过指针进行两两之间的链接的，所以我们可以将一个节点，加入到指定的下标对应的那条链表上，但是一般都是通过取模运行，获取对应的下标</p><p>这里使用一个节点进行演示</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n<span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/** 指向下一个节点 **/</span>\n<span class="token keyword">public</span> <span class="token class-name">EmpNode</span> next<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>那么如果我们需要在这个哈希表上，添加新的节点，就可以通过<code>id % arr.length</code>得到此节点最终添加到哪个下标上</p></div><h2 id="代码演示" tabindex="-1"><a class="header-anchor" href="#代码演示" aria-hidden="true">#</a> 代码演示</h2><details class="custom-container details"><summary>code</summary><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">vin<span class="token punctuation">.</span>cco<span class="token punctuation">.</span>hash</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * 这是一个哈希表的代码演示\n * <span class="token keyword">@author</span> Administrator 程钦义\n * <span class="token keyword">@blog</span> https://blog.cco.vin\n * <span class="token keyword">@date</span> 2021/11/01 13:12\n **/</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashTabDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">HashTable</span> hashTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashTable</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;add:  a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;list: l&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;find: f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;exit: e&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            key <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">case</span> <span class="token string">&quot;a&quot;</span><span class="token operator">:</span>\n                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">int</span> id <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token class-name">String</span> name <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token class-name">EmpNode</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmpNode</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    hashTable<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token keyword">case</span> <span class="token string">&quot;l&quot;</span><span class="token operator">:</span>\n                    hashTable<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token keyword">case</span> <span class="token string">&quot;f&quot;</span><span class="token operator">:</span>\n                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    id <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token comment">//hashTable.findEmpById(id);</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token keyword">case</span> <span class="token string">&quot;e&quot;</span><span class="token operator">:</span>\n                    scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">default</span><span class="token operator">:</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * 这是一个哈希数组链表\n * */</span>\n<span class="token keyword">class</span> <span class="token class-name">HashTable</span> <span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/** 哈希表的最大长度 **/</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/** 这是一个哈希数组 **/</span>\n    <span class="token keyword">public</span> <span class="token class-name">EmpLinkList</span><span class="token punctuation">[</span><span class="token punctuation">]</span> empLinkLists<span class="token punctuation">;</span>\n\n\n    <span class="token keyword">public</span> <span class="token class-name">HashTable</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> maxSize<span class="token punctuation">;</span>\n        empLinkLists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmpLinkList</span><span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            empLinkLists<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmpLinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">EmpNode</span> empNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        empLinkLists<span class="token punctuation">[</span><span class="token function">hashFun</span><span class="token punctuation">(</span>empNode<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>empNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> empLinkLists<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            empLinkLists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">hashFun</span><span class="token punctuation">(</span><span class="token class-name">EmpNode</span> empNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> empNode<span class="token punctuation">.</span>id <span class="token operator">%</span> maxSize<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * 这是一个员工数据的节点\n * */</span>\n<span class="token keyword">class</span> <span class="token class-name">EmpNode</span> <span class="token punctuation">{</span>\n\n    <span class="token doc-comment comment">/** 姓名 **/</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/** 指向下一个节点 **/</span>\n    <span class="token keyword">public</span> <span class="token class-name">EmpNode</span> next<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">EmpNode</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * 这是一个单链表\n * */</span>\n<span class="token keyword">class</span> <span class="token class-name">EmpLinkList</span> <span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/** 这是一个头指针 **/</span>\n    <span class="token keyword">public</span> <span class="token class-name">EmpNode</span> head<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">EmpNode</span> empNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//向链表中，插入节点</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            head <span class="token operator">=</span> empNode<span class="token punctuation">;</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token class-name">EmpNode</span> tempNode <span class="token operator">=</span> head<span class="token punctuation">;</span>\n        <span class="token comment">//链表不为空</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            tempNode <span class="token operator">=</span> tempNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">//找到最后一个节点</span>\n        tempNode<span class="token punctuation">.</span>next <span class="token operator">=</span> empNode<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//遍历链表</span>\n        <span class="token class-name">EmpNode</span> temNode <span class="token operator">=</span> head<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>temNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token string">&quot;号链表为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token string">&quot;号链表信息: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;===&gt; {&quot;</span><span class="token operator">+</span> temNode<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> temNode<span class="token punctuation">.</span>id <span class="token operator">+</span><span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>temNode<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            temNode <span class="token operator">=</span> temNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br></div></div></details><p>类结构</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//包含主方法</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashTabDemo</span> <span class="token punctuation">{</span>\n  \n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * 这是一个哈希数组链表，也就是一个数组\n * */</span>\n<span class="token keyword">class</span> <span class="token class-name">HashTable</span> <span class="token punctuation">{</span>\n  \n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * 节点\n * */</span>\n<span class="token keyword">class</span> <span class="token class-name">EmpNode</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * 这是一个单链表，此单链表中的每一个节点，都是EmpNode对象\n * */</span>\n<span class="token keyword">class</span> <span class="token class-name">EmpLinkList</span> <span class="token punctuation">{</span>\n    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>其中，HashTable是一个数组，我们最终操作的也是这个对象，此对象中，存在诸如add,list,find,delete等删除节点的方法，这些方法会再次调用EmpLinkList对象中对应的方法，对哈希表进行增加，删除等</p><p>所以最终的方法执行都是在EmpLinkList对象中</p></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>',13),t=(0,p.Uk)("哈希表因为使用了数组的方式，所以其在数据查找和遍历方面有较大的优势("),c=(0,p._)("code",null,"如果是一个有序数组，还可以配置二分查找，查找速度更快",-1),o=(0,p.Uk)(")，但是对于数组的长度不够，需要扩容，或者新增一个链表，删除一个链表的时候，会对数组的下标进行移动，会特别耗费时间，这是他的逆势，所以就有了"),l=(0,p._)("code",null,"树",-1),u=(0,p.Uk)("的诞生，请查看"),i=(0,p.Uk)("二叉树"),r={},k=(0,a(83744).Z)(r,[["render",function(n,s){const a=(0,p.up)("RouterLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("p",null,[t,c,o,l,u,(0,p.Wm)(a,{to:"/datastructure/tree/binarytree.html"},{default:(0,p.w5)((()=>[i])),_:1})])],64)}]])}}]);