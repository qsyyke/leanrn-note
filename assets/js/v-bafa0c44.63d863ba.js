"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9905],{96234:(s,n,a)=>{a.r(n),a.d(n,{data:()=>t});const t={key:"v-bafa0c44",path:"/datastructure/%E9%80%92%E5%BD%92/",title:"递归",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"递归JVM初识",slug:"递归jvm初识",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},99690:(s,n,a)=>{a.r(n),a.d(n,{default:()=>k});var t=a(66252);const e=(0,t._)("h1",{id:"递归",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#递归","aria-hidden":"true"},"#"),(0,t.Uk)(" 递归")],-1),p=(0,t._)("h2",{id:"递归jvm初识",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#递归jvm初识","aria-hidden":"true"},"#"),(0,t.Uk)(" 递归JVM初识")],-1),c=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211018203057464.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),o=(0,t._)("p",null,"上面程序就是一个简单的递归操作",-1),l=(0,t._)("p",null,"其在内存中的执行过程如下图所示",-1),i=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211018203235368.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),u=(0,t.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>首先main方法会先入栈，当调佣test方法的时候，test方法也会进行入栈</li><li>每一次递归调用，都会进行入栈操作</li></ol><p>需要理清楚递归的调用顺序</p><p><code>一定要给递归设置一个条件，如果递归一直执行下去的话，那么此程序就会出现栈溢出的情况</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Exception</span> in thread <span class="token string">&quot;main&quot;</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>StackOverflowError</span>\n\tat <span class="token class-name"><span class="token namespace">vin<span class="token punctuation">.</span>cco<span class="token punctuation">.</span>recursion<span class="token punctuation">.</span></span>RecursionTest1</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">RecursionTest1</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">)</span>\n\tat <span class="token class-name"><span class="token namespace">vin<span class="token punctuation">.</span>cco<span class="token punctuation">.</span>recursion<span class="token punctuation">.</span></span>RecursionTest1</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">RecursionTest1</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></div>',1),r={},k=(0,a(83744).Z)(r,[["render",function(s,n){return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,p,c,o,l,i,u],64)}]])}}]);