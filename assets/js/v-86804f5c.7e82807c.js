"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6486],{61537:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-86804f5c",path:"/spring/springmvc/SSM%E6%95%B4%E5%90%88%E5%BC%80%E5%8F%91.html",title:"SSM整合开发",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"依赖",slug:"依赖",children:[]},{level:2,title:"配置文件",slug:"配置文件",children:[{level:3,title:"数据库信息",slug:"数据库信息",children:[]},{level:3,title:"spring配置",slug:"spring配置",children:[]}]},{level:2,title:"springmvc配置",slug:"springmvc配置",children:[{level:3,title:"web.xml",slug:"web-xml",children:[]}]},{level:2,title:"mybatis配置",slug:"mybatis配置",children:[]},{level:2,title:"dao",slug:"dao",children:[]},{level:2,title:"service",slug:"service",children:[]},{level:2,title:"controller",slug:"controller",children:[]},{level:2,title:"总结及注意",slug:"总结及注意",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},37841:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(66252).uE)('<h1 id="ssm整合开发" tabindex="-1"><a class="header-anchor" href="#ssm整合开发" aria-hidden="true">#</a> SSM整合开发</h1><p>SSM 编程，即 SpringMVC + Spring + MyBatis 整合，是当前最为流行的 JavaEE 开发技术架构。其实 SSM 整合的实质，仅仅就是将 MyBatis整合入 Spring。因为 SpringMVC原本就是 Spring的一部分，不用专门整合。</p><p>SSM 整合的实现方式可分为两种：基于 XML 配置方式，基于注解方式。</p><h1 id="基本步骤" tabindex="-1"><a class="header-anchor" href="#基本步骤" aria-hidden="true">#</a> 基本步骤</h1><ol><li>新建数据库</li><li>创建maven项目</li><li>添加依赖，spring，springmvc，mybatis，jsckson，mysql，servlet api，servlet jsp等等</li><li>编写<code>web.xml</code>文件 <ul><li>创建<code>DispatcherServlet</code>对象，用于创建springmvc容器</li><li>创建spring监听器，<code>ContextLoaderListener</code>用于创建spring容器，管理对象</li><li>设置字符集过滤器，因为post中文会出现乱码问题</li></ul></li><li>创建包，Controller包，service，dao，实体类包名创建好</li><li>编写配置文件 <ul><li>spring配置</li><li>mybatis配置</li><li>springmvc配置</li><li>数据库信息配置</li></ul></li><li>之后就是写代码</li></ol><h2 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> 依赖</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;junit&lt;/groupId&gt;\n        &lt;artifactId&gt;junit&lt;/artifactId&gt;\n        &lt;version&gt;4.11&lt;/version&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;\n        &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;\n        &lt;version&gt;4.0.1&lt;/version&gt;\n        &lt;scope&gt;provided&lt;/scope&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;\n        &lt;artifactId&gt;javax.servlet.jsp-api&lt;/artifactId&gt;\n        &lt;version&gt;2.3.1&lt;/version&gt;\n        &lt;scope&gt;compile&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;!--springmvc--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\n        &lt;version&gt;5.3.6&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!--事务的--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;\n        &lt;version&gt;5.2.5.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;\n        &lt;version&gt;5.2.5.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!--aspectj 依赖--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;\n        &lt;version&gt;5.3.6&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!--jackson--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n        &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;\n        &lt;version&gt;2.12.1&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n        &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;\n        &lt;version&gt;2.12.1&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!--mybatis 和 spring 整合的--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;\n        &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;\n        &lt;version&gt;1.3.1&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!--mybatis--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;\n        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;\n        &lt;version&gt;3.5.1&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!--mysql 驱动--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;mysql&lt;/groupId&gt;\n        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n        &lt;version&gt;5.1.9&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!--druid--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n        &lt;artifactId&gt;druid&lt;/artifactId&gt;\n        &lt;version&gt;1.1.12&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n\n&lt;build&gt;\n    &lt;resources&gt;\n        &lt;resource&gt;\n            &lt;directory&gt;src/main/java&lt;/directory&gt;&lt;!--所在的目录--&gt;\n            &lt;includes&gt;&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;\n                &lt;include&gt;**/*.properties&lt;/include&gt;\n                &lt;include&gt;**/*.xml&lt;/include&gt;\n            &lt;/includes&gt;\n            &lt;filtering&gt;false&lt;/filtering&gt;\n        &lt;/resource&gt;\n    &lt;/resources&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n            &lt;version&gt;3.1&lt;/version&gt;\n            &lt;configuration&gt;\n                &lt;source&gt;1.8&lt;/source&gt;\n                &lt;target&gt;1.8&lt;/target&gt;\n            &lt;/configuration&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br></div></div><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><h3 id="数据库信息" tabindex="-1"><a class="header-anchor" href="#数据库信息" aria-hidden="true">#</a> 数据库信息</h3><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">jdbc.url</span> <span class="token punctuation">=</span> <span class="token attr-value">jdbc:mysql://localhost:3306/mybatis</span>\n<span class="token attr-name">jdbc.username</span> <span class="token punctuation">=</span> <span class="token attr-value">root</span>\n<span class="token attr-name">jdbc.pwd</span> <span class="token punctuation">=</span> <span class="token attr-value">123456</span>\n<span class="token attr-name">jdbc.maxActive</span> <span class="token punctuation">=</span> <span class="token attr-value">20</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="spring配置" tabindex="-1"><a class="header-anchor" href="#spring配置" aria-hidden="true">#</a> spring配置</h3><ol><li>组件扫描器，因为要使用到注解，进行对象的创建，就必须要有组件扫描器，这里扫描的包就只需要是service就可以了，因为dao是由<code>MapperScannerConfigurer</code>对象自动扫描创建，视图层是由springmvc配置文件，进行扫描，所以就剩下service</li><li>引入属性配置文件，因为和mybatis是整合的，所以在spring配置文件中，需要用到连接池等，就需要引入数据库连接信息配置文件</li><li>配置druid连接池信息</li><li>注册SQLSessionFactoryBean</li><li>声明对象<code>MapperScannerConfigurer</code>，会自动扫描Mapper接口，自动代理对象，此对象可以自动创建dao对象，并且此dao对象的名字就是dao类的首字母小写作为名字</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;!--引入数据库连接信息--&gt;\n&lt;context:property-placeholder location=&quot;classpath:conf/jdbc.properties&quot; /&gt;\n\n&lt;!--配置druid连接池信息--&gt;\n&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;\n      init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt;\n    &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot; /&gt;\n    &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot; /&gt;\n    &lt;property name=&quot;password&quot; value=&quot;${jdbc.pwd}&quot; /&gt;\n    &lt;property name=&quot;maxActive&quot; value=&quot;${jdbc.maxActive}&quot; /&gt;\n&lt;/bean&gt;\n\n&lt;!--SqlSessionFactoryBean创建SqlSessionFactory--&gt;\n&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;\n    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;\n    &lt;property name=&quot;configLocation&quot;  value=&quot;classpath:conf/mybatis.xml&quot; /&gt;\n&lt;/bean&gt;\n\n&lt;!--声明mybatis的扫描器，创建dao对象--&gt;\n&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;\n    &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot; /&gt;\n    &lt;property name=&quot;basePackage&quot; value=&quot;vin.cco.dao&quot; /&gt;\n&lt;/bean&gt;\n\n&lt;!--创建对象，此对象会自动扫描Dao对象，自动创建dao类对象--&gt;\n&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;\n    &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot; /&gt;\n    &lt;property name=&quot;basePackage&quot; value=&quot;vin.cco.dao&quot; /&gt;\n&lt;/bean&gt;\n\n&lt;context:component-scan base-package=&quot;vin.cco.service&quot; /&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="springmvc配置" tabindex="-1"><a class="header-anchor" href="#springmvc配置" aria-hidden="true">#</a> springmvc配置</h2><ol><li>组件扫描器，因为在springmvc中，会使用到注解，所以就必须有组件扫描器</li><li>视图解析器，可以不用写很多访问路径的目录信息<code>WEB-INF/jsp</code></li><li>注册注解驱动，解决静态资源冲突问题，注册注解驱动之后，spring会使用<code>component-scan</code>组件扫描器，将我们使用的注解标记到工厂中，用来处理我们的请求，还有能够帮助我们处理返回值作用，比如，返回一个对象，可以将此对象转换为json格式，返回，就必须要用到这个注解驱动的作用</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;!--声明组件扫描器--&gt;\n&lt;context:component-scan base-package=&quot;vin.cco.controller&quot; /&gt;\n\n&lt;!--视图解析器--&gt;\n&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; &gt;\n    &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;\n    &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;\n&lt;/bean&gt;\n\n&lt;!--注解驱动--&gt;\n&lt;mvc:annotation-driven /&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="web-xml" tabindex="-1"><a class="header-anchor" href="#web-xml" aria-hidden="true">#</a> web.xml</h3><p>在此文件中，需要配置</p><ol><li>注册中央调度器<code>DispatcherServlet</code></li><li>创建spring监听器，用于在服务器启动的时候，完成spring容器对象的初始化操作</li><li>设置字符集过滤器，用于针对post请求，出现的中文乱码问题</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;!--注册中央调度器--&gt;\n&lt;servlet&gt;\n    &lt;servlet-name&gt;myweb&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;classpath:conf/dispatcherServlet.xml&lt;/param-value&gt;\n    &lt;/init-param&gt;\n    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n&lt;/servlet&gt;\n&lt;servlet-mapping&gt;\n    &lt;servlet-name&gt;myweb&lt;/servlet-name&gt;\n    &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;\n\n&lt;!--注册spring监听器，在服务器启动的时候，完成对象的初始化操作--&gt;\n&lt;context-param&gt;\n    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n    &lt;param-value&gt;classpath:conf/applicationContext.xml&lt;/param-value&gt;\n&lt;/context-param&gt;\n&lt;listener&gt;\n    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n\n&lt;!--注册字符集过滤器--&gt;\n&lt;filter&gt;\n    &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;\n    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;encoding&lt;/param-name&gt;\n        &lt;param-value&gt;utf-8&lt;/param-value&gt;\n    &lt;/init-param&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;forceRequestEncoding&lt;/param-name&gt;\n        &lt;param-value&gt;true&lt;/param-value&gt;\n    &lt;/init-param&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;forceResponseEncoding&lt;/param-name&gt;\n        &lt;param-value&gt;true&lt;/param-value&gt;\n    &lt;/init-param&gt;\n&lt;/filter&gt;\n&lt;filter-mapping&gt;\n    &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;\n    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h2 id="mybatis配置" tabindex="-1"><a class="header-anchor" href="#mybatis配置" aria-hidden="true">#</a> mybatis配置</h2><ol><li>配置别名，使用<code>&lt;typeAliases&gt;</code>，配置别名之后，就不用再DaoMapper映射文件中，写类的权限定名称了，<code>&lt;package name=&quot;vin.cco.dao&quot; /&gt;</code>这样配置，那么这个dao包下的类名就是别名</li><li>指定sql语句的映射文件位置，<code>&lt;package name=&quot;vin.cco.dao&quot; /&gt;</code>一定要注意，映射文件的名字一定要和接口的名一样，包括名字的大小写</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;!--别名--&gt;\n&lt;typeAliases&gt;\n    &lt;package name=&quot;vin.cco.domain&quot;/&gt;\n&lt;/typeAliases&gt;\n\n&lt;!--设置sql语句映射文件文职--&gt;\n&lt;mappers&gt;\n    &lt;package name=&quot;vin.cco.dao&quot; /&gt;\n&lt;/mappers&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h1 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h1><h2 id="dao" tabindex="-1"><a class="header-anchor" href="#dao" aria-hidden="true">#</a> dao</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentDao</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> <span class="token function">insertStuDao</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectStuDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>sql映射文件</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vin.cco.dao.StudentDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectStuDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>\n        select name,id,age from student;\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertStuDao<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>\n        insert into student (name,age) value (#{name},#{age})\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p><code>select name,id,age from student</code>这里最好不要使用<code>select * from student;</code></p></blockquote><h2 id="service" tabindex="-1"><a class="header-anchor" href="#service" aria-hidden="true">#</a> service</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentSer</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> <span class="token function">insertStuDao</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectStuDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//impl</span>\n<span class="token annotation punctuation">@Service</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentSerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StudentSer</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">//使用自动注入的方法，也就是按类型注入</span>\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">StudentDao</span> studentDao<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> insertStuDao <span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> studentDao<span class="token punctuation">.</span><span class="token function">insertStuDao</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> selectStuDao <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> studentDao<span class="token punctuation">.</span><span class="token function">selectStuDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="controller" tabindex="-1"><a class="header-anchor" href="#controller" aria-hidden="true">#</a> controller</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/student&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Controller</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">StudentSer</span> ser<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;insertStu&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">insertStu</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            num <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">insertStuDao</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">String</span> tips <span class="token operator">=</span> <span class="token string">&quot;学生 {&quot;</span><span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">&quot;} 插入成功&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            tips <span class="token operator">=</span> <span class="token string">&quot;学生 {&quot;</span><span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">&quot;} 插入失败&quot;</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">&quot;tips&quot;</span><span class="token punctuation">,</span>tips<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">&quot;show&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;s&quot;</span><span class="token punctuation">)</span>\n    <span class="token annotation punctuation">@ResponseBody</span>\n    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> ser<span class="token punctuation">.</span><span class="token function">selectStuDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> students<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>测试通过</p><h2 id="总结及注意" tabindex="-1"><a class="header-anchor" href="#总结及注意" aria-hidden="true">#</a> 总结及注意</h2><p>对于静态文件，设置mapper为<code>/</code>，但是在springmvc配置文件中，使用<code>&lt;mvc:resources mapping=&quot;/image/**&quot; location=&quot;/image/&quot; /&gt;</code>解决静态文件问题，访问不到资源，重新启动idea便可以解决问题</p><p>对于查询操作，最好不要使用<code>select *</code>，不推荐这样使用，因为如果表的结构发生改变，可以会引起不必要的问题</p><p>方法返回的类型是<code>List&lt;Student&gt;</code>，在写sql映射文件的时候，<code>resultType=&quot;Student&quot;</code>不需要考虑如何将Student封装成<code>List&lt;Student&gt;</code>，我们只需要写集合中的被封装的那个对象就可以了，其余的操作，框架会帮助我们做</p><p>对于sql映射文件，不要忘记<code>&lt;mapper namespace=&quot;vin.cco.dao.StudentDao&quot;&gt;</code>namespace值，不然就会出现异常信息，此值需要填写dao接口的类名全限定名称就可</p>',39),e={},p=(0,a(83744).Z)(e,[["render",function(n,s){return t}]])}}]);