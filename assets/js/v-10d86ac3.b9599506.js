"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2048],{56007:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-10d86ac3",path:"/vue/vue2/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E5%92%8Cthis.html",title:"箭头函数和this",lang:"en-US",frontmatter:{},excerpt:"",headers:[],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},27345:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});const e=(0,a(66252).uE)('<h1 id="箭头函数和this" tabindex="-1"><a class="header-anchor" href="#箭头函数和this" aria-hidden="true">#</a> 箭头函数和this</h1><p>箭头函数是es6的语法，其基本定义如下</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">ccc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">参数列表</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n箭头函数就为\n  <span class="token keyword">const</span> <span class="token function-variable function">ccc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">参数列表</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>const sum(num1,num2) {\n    return num1 + num2;\n}\nconst sum = (num1, num2) =&gt; {\n    return num1 + num2\n  }\n\n// 1.2.放入一个参数\n  const power = num =&gt; {\n    return num * num\n  }\n\n  // 2.函数中\n  // 2.1.函数代码块中有多行代码时\n  const test = () =&gt; {\n    // 1.打印Hello World\n    console.log(&#39;Hello World&#39;);\n\n    // 2.打印Hello Vuejs\n    console.log(&#39;Hello Vuejs&#39;);\n  }\n\n  // 2.2.函数代码块中只有一行代码\n  // const mul = (num1, num2) =&gt; {\n  //   return num1 + num2\n  // }\n  const mul = (num1, num2) =&gt; num1 * num2\n  console.log(mul(20, 30));\n\n  // const demo = () =&gt; {\n  //   console.log(&#39;Hello Demo&#39;);\n  // }\n  const demo = () =&gt; console.log(&#39;Hello Demo&#39;)\n  console.log(demo());\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>this指向问题</p><ul><li><p>问题: 箭头函数中的this是如何查找的了?</p><p>答案: 向外层作用域中, 一层层查找this, 直到有this的定义.</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n<span class="token comment">//这里的this为window</span>\n\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n<span class="token comment">//这个this执行打印为window，因为这个的上一层，什么也没有，但是最终会指定window</span>\n\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',7),p={},l=(0,a(83744).Z)(p,[["render",function(n,s){return e}]])}}]);