"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7332],{65657:(s,e,a)=>{a.r(e),a.d(e,{data:()=>n});const n={key:"v-1ea7304a",path:"/linux/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4.html",title:"Linux中的常用指令",lang:"en-US",frontmatter:{date:"2021/12/17 8:22",title:"Linux中的常用指令"},excerpt:"",headers:[{level:2,title:"ls",slug:"ls",children:[]},{level:2,title:"cd",slug:"cd",children:[]},{level:2,title:"文件操作类",slug:"文件操作类",children:[]},{level:2,title:"mkdir",slug:"mkdir",children:[]},{level:2,title:"rmdir",slug:"rmdir",children:[]},{level:2,title:"touch",slug:"touch",children:[]},{level:2,title:"cp",slug:"cp",children:[]},{level:2,title:"rm",slug:"rm",children:[]},{level:2,title:"mv",slug:"mv",children:[]},{level:2,title:"cat",slug:"cat",children:[]},{level:2,title:"more",slug:"more",children:[]},{level:2,title:"less",slug:"less",children:[]},{level:2,title:"echo",slug:"echo",children:[]},{level:2,title:"head",slug:"head",children:[]},{level:2,title:"tail",slug:"tail",children:[]},{level:2,title:"> 指令和 >> 指令",slug:"指令和-指令",children:[]},{level:2,title:"ln",slug:"ln",children:[]},{level:2,title:"history",slug:"history",children:[]},{level:2,title:"日期类",slug:"日期类",children:[{level:3,title:"date显示时间",slug:"date显示时间",children:[]},{level:3,title:"date设置时间",slug:"date设置时间",children:[]},{level:3,title:"cal",slug:"cal",children:[]}]},{level:2,title:"搜索类指令",slug:"搜索类指令",children:[{level:3,title:"find",slug:"find",children:[]},{level:3,title:"locate",slug:"locate",children:[]},{level:3,title:"which",slug:"which",children:[]}]},{level:2,title:"grep 指令和 管道符号 |",slug:"grep-指令和-管道符号",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},1859:(s,e,a)=>{a.r(e),a.d(e,{default:()=>I});var n=a(66252);const l=(0,n.uE)('<h2 id="ls" tabindex="-1"><a class="header-anchor" href="#ls" aria-hidden="true">#</a> ls</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ls</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>目录或是文件<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>比较常用的选项</p><p><code>-a</code> ：显示当前目录所有的文件和目录，包括隐藏的。</p><p><code>-l</code> ：以列表的方式显示信息</p><p><code>-h </code> : 以人类看得懂的方式展示出来</p></blockquote><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>在Linux中，所有以<code>.</code>开头的文件，都是隐藏文件，我们需要使用<code>ls -a</code>才能看到</p></div><blockquote><p>查看opt目录下的所有文件，以列的方式展示</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ls</span> -al /opt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>如果我们需要<code>-a</code>和<code>-l</code>两个选项，直接组合就行<code>ls -la</code>或者<code>ls -al</code>,其对顺序没有多大的要求</p></div>',6),c=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211217082701317.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),i=(0,n.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#常用命令</span>\n<span class="token function">ls</span> *.js 列出所有以.js结尾的文件\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ls</span> -R 会列出目录中的所有文件信息，包含文件夹里还存在其他的文件夹或者文件夹的嵌套\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="cd" tabindex="-1"><a class="header-anchor" href="#cd" aria-hidden="true">#</a> cd</h2><blockquote><p>常用指令</p><p><code>cd ~</code> 或者 <code>cd </code>回到自己的家目录, 比如 你是 root ， cd ~ 到 /root，<code>这里直接输入cd也是可以直接回到家目录的</code></p><p><code>cd ..</code> 回到当前目录的上一级目录</p><p><code>cd /</code> 直接回到根目录</p></blockquote><p>如果从当前文件夹，需要进入此文件夹中的下一级文件夹，可以直接<code>cd 文件夹名</code>或者<code>cd ./文件夹名</code>，但是不能使用<code>cd /文件夹名</code>，这是进入<code>根目录下的文件夹</code></p>',5),o=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211217083425930.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),p=(0,n.uE)('<blockquote><p>像上图中的，此files文件夹中，含有<code>.</code>和<code>..</code>两个隐藏文件，但是我们直接<code>cd .</code>，执行此命令，就相当于执行<code>cd ./</code>没有任何效果，直接<code>cd ..</code>并不会进入文件夹名为<code>..</code>的文件夹中，而是返回上一级</p></blockquote><h2 id="文件操作类" tabindex="-1"><a class="header-anchor" href="#文件操作类" aria-hidden="true">#</a> 文件操作类</h2><h2 id="mkdir" tabindex="-1"><a class="header-anchor" href="#mkdir" aria-hidden="true">#</a> mkdir</h2><p>该指令用于创建目录</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> 选项 文件夹绝对路径或者相对路径\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>常用选项</p><p><code>-p</code> ：创建多级目录</p></blockquote><ul><li><p>创建/home/dog目录</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> /home/dog\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果我们当前就在home目录下，我们也可以直接<code>mkdir dog</code></p></li><li><p>创建多级目录<code>/home/tom/qsyyke</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> -p /home/tom/qsyyke\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>创建多级目录，一定要加上<code>-p</code>选项，否则会报错</p></li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> -m u+rwx,g+r,a+rw aa <span class="token comment"># 创建文件夹的时候，同时对此文件夹进行权限操作</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="rmdir" tabindex="-1"><a class="header-anchor" href="#rmdir" aria-hidden="true">#</a> rmdir</h2><p>指令删除<code>空目录</code>，此指令只能删除空目录</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">rmdir</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 要删除的空目录\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>如果要删除的目录下，还有其他目录，但是这些目录中，都没有内容，使用<code>rmdir 目录名</code>是不能删除的，<code>一定要保证该目录下，没有任何的东西，包括空目录</code></p></blockquote><ul><li><p>如果需要删除非空目录，需要使用</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">rm</span> -rf 要删除的目录\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><h2 id="touch" tabindex="-1"><a class="header-anchor" href="#touch" aria-hidden="true">#</a> touch</h2><p>touch 指令创建空文件</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">touch</span> 文件名称\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="cp" tabindex="-1"><a class="header-anchor" href="#cp" aria-hidden="true">#</a> cp</h2><p>cp 指令拷贝文件到指定目录</p>',18),t=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211217084746022.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),r=(0,n.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cp</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token builtin class-name">source</span> dest\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>常用选项</p><p><code>-r</code> ：递归复制整个文件夹</p></blockquote><ul><li><p>将<code>mu.java</code>拷贝到当前目录下的<code>java</code>文件夹内</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cp</span> ./mu.java java \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>递归复制整个文件夹，举例, 比如将 /home/bbb 整个目录， 拷贝到 /opt</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cp</span> -r /home/bbb /opt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>如果bbb目录中，还含有其他的目录或者文件的话，一定需要加上-r选项，否则会失败</code></p></li><li><p>强制覆盖不提示的方法</p><blockquote><p>如果我们将<code>aa</code>文件夹复制到<code>bb</code>文件夹中，但是bb文件夹中，已经存在aa文件夹，那么当我们复制的时候，就会提示我们是否需要覆盖，输入<code>y</code>就行，但是我们可以直接使用强制命令，直接复制</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">\\</span>cp -r aa bb\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><h2 id="rm" tabindex="-1"><a class="header-anchor" href="#rm" aria-hidden="true">#</a> rm</h2><p>rm 指令移除文件或目录</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">rm</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 要删除的文件或目录\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="mv" tabindex="-1"><a class="header-anchor" href="#mv" aria-hidden="true">#</a> mv</h2><p>移动文件与目录或重命名</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mv</span> 原文件或文件夹路径 新路径\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><p>将 /home/cat.txt 文件 重新命名为 pig.txt</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mv</span> /home/cat.txt ./pig.txt \n<span class="token comment"># or</span>\n<span class="token function">mv</span> /home/cat.txt pig.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>将 /home/pig.txt 文件 移动到 /root 目录下</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mv</span> /home/pig.txt /root\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>移动整个目录 , 比如将 /opt/bbb 移动到 /home 下 mv /opt/bbb /home/</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mv</span> /opt/bbb /home/bbb/home/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>如果我们把一个文件<code>a.txt</code>或者文件夹<code>au</code>移动到bbb,此bbb目录并没有存在，那么<code>mv au bbb</code>是可以成功的，但是我们如果移动到<code>bbb/ccc</code>，<code>mv au bbb/ccc</code>会出错，多级目录中，只能有一个目录是未存在的，其会自动创建</p></div><h2 id="cat" tabindex="-1"><a class="header-anchor" href="#cat" aria-hidden="true">#</a> cat</h2><p>cat 查看文件内容</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 要查看的文件\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>常用选项</p><p><code>-n</code> ：显示行号</p></blockquote>',15),d=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211218125048612.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),u=(0,n.uE)('<div class="custom-container tip"><p class="custom-container-title">使用细节</p><p><code>cat</code>只能浏览文件，而不能修改文件，为了浏览方便，一般会带上 管道命令 | more</p><p>cat -n /etc/profile | more [进行交互]</p></div><h2 id="more" tabindex="-1"><a class="header-anchor" href="#more" aria-hidden="true">#</a> more</h2><p>more 指令是一个基于 VI 编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more 指令中内置了若干快捷键(交互的指令)</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">more</span> 要查看的文件\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',4),b=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211218125415252.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),h=(0,n.uE)('<h2 id="less" tabindex="-1"><a class="header-anchor" href="#less" aria-hidden="true">#</a> less</h2><p><code>less</code>指令用来分屏查看文件内容，它的功能与 <code>more</code> 指令类似，但是比 more 指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">less</span> 要查看的文件\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',3),m=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211218125640259.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),g=(0,n.uE)('<h2 id="echo" tabindex="-1"><a class="header-anchor" href="#echo" aria-hidden="true">#</a> echo</h2><p>echo 输出内容到控制台</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>输出内容<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><p>使用 echo 指令输出环境变量, 比如输出 $PATH $HOSTNAME</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span>\n<span class="token builtin class-name">echo</span> <span class="token environment constant">$HOSTNAME</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>输出hello字符串</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> hello\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><h2 id="head" tabindex="-1"><a class="header-anchor" href="#head" aria-hidden="true">#</a> head</h2><p>head 用于显示文件的开头部分内容，默认情况下 head 指令显示文件的前 10 行内容</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">head</span> 文件\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><p>查看文件的前5行</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">head</span> -n <span class="token number">5</span> config.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>这里一定要加上<code>-n</code>，否则会失败</p></blockquote></li></ul><h2 id="tail" tabindex="-1"><a class="header-anchor" href="#tail" aria-hidden="true">#</a> tail</h2><p>tail 用于输出文件中尾部的内容，默认情况下 tail 指令显示文件的前 10 行内容</p><ul><li><p>tail 文件(功能描述：查看文件尾 10 行内容）</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">tail</span> config.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p><code>tail -n 5 config.js</code>查看文件的末尾5行内容，<code>-n</code>是必须的</p></li><li><p><code>tail -f 文件 </code></p><blockquote><p>监听文件的改变，如果监听了某个文件，那么当我们使用另一个用户向该文件中添加内容的时候，我们可以在控制台实时看到内容的改变</p></blockquote></li></ul><h2 id="指令和-指令" tabindex="-1"><a class="header-anchor" href="#指令和-指令" aria-hidden="true">#</a> &gt; 指令和 &gt;&gt; 指令</h2><p>&gt; 输出重定向和 &gt;&gt; 追加</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>简单的来说，就是<code>&gt;</code>会替换原来文件中的内容，但是<code>&gt;&gt;</code>是追加</p></div><ul><li><p><code>ls -l &gt; a.txt </code>(功能描述：列表的内容写入文件 a.txt 中（覆盖写）</p></li><li><p><code>ls -al &gt;&gt; a.txt</code> （功能描述：列表的内容追加到文件 a.txt 的末尾）</p></li><li><p><code>cat 文件 1 &gt; 文件 2 </code>（功能描述：将文件 1 的内容覆盖到文件 2）</p></li><li><p><code>echo &quot;内容&quot;&gt;&gt; 文件</code> (追加)</p></li></ul><h2 id="ln" tabindex="-1"><a class="header-anchor" href="#ln" aria-hidden="true">#</a> ln</h2><p>软链接也称为符号链接，类似于 windows 里的快捷方式，主要存放了链接其他文件的路径</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ln</span> -s <span class="token punctuation">[</span>原文件或目录<span class="token punctuation">]</span> <span class="token punctuation">[</span>软链接名<span class="token punctuation">]</span> <span class="token comment">#（功能描述：给原文件创建一个软链接）</span>\n<span class="token comment"># or</span>\n<span class="token function">ln</span> <span class="token punctuation">[</span>原文件或目录<span class="token punctuation">]</span> <span class="token punctuation">[</span>软链接名<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>如果我们需要删除某个软连接，还是使用<code>rm</code>进行删除，<code>rmdir</code>只能用于目录</p></blockquote><p>当我们使用<code>ln</code>指令为某一个文件或者文件夹创建一个软连接之后，可以通过后面的信息查看此软连接的指向文件或者文件夹</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ln</span> -s f.java fjava\n\nlrwxrwxrwx.  <span class="token number">1</span> root root           <span class="token number">6</span> <span class="token number">12</span>月 <span class="token number">20</span> 09:56 fjava -<span class="token operator">&gt;</span> f.java\n-rw-r--r--.  <span class="token number">2</span> root root          <span class="token number">60</span> <span class="token number">12</span>月 <span class="token number">18</span> <span class="token number">13</span>:25 f.java\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>lrwxrwxrwx. 1 root root 6 12月 20 09:56 fjava <code>-&gt;</code> f.java</p><p><code>-&gt;</code>表示fjava这个软连接指向<code>f.java</code>这个文件夹</p></blockquote><p>查看官方的服务</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@qsyyke etc<span class="token punctuation">]</span><span class="token comment"># ls -al | grep init.d</span>\nlrwxrwxrwx.   <span class="token number">1</span> root root       <span class="token number">11</span> <span class="token number">12</span>月 <span class="token number">16</span> <span class="token number">15</span>:21 init.d -<span class="token operator">&gt;</span> rc.d/init.d\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>可以看到此<code>init.d</code>这个软连接指向的是<code>./rc.d/init.d</code>这个文件夹，那么我们可以直接<code>cd ./init.d</code>就可以进入<code>./rc.d/init.d</code>这个目录中</p></blockquote><h2 id="history" tabindex="-1"><a class="header-anchor" href="#history" aria-hidden="true">#</a> history</h2><p>查看已经执行过历史命令,也可以执行历史指令</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">history</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',28),v=(0,n._)("ul",null,[(0,n._)("li",null,[(0,n._)("p",null,"显示最近使用过的 10 个指令。"),(0,n._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,n._)("pre",{class:"language-bash"},[(0,n._)("code",null,[(0,n._)("span",{class:"token function"},"history"),(0,n.Uk)(),(0,n._)("span",{class:"token number"},"10"),(0,n.Uk)("\n")])]),(0,n._)("div",{class:"line-numbers"},[(0,n._)("span",{class:"line-number"},"1"),(0,n._)("br")])])]),(0,n._)("li",null,[(0,n._)("p",null,"执行历史编号为 1 的指令"),(0,n._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,n._)("pre",{class:"language-bash"},[(0,n._)("code",null,[(0,n._)("span",{class:"token operator"},"!"),(0,n._)("span",{class:"token number"},"1"),(0,n.Uk)("\n")])]),(0,n._)("div",{class:"line-numbers"},[(0,n._)("span",{class:"line-number"},"1"),(0,n._)("br")])]),(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211218133333224.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211218133352664.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,n._)("blockquote",null,[(0,n._)("p",null,[(0,n._)("code",null,"所以我们直接执行 !历史编号 那么，就相当于直接执行历史编号为1的那一条指令")])])])],-1),k=(0,n._)("h2",{id:"日期类",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#日期类","aria-hidden":"true"},"#"),(0,n.Uk)(" 日期类")],-1),x=(0,n._)("h3",{id:"date显示时间",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#date显示时间","aria-hidden":"true"},"#"),(0,n.Uk)(" date显示时间")],-1),f=(0,n._)("ul",null,[(0,n._)("li",null,[(0,n._)("p",null,[(0,n._)("code",null,"date"),(0,n.Uk)(" （功能描述：显示当前时间）")])]),(0,n._)("li",null,[(0,n._)("p",null,[(0,n._)("code",null,"date +%Y"),(0,n.Uk)("（功能描述：显示当前年份）")])]),(0,n._)("li",null,[(0,n._)("p",null,[(0,n._)("code",null,"date +%m"),(0,n.Uk)("（功能描述：显示当前月份）")])]),(0,n._)("li",null,[(0,n._)("p",null,[(0,n._)("code",null,"date +%d"),(0,n.Uk)(" （功能描述：显示当前是哪一天）")])]),(0,n._)("li",null,[(0,n._)("p",null,[(0,n._)("code",null,'date "+%Y-%m-%d %H:%M:%S"'),(0,n.Uk)("（功能描述：显示年月日时分秒）")]),(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211218133803624.png?x-oss-process=style/pictureProcess1",data:"aurora"})])])],-1),y=(0,n.uE)('<p>我们也可以使用下面这种方式进行查看</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@qsyyke ~<span class="token punctuation">]</span><span class="token comment"># date +%Y</span>\n<span class="token number">2022</span>\n<span class="token punctuation">[</span>root@qsyyke ~<span class="token punctuation">]</span><span class="token comment"># date +%m</span>\n01\n<span class="token punctuation">[</span>root@qsyyke ~<span class="token punctuation">]</span><span class="token comment"># date +%d</span>\n03\n<span class="token punctuation">[</span>root@qsyyke ~<span class="token punctuation">]</span><span class="token comment"># date +%D</span>\n01/03/22\n<span class="token punctuation">[</span>root@qsyyke ~<span class="token punctuation">]</span><span class="token comment"># date +%Y/%m/%d</span>\n<span class="token number">2022</span>/01/03\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="date设置时间" tabindex="-1"><a class="header-anchor" href="#date设置时间" aria-hidden="true">#</a> date设置时间</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">date</span> -s 字符串时间\n\n<span class="token comment"># date -s &quot;2020-11-03 20:02:10&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',4),_=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211218134015722.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),q=(0,n.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>设置时间，可以没有时分秒，但是必须要保证年月日，不能像<code>date -s &quot;2021&quot;</code>，这种虽然不会报错，但是也不会把时间设置成功</p></div><h3 id="cal" tabindex="-1"><a class="header-anchor" href="#cal" aria-hidden="true">#</a> cal</h3><p>查看日历指令 cal</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cal</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token comment">#默认显示的是本月的日历</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><p>显示 2020 年日历</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cal</span> <span class="token number">2020</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul>',5),z=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211218134320712.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),j=(0,n.uE)('<h2 id="搜索类指令" tabindex="-1"><a class="header-anchor" href="#搜索类指令" aria-hidden="true">#</a> 搜索类指令</h2><h3 id="find" tabindex="-1"><a class="header-anchor" href="#find" aria-hidden="true">#</a> find</h3><p>find 指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">find</span> <span class="token punctuation">[</span>搜索范围<span class="token punctuation">]</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',4),w=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211218135726307.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),P=(0,n.uE)('<ul><li><p>遍历根目录</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">find</span> /\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>查找a.java</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">find</span> / -name a.java\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>查找所有的.java</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">find</span> /files -name *.java\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>根据用户创建的名字</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">find</span> /files -user qsyyke <span class="token comment"># root</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>按照大小,大于1M的</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">find</span> /files -size +1M\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>在使用<code>find [/] -size</code>指令的时候，其中<code>-</code>表示小于,<code>+</code>表示大于多少，等于不需要额外的修饰，</p><ul><li><code>-1M</code>小于1M的文件</li><li><code>+1M</code> 大于1M的文件</li><li><code>1M</code> 等于1M的文件</li></ul></div><h3 id="locate" tabindex="-1"><a class="header-anchor" href="#locate" aria-hidden="true">#</a> locate</h3><p>locate 指令可以快速定位文件路径。locate 指令利用事先建立的系统中所有文件名称及路径的 locate 数据库实现快速定位给定的文件。Locate 指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新 locate 时刻</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">locate</span> 搜索文件\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>由于 locate 指令基于数据库进行查询，所以第一次运行前，必须使用<code>updatedb</code>指令创建 locate 数据库</p></div><h3 id="which" tabindex="-1"><a class="header-anchor" href="#which" aria-hidden="true">#</a> which</h3><p>which 指令，可以查看某个指令在哪个目录下，比如 ls 指令在哪个目录</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">which</span> <span class="token function">ls</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@qsyyke /<span class="token punctuation">]</span><span class="token comment"># which ls</span>\n<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ls</span><span class="token operator">=</span><span class="token string">&#39;ls --color=auto&#39;</span>\n\t/usr/bin/ls\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="grep-指令和-管道符号" tabindex="-1"><a class="header-anchor" href="#grep-指令和-管道符号" aria-hidden="true">#</a> <strong>grep</strong> 指令和 管道符号 <strong>|</strong></h2><p><code>grep</code>过滤查找,管道符，<code>|</code>，表示将前一个命令的处理结果输出传递给后面的命令处理。</p>',12),E=(0,n._)("div",{class:"custom-container warning"},[(0,n._)("p",{class:"custom-container-title"},"WARNING"),(0,n._)("p",null,[(0,n._)("code",null,"grep"),(0,n.Uk)("和"),(0,n._)("code",null,"|"),(0,n.Uk)("他们是两个不同的指令，但是我们可以单独使用"),(0,n._)("code",null,"grep"),(0,n.Uk)("，如"),(0,n._)("code",null,"grep he a.txt"),(0,n.Uk)("，但是不能单独使用"),(0,n._)("code",null,"|"),(0,n.Uk)("，"),(0,n._)("code",null,"|"),(0,n.Uk)("必须和其他的指令一个使用")]),(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211218141733164.png?x-oss-process=style/pictureProcess1",data:"aurora"})])],-1),S=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211218141115574.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),U=(0,n.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">grep</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 查找内容 源文件\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),M=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211218141357239.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),A=(0,n.uE)('<ul><li><p>请在 hello.txt 文件中，查找 &quot;yes&quot; 所在行，并且显示行号</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">grep</span> <span class="token function">yes</span> -n hello.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>使用cat指令查看hello.txt文件，并查找yes字符</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cat</span> /home/hello.txt <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;yes&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>如果只是单纯的过滤的话，也可以使用</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">grep</span> -n <span class="token string">&quot;yes&quot;</span> /home/hello.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote></li></ul>',1),N={},I=(0,a(83744).Z)(N,[["render",function(s,e){return(0,n.wg)(),(0,n.iD)(n.HY,null,[l,c,i,o,p,t,r,d,u,b,h,m,g,v,k,x,f,y,_,q,z,j,w,P,E,S,U,M,A],64)}]])}}]);