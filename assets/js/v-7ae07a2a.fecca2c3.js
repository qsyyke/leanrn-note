"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5217],{67666:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-7ae07a2a",path:"/dubbo/",title:"软件架构模式",lang:"en-US",frontmatter:{tag:["java","dubbo","框架"],categories:["框架"],stick:!1,date:"2019/3/2"},excerpt:"",headers:[{level:2,title:"单一应用架构",slug:"单一应用架构",children:[]},{level:2,title:"分布式服务架构",slug:"分布式服务架构",children:[]},{level:2,title:"分布式系统",slug:"分布式系统",children:[]},{level:2,title:"RPC",slug:"rpc",children:[{level:3,title:"RPC调用过程",slug:"rpc调用过程",children:[]}]},{level:2,title:"特性",slug:"特性",children:[]},{level:2,title:"基本架构",slug:"基本架构",children:[]},{level:2,title:"dubbo 支持的协议",slug:"dubbo-支持的协议",children:[]},{level:2,title:"使用步骤",slug:"使用步骤",children:[]},{level:2,title:"服务提供者",slug:"服务提供者",children:[{level:3,title:"依赖",slug:"依赖",children:[]},{level:3,title:"配置文件编写",slug:"配置文件编写",children:[]}]},{level:2,title:"服务消费者",slug:"服务消费者",children:[{level:3,title:"配置文件",slug:"配置文件",children:[]}]},{level:2,title:"测试",slug:"测试",children:[{level:3,title:"理解",slug:"理解",children:[]}]},{level:2,title:"代码",slug:"代码",children:[]},{level:2,title:"修改配置",slug:"修改配置",children:[]},{level:2,title:"运行",slug:"运行",children:[]},{level:2,title:"修改配置信息",slug:"修改配置信息",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},22645:(n,s,a)=>{a.r(s),a.d(s,{default:()=>N});var e=a(66252);const p=(0,e._)("h1",{id:"软件架构模式",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#软件架构模式","aria-hidden":"true"},"#"),(0,e.Uk)(" 软件架构模式")],-1),t=(0,e._)("h2",{id:"单一应用架构",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#单一应用架构","aria-hidden":"true"},"#"),(0,e.Uk)(),(0,e._)("strong",null,"单一应用架构")],-1),o=(0,e._)("p",null,"当网站流量很小时，应用规模小时，只需一个应用，将所有功能都部署在一起，以减少部署服务器数量和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。数据库的处理时间影响应用的性能",-1),c=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210602082412105.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),l=(0,e.uE)('<p>这种结构的应用适合小型系统，小型网站，或者企业的内部系统，用户较少，请求量不大，对请求的处理时间没有太高的要求。 将所有功能都部署到一个服务器，简单易用。开发项目的难度低。</p><blockquote><p>缺点：</p><p>1、性能扩展比较困难</p><p>2、不利于多人同时开发</p><p>3、不利于升级维护</p><p>4、整个系统的空间占用比较大</p></blockquote><p><code>所有的功能模块都是在一个程序中</code></p><h2 id="分布式服务架构" tabindex="-1"><a class="header-anchor" href="#分布式服务架构" aria-hidden="true">#</a> <strong>分布式服务架构</strong></h2><p>当应用越来越多。应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的**分布式服务框架****(RPC)**是关键。分布式系统将服务作为独立的应用，实现服务共享和重用。</p>',5),r=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210602082606893.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),u=(0,e.uE)('<h2 id="分布式系统" tabindex="-1"><a class="header-anchor" href="#分布式系统" aria-hidden="true">#</a> 分布式系统</h2><p>分布式系统是若干独立计算机（服务器）的集合，这些计算机对于用户来说就像单个相关系统，分布式系统（distributed system）是建立在网络之上的服务器端一种结构。</p><p>分布式系统中的计算机可以使用不同的操作系统，可以运行不同应用程序提供服务，将服务分散部署到多个计算机服务器上。</p><h2 id="rpc" tabindex="-1"><a class="header-anchor" href="#rpc" aria-hidden="true">#</a> RPC</h2><p>RPC 【Remote Procedure Call】是指远程过程调用，是一种进程间通信方式，是一种技术思想，而不是规范。它允许程序调用另一个地址空间（网络的另一台机器上）的过程或函数，而不用开发人员显式编码这个调用的细节。调用本地方法和调用远程方法一样。</p><p>RPC 的实现方式可以不同。例如 java 的 rmi, spring 远程调用等。</p><p>RPC 概念是在上世纪 80 年代由 Brue Jay Nelson(布鲁·杰伊·纳尔逊)提出。使用 PRC 可以将本地的调用扩展到远程调用（分布式系统的其他服务器）。</p><p>RPC 的特点</p><blockquote><ol><li><p>简单：使用简单，建立分布式应用更容易。</p></li><li><p>高效：调用过程看起来十分清晰，效率高。</p></li><li><p>通用：进程间通讯的方式，有通用的规则。</p></li></ol></blockquote>',9),i=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210602082755882.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),k=(0,e.uE)('<h3 id="rpc调用过程" tabindex="-1"><a class="header-anchor" href="#rpc调用过程" aria-hidden="true">#</a> RPC调用过程</h3><p>1.调用方 client 要使用右侧 server 的功能（方法），发起对方法的调用</p><p>2.client stub 是 PRC 中定义的存根，看做是 client 的助手。stub 把要调用的方法参数进行序列化，方法名称和其他数据包装起来。</p><p>3.通过网络 socket(网络通信的技术)，把方法调用的细节内容发送给右侧的 server</p><p>4.server 端通过 socket 接收请求的方法名称，参数等数据，传给 stub。</p><p>5.server 端接到的数据由 serverstub(server 的助手)处理，调用 server 的真正方法，处理业务</p><p>6.server 方法处理完业务，把处理的结果对象（Object）交给了助手，助手把 Object 进行序</p><p>列化，对象转为二进制数据。</p><p>7.server 助手二进制数据交给网络处理程序</p><p>8.通过网络将二进制数据，发送给 client。</p><p>9.client 接数据，交给 client 助手。</p><p>10.client 助手，接收数据通过反序列化为 java 对象（Object），作为远程方法调用结果。</p><blockquote><p>rpc 通讯是基于 tcp 或 udp 议</p><p>序列化方式（xml/json/二进制）</p><p>所以只需要他们之间，能够建立连接，就可以进行通信</p></blockquote><h1 id="dubbo" tabindex="-1"><a class="header-anchor" href="#dubbo" aria-hidden="true">#</a> dubbo</h1><p>Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源 Java RPC 框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><p>Dubbo 是一个分布式服务框架，致力于提供高性能和透明化的 <strong>RPC</strong> 远程服务调用方案、服务治理方案。</p><p>**官网：**http://dubbo.apache.org/zh-cn/</p><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性</h2>',18),b=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210602083023932.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),d=(0,e._)("p",null,"面向接口代理：调用接口的方法，在 A 服务器调用 B 服务器的方法，由 dubbo 实现对B的调用，无需关心实现的细节，就像 MyBatis 访问 Dao 的接口，可以操作数据库一样。不用关心Dao接口方法的实现。这样开发是方便，舒服的。",-1),m=(0,e._)("p",null,[(0,e._)("code",null,"dubbo是和spring进行无缝对接的，所以在dubbo中，使用的到的容器对象，就是spring中的容器对象")],-1),g=(0,e._)("h2",{id:"基本架构",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#基本架构","aria-hidden":"true"},"#"),(0,e.Uk)(" 基本架构")],-1),v=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210602083208139.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),h=(0,e.uE)('<blockquote><p>过程理解</p><p>Container是一个容器对象，这个容器就是spring中的容器，所以dubbo是和spring无缝对接的，</p><p>第一步：将容器<code>Container</code>交给提供者，这个提供者可以理解为一个外卖公司，容器理解为外卖公司平太上的每一个店家</p><p>第二步：服务提供者将容器注册到注册中心(外卖公司，将每一个店家发布的每一个菜品发布到平台，在详情中，展示给用户查看)</p><p>第三步：<code>Consumer</code>服务消费方（点外卖的人）到注册中心进行订阅(<code>subscribe</code>)，相当于用户点外卖，订阅成功之后，注册中心会返回一个<code>notify</code>订阅地址（相当于用户点餐成功之后的订单详情）</p><p>第四步：使用刚刚订阅的这个对象(<code>invoke</code>)</p><p><code>Monitor</code>是一个监控中心，我们的每一次操作，都能够被监测到</p></blockquote><p><strong>服务提供者（Provider）</strong>：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p><p>**服务消费者（**Consumer）: 调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p>**注册中心（**Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</p><p><strong>监控中心（Monitor）</strong>：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p><ul><li><strong>调用关系说明</strong>:</li></ul><p>⚫ 服务容器负责启动，加载，运行服务提供者。</p><p>⚫ 服务提供者在启动时，向注册中心注册自己提供的服务。</p><p>⚫ 服务消费者在启动时，向注册中心订阅自己所需的服务。</p><p>⚫ 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</p><p>⚫ 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p>⚫ 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p><h2 id="dubbo-支持的协议" tabindex="-1"><a class="header-anchor" href="#dubbo-支持的协议" aria-hidden="true">#</a> <strong>dubbo</strong> <strong>支持的协议</strong></h2><p>支持多种协议：dubbo , hessian , rmi , http, webservice , thrift , memcached , redis。</p><p>dubbo 官方推荐使用 dubbo 协议。dubbo 协议默认端口 20880</p><p>使用 dubbo 协议，spring 配置文件加入：</p><p><code>&lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt;</code></p><p>这个就是在<code>invoke</code>调用服务的时候使用的协议</p><p>其实也可以没有注册中心，那么最后的架构就是下面的这个形式了</p>',19),y=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210602085110291.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),q=(0,e.uE)('<p>服务消费者直接可以调用服务提供者中的服务，就可以了</p><h1 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h1><h2 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤</h2><p>以直连方式进行作为例子</p><ol><li>创建一个服务提供者 <ul><li>新建maven工程</li><li>导入spring依赖，dubbo依赖</li><li>新建dubbo.xml配置文件，并且设置相关配置</li><li>编写</li></ul></li><li>创建服务消费者 <ul><li>新建maven工程</li><li>导入依赖，spring，dubbo</li><li>新建dubbo配置文件，spring文件</li><li>配置<code>web.xml</code>文件</li><li>编写</li></ul></li></ol><h2 id="服务提供者" tabindex="-1"><a class="header-anchor" href="#服务提供者" aria-hidden="true">#</a> 服务提供者</h2><p>服务提供者，就是提供服务的程序，这里，需要我们将编写的服务提供者打包成jar包形式，并且安装到本地仓库中，然后在maven中，导入刚刚安装的这个依赖</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//user</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> toString <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;User{&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;id=&quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot;, name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span> <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Integer</span> getId <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> setId <span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> getName <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> setName <span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> getAge <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> setAge <span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">//interface</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserSer</span> <span class="token punctuation">{</span>\n    <span class="token class-name">User</span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//impl</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserSerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserSer</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">User</span> selectById <span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;chuchen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> user<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div><p>将程序打包成jar包，并且安装到本地仓库，使用maven的<code>install</code>命令，将此jar安装到本地仓库使用</p><h3 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> 依赖</h3><ul><li><p>spring相关</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\n    &lt;version&gt;5.3.6&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n    &lt;version&gt;5.3.5&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p>dubbo</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="配置文件编写" tabindex="-1"><a class="header-anchor" href="#配置文件编写" aria-hidden="true">#</a> 配置文件编写</h3><p>dubbo的配置文件，可以依照官方的进行编写</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!--服务提供者声明名称:必须保证服务名称的唯一性,它的名称是dubbo内部使用的唯一标识--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myDubbo<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">&lt;!--访问服务协议的名称及端口号,dubbo官方推荐使用的是dubbo协议,端口号默认为20880--&gt;</span>\n<span class="token comment">&lt;!--\n        name:指定协议的名称\n        port:指定协议的端口号(默认为20880)\n    --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dubbo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20881<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">&lt;!--\n        暴露服务接口-&gt;dubbo:service\n        interface:暴露服务接口的全限定类名\n        ref:接口引用的实现类在spring容器中的标识\n        registry:如果不使用注册中心,则值为:N/A\n    --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dobbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vin.cco.service.UserSer<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">registry</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>N/A<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vin.cco.service.impl.UserSerImpl<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><code>&lt;dubbo:application name=&quot;myDubbo&quot; /&gt;</code>这个是声明服务提供者的名字，必须要，并且需要唯一</p><p><code>&lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20881&quot; /&gt;</code>设置提供者的协议和端口信息，因为服务消费者需要和服务提供者进行连接通信，就需要连接，<code>name</code>就是协议名称，此值必须要是dubbo提供的协议，不能写错，如果写成<code>dobbo</code>，就会报错</p><p><code>&lt;dobbo:service interface=&quot;vin.cco.service.UserSer&quot; ref=&quot;userService&quot; registry=&quot;N/A&quot; /&gt;</code>因为服务消费者需要使用服务提供者中的对象，所以就需要让提供者暴露出来(<code>接口</code>)，<code>interface</code>值就是暴露出来的类，使用全限定名称，因为接口不能创建对象，所以就必须引用其实现类创建的对象，<code>ref</code>就是引用其实现类对象</p><p><code>registry</code>设置是狗使用注册中心，如果不需要使用注册中心，那么此值就是<code>registry=&quot;N/A&quot;</code></p><blockquote><p>当我们<code>&lt;dobbo:service interface=&quot;vin.cco.service.UserSer&quot; ref=&quot;userService&quot; registry=&quot;N/A&quot; /&gt;</code>后，那么这个对象，那么如果服务消费者和服务提供者连接成功之后，服务消费者就可以拿到这个对象</p></blockquote></li></ul><h2 id="服务消费者" tabindex="-1"><a class="header-anchor" href="#服务消费者" aria-hidden="true">#</a> 服务消费者</h2><p>依赖和服务提供者的是一样的</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>   \n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">UserSer</span> userService<span class="token punctuation">;</span>\n    <span class="token comment">//使用服务提供者中的&lt;dobbo:service interface=&quot;vin.cco.service.UserSer&quot; ref=&quot;userService&quot; registry=&quot;N/A&quot; /&gt;对象，通过bytype进行传值</span>\n\n    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">doUser</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">,</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;show.jsp&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h3><p>spring的就不用多说了</p><ul><li>dubbo</li></ul><p>因为这是服务消费者，所以就需要和服务提供者进行连接通信</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;!--声明消费者名称--&gt;\n&lt;dubbo:application name=&quot;dubboConsumer&quot; /&gt;\n\n&lt;!--\n        引用远程服务接口:\n        id:远程服务接口对象名称\n        interface:调用远程接口的全限定类名\n        url:访问服务接口的地址\n        registry:不使用注册中心,值为:N/A\n    --&gt;\n&lt;dobbu:reference id=&quot;userSer&quot;\n                 interface=&quot;vin.cco.service.UserSer&quot;\n                 url=&quot;dubbo://localhost:20881&quot; registry=&quot;N/A&quot;\n                 /&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><code>&lt;dubbo:application name=&quot;dubboConsumer&quot; /&gt;</code>定义服务消费者名字</p><p>因为在服务提供者中，<code>&lt;dobbo:service interface=&quot;vin.cco.service.UserSer&quot; ref=&quot;userService&quot; registry=&quot;N/A&quot; /&gt;</code>就已经暴露了此对象，所以我们在服务消费者中，就可以使用这个暴露的对象，<code>id</code>就是远程接口对象的名称</p><p><code>interface</code>就是调用远程接口的全限定类名，需要先导入服务提供者的jar包</p><p><code>url</code>进行连接的信息</p><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><p>现在当我们连接成功，访问</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>那么我们使用的对象就是远程服务提供者暴露出来的对象</p><p>在调用的时候，控制台会打印下面消息，可以证明连接成功</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>jcl<span class="token punctuation">.</span></span>JclLogger</span><span class="token punctuation">.</span>info  <span class="token punctuation">[</span>DUBBO<span class="token punctuation">]</span> <span class="token class-name">Successed</span> connect <span class="token keyword">to</span> <span class="token namespace">server</span> <span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.43</span><span class="token number">.84</span><span class="token operator">:</span><span class="token number">20881</span> from <span class="token class-name">NettyClient</span> <span class="token number">192.168</span><span class="token number">.43</span><span class="token number">.84</span> using dubbo version <span class="token number">2.6</span><span class="token number">.2</span><span class="token punctuation">,</span> channel is <span class="token class-name">NettyChannel</span> <span class="token punctuation">[</span>channel<span class="token operator">=</span><span class="token punctuation">[</span>id<span class="token operator">:</span> <span class="token number">0x0292bdc0</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.43</span><span class="token number">.84</span><span class="token operator">:</span><span class="token number">65253</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.43</span><span class="token number">.84</span><span class="token operator">:</span><span class="token number">20881</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dubbo version<span class="token operator">:</span> <span class="token number">2.6</span><span class="token number">.2</span><span class="token punctuation">,</span> current host<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.43</span><span class="token number">.84</span>\n    \n<span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>jcl<span class="token punctuation">.</span></span>JclLogger</span><span class="token punctuation">.</span>info  <span class="token punctuation">[</span>DUBBO<span class="token punctuation">]</span> <span class="token class-name">Start</span> <span class="token class-name">NettyClient</span> DESKTOP<span class="token operator">-</span>JD7N6TI<span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.43</span><span class="token number">.84</span> connect <span class="token keyword">to</span> <span class="token namespace">the</span> server <span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.43</span><span class="token number">.84</span><span class="token operator">:</span><span class="token number">20881</span><span class="token punctuation">,</span> dubbo version<span class="token operator">:</span> <span class="token number">2.6</span><span class="token number">.2</span><span class="token punctuation">,</span> current host<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.43</span><span class="token number">.84</span>\n\n<span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>jcl<span class="token punctuation">.</span></span>JclLogger</span><span class="token punctuation">.</span>info  <span class="token punctuation">[</span>DUBBO<span class="token punctuation">]</span> <span class="token class-name">Refer</span> dubbo service <span class="token class-name"><span class="token namespace">vin<span class="token punctuation">.</span>cco<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>UserSer</span> from url dubbo<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">20881</span><span class="token operator">/</span><span class="token class-name"><span class="token namespace">vin<span class="token punctuation">.</span>cco<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>UserSer</span><span class="token operator">?</span>application<span class="token operator">=</span>dubboConsumer<span class="token operator">&amp;</span>dubbo<span class="token operator">=</span><span class="token number">2.6</span><span class="token number">.2</span><span class="token operator">&amp;</span><span class="token keyword">interface</span><span class="token operator">=</span><span class="token class-name"><span class="token namespace">vin<span class="token punctuation">.</span>cco<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>UserSer</span><span class="token operator">&amp;</span>methods<span class="token operator">=</span>selectById<span class="token operator">&amp;</span>pid<span class="token operator">=</span><span class="token number">11752</span><span class="token operator">&amp;</span>register<span class="token punctuation">.</span>ip<span class="token operator">=</span><span class="token number">192.168</span><span class="token number">.43</span><span class="token number">.84</span><span class="token operator">&amp;</span>revision<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">-</span>SNAPSHOT<span class="token operator">&amp;</span>side<span class="token operator">=</span>consumer<span class="token operator">&amp;</span>timestamp<span class="token operator">=</span><span class="token number">1622619860088</span><span class="token punctuation">,</span> dubbo version<span class="token operator">:</span> <span class="token number">2.6</span><span class="token number">.2</span><span class="token punctuation">,</span> current host<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.43</span><span class="token number">.84</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果断开服务提供者，请求<code>user</code>，因为服务提供者已经断开了，所以他们之间的连接已经断开，服务消费者就不能得到服务提供者暴露出来的对象</p><p>报错信息</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>jcl<span class="token punctuation">.</span></span>JclLogger</span><span class="token punctuation">.</span>warn  <span class="token punctuation">[</span>DUBBO<span class="token punctuation">]</span> client reconnect <span class="token keyword">to</span> <span class="token namespace">localhost</span><span class="token operator">:</span><span class="token number">20881</span> find error <span class="token punctuation">.</span> url<span class="token operator">:</span> dubbo<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">20881</span><span class="token operator">/</span><span class="token class-name"><span class="token namespace">vin<span class="token punctuation">.</span>cco<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>UserSer</span><span class="token operator">?</span>application<span class="token operator">=</span>dubboConsumer<span class="token operator">&amp;</span>codec<span class="token operator">=</span>dubbo<span class="token operator">&amp;</span>dubbo<span class="token operator">=</span><span class="token number">2.6</span><span class="token number">.2</span><span class="token operator">&amp;</span>heartbeat<span class="token operator">=</span><span class="token number">60000</span><span class="token operator">&amp;</span><span class="token keyword">interface</span><span class="token operator">=</span><span class="token class-name"><span class="token namespace">vin<span class="token punctuation">.</span>cco<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>UserSer</span><span class="token operator">&amp;</span>methods<span class="token operator">=</span>selectById<span class="token operator">&amp;</span>pid<span class="token operator">=</span><span class="token number">11752</span><span class="token operator">&amp;</span>register<span class="token punctuation">.</span>ip<span class="token operator">=</span><span class="token number">192.168</span><span class="token number">.43</span><span class="token number">.84</span><span class="token operator">&amp;</span>revision<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">-</span>SNAPSHOT<span class="token operator">&amp;</span>side<span class="token operator">=</span>consumer<span class="token operator">&amp;</span>timestamp<span class="token operator">=</span><span class="token number">1622619860088</span><span class="token punctuation">,</span> dubbo version<span class="token operator">:</span> <span class="token number">2.6</span><span class="token number">.2</span><span class="token punctuation">,</span> current host<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.43</span><span class="token number">.84</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="理解" tabindex="-1"><a class="header-anchor" href="#理解" aria-hidden="true">#</a> 理解</h3>',33),f=(0,e._)("blockquote",null,[(0,e._)("p",null,"但是这个例子的话，我们能够想到，因为我们导入了服务提供者这个jar包，那么我们完全可以在服务消费者中，直接创建对象，这不是很简单么，但是如果这样的话，那么就没有dubbo什么事"),(0,e._)("p",null,"所以dubbo官方推荐，将服务提供者暴露出来的接口存放到一个信息的接口工程中(就只是一个java工程)"),(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210602192750111.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,e._)("p",null,"那么消费者就不能直接new提供者暴露的接口，只能通过连接进行使用")],-1),x=(0,e._)("h1",{id:"配置接口工程使用",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#配置接口工程使用","aria-hidden":"true"},"#"),(0,e.Uk)(" 配置接口工程使用")],-1),w=(0,e._)("ol",null,[(0,e._)("li",null,"创建接口工程（就是普通的java maven工程）"),(0,e._)("li",null,"创建服务提供者"),(0,e._)("li",null,"创建服务消费者")],-1),S=(0,e._)("p",null,"他们之间的关系就是下图展示的这样",-1),j=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210603213225329.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),U=(0,e.uE)('<p>如果不使用接口工程的话，那么服务消费这就可以直接进行<code>new</code>对象，这样就没有dubbo什么事了，所以就需要创建一个单独的接口工程，这个工程需要写service服务的接口，不用写实现，实现交给服务提供者去实现，并且在这个接口工程中，需要创建暴露的实体类，比如，需要暴露的实体类为<code>User</code>，那么创建这个类，就在接口工程中</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这个类是暴露出来的，也就是原先服务提供者暴露出来的那么，还需要有一个接口服务，这个服务用语暴露这个实体类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//service</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>\n    <span class="token class-name">User</span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>现在这个接口工程就已经完成了，只需要在服务提供者和消费者中，引入这个接口工程依赖</p><p>服务提供者实现这个接口service中的<code>UserService</code>接口，那么当他们之间连接成功之后，服务提供者就可以返回这个这个对象</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><blockquote><p>因为服务提供者和服务消费者需要使用到接口工程，所以可以将接口工程打包成jar，也可以直接在服务提供者和消费者的<code>pom</code>中，直接加上接口工程的依赖坐标，不用进行打包</p></blockquote><p>服务提供者</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>\n<span class="token comment">//UserService是接口工程中的接口</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">User</span> queryById <span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;chuchen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> user<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>依赖还是一样</p><p>服务消费者</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">/*@Qualifier(&quot;userSer&quot;)\n    @Autowired\n    private UserSer userSer;*/</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">UserSer</span> userService<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">doUser</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">,</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;show.jsp&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h1 id="安装zookeeper" tabindex="-1"><a class="header-anchor" href="#安装zookeeper" aria-hidden="true">#</a> 安装zookeeper</h1><p>因为我们如果要使用注册中心的话，就必须选择一个注册中心，官方推荐使用<code>zookeeper</code></p><p>这个是一个Apache的一个项目，下载地址为</p><p><code>https://downloads.apache.org/zookeeper/</code>，选择一个低版本的进行安装，因为高版本，可能会出现闪退的问题</p><h2 id="修改配置" tabindex="-1"><a class="header-anchor" href="#修改配置" aria-hidden="true">#</a> 修改配置</h2><p>进入到<code>conf</code>中，将<code>zoo_sample.cfg</code>文件复制一份，并将其改名为<code>zoo.cfg</code></p><p><code>dataDir</code>此值就是保存数据的文件夹，可以在此目录中，创建一个data文件夹，将data地址复制进去</p><p><code>clientPort</code>是zookeeper的端口号，模式是<code>2181</code></p><p>因为zookeeper连接的时候，默认使用的是<code>8080</code>端口，但是这个端口是tomcat的，所以就需要进行配置，<code>admin.servicePort=8888</code></p><h2 id="运行" tabindex="-1"><a class="header-anchor" href="#运行" aria-hidden="true">#</a> 运行</h2><p>进入<code>bin</code>，运行<code>zkServer.cmd</code>就可以了</p><p>如果出现闪退，那么就使用低版本就可以解决</p><p>在Linux中，运行</p><p>开始</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>./zkServer.sh start\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>结束</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>./zkServer.sh stop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h1 id="版本控制" tabindex="-1"><a class="header-anchor" href="#版本控制" aria-hidden="true">#</a> 版本控制</h1><p>一个服务，可以存在多个实现类</p><p>每个接口都应定义版本号，为后续不兼容升级提供可能。当一个接口有不同的实现，项目早期使用的一个实现类， 之后创建接口的新的实现类。区分不同的接口实现使用 version。特别是项目需要把早期接口的实现全部换位新的实现类，也需要使用 version.</p><p>可以用版本号从早期的接口实现过渡到新的接口实现，版本号不同的服务相互间不引用。</p><p>可以按照以下的步骤进行版本迁移：</p><blockquote><p>在低压力时间段，先升级一半提供者为新版本</p><p>再将所有消费者升级为新版本</p><p>然后将剩下的一半提供者升级为新版本</p></blockquote><p>对服务接口创建多个实现类</p>',37),z=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210604175518836.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),_=(0,e.uE)('<p>可以对其中的实现方法内容进行变动，以此进行区分</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;dubbo:service interface=&quot;vin.cco.service.UserService&quot; ref=&quot;userService&quot; version=&quot;1.0&quot; /&gt;\n&lt;dubbo:service interface=&quot;vin.cco.service.UserService&quot; ref=&quot;userServiceImpl2&quot; version=&quot;2.0&quot; /&gt;\n&lt;!--bean--&gt;\n&lt;bean id=&quot;userService&quot; class=&quot;vin.cco.service.UserServiceImpl&quot; /&gt;\n&lt;bean id=&quot;userServiceImpl2&quot; class=&quot;vin.cco.service.UserServiceImpl2&quot; /&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>使用<code>version</code>进行版本控制</p><p>但是需要注意</p><blockquote><p>如果服务提供者添加了<code>version</code>，那么服务消费者就必须加上版本号，而且此版本号在服务提供者中必须存在，否则就会出现bean不存在的情况</p><p>两个<code>dubbo:service</code>标签中，ref的值，必须不能相同</p></blockquote><ul><li>修改服务消费者</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;dubbo:reference id=&quot;userService&quot; interface=&quot;vin.cco.service.UserService&quot; version=&quot;1.0&quot; /&gt;\n&lt;dubbo:reference id=&quot;userService2&quot; interface=&quot;vin.cco.service.UserService&quot; version=&quot;2.0&quot; /&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>现在就可以了</p><h1 id="监控中心" tabindex="-1"><a class="header-anchor" href="#监控中心" aria-hidden="true">#</a> 监控中心</h1><p>这个监控中心，是dubbo官方已经写好的，不用我们去写，只需要在我们系统上，运行就可以，提供的是一个jar形式</p><p><code>dubbo-admin-0.0.1-SNAPSHOT.jar</code>就是监控中心程序的名称</p><p>在cmd中运行，<code>java -jar dubbo-admin-0.0.1-SNAPSHOT.jar</code>就可以，运行成功之后，在浏览器输入<code>localhost:7001</code>，账号密码默认都是<code>root</code></p><h2 id="修改配置信息" tabindex="-1"><a class="header-anchor" href="#修改配置信息" aria-hidden="true">#</a> 修改配置信息</h2>',13),P=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210604180255063.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),I=(0,e._)("p",null,"进入此jar中",-1),C=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210604180338493.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),B=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210604180357444.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),D=(0,e.uE)('<p>在此界面中，可以看到服务的名称，dubbo的版本号等等信息</p><h1 id="原理分析" tabindex="-1"><a class="header-anchor" href="#原理分析" aria-hidden="true">#</a> 原理分析</h1><p><code>BeanDefinitionParser.class</code>接口是spring用来解析<code>xml</code>配置文件标签的一个接口，其下有很多的实现类，<code>DubboBeanDefinitionParser</code>类也是其的一个实习类，这个类，用来解析dubbo配置文件中的标签，解析的方法是<code>parse()</code>，能够解析出，每一个标签，如<code>service,reference,application</code>等标签中的信息</p><p><code>DubboNamespaceHandler</code>类中的init()方法部分如下</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinitionParser</span><span class="token punctuation">(</span><span class="token string">&quot;application&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DubboBeanDefinitionParser</span><span class="token punctuation">(</span><span class="token class-name">ApplicationConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinitionParser</span><span class="token punctuation">(</span><span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DubboBeanDefinitionParser</span><span class="token punctuation">(</span><span class="token class-name">ModuleConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinitionParser</span><span class="token punctuation">(</span><span class="token string">&quot;registry&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DubboBeanDefinitionParser</span><span class="token punctuation">(</span><span class="token class-name">RegistryConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinitionParser</span><span class="token punctuation">(</span><span class="token string">&quot;monitor&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DubboBeanDefinitionParser</span><span class="token punctuation">(</span><span class="token class-name">MonitorConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>此方法能够将解析到的标签，封装成对应的组件，以供使用</p>',6),A={},N=(0,a(83744).Z)(A,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,t,o,c,l,r,u,i,k,b,d,m,g,v,h,y,q,f,x,w,S,j,U,z,_,P,I,C,B,D],64)}]])}}]);