"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7438],{4750:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-00e75c11",path:"/spring/springcloud/spring-cloud-stream.html",title:"spring cloud stream消息驱动",lang:"en-US",frontmatter:{date:"2022/2/18 12:28",title:"spring cloud stream消息驱动",tag:["spring","spring-cloud"]},excerpt:"",headers:[{level:2,title:"设置思想",slug:"设置思想",children:[{level:3,title:"绑定器",slug:"绑定器",children:[]}]},{level:2,title:"标准流程",slug:"标准流程",children:[]},{level:2,title:"常用注解",slug:"常用注解",children:[]},{level:2,title:"测试",slug:"测试",children:[]},{level:2,title:"消息生产模块",slug:"消息生产模块",children:[{level:3,title:"依赖",slug:"依赖",children:[]},{level:3,title:"配置项",slug:"配置项",children:[]},{level:3,title:"定义一个发送接口，并且实现该接口",slug:"定义一个发送接口-并且实现该接口",children:[]},{level:3,title:"controller",slug:"controller",children:[]},{level:3,title:"启动测试",slug:"启动测试",children:[]}]},{level:2,title:"消费者模块",slug:"消费者模块",children:[{level:3,title:"依赖",slug:"依赖-1",children:[]},{level:3,title:"配置项",slug:"配置项-1",children:[]},{level:3,title:"业务类",slug:"业务类",children:[]}]},{level:2,title:"消息重复消费和消息持久化",slug:"消息重复消费和消息持久化",children:[{level:3,title:"重复消费",slug:"重复消费",children:[]},{level:3,title:"持久化",slug:"持久化",children:[]}]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},30697:(n,s,a)=>{a.r(s),a.d(s,{default:()=>v});var p=a(66252);const t=(0,p.uE)("<p>我们在使用<code>spring-cloud-bus</code>的时候，会遇到一个问题，因为<code>bus</code>目前只支持<code>Kafka</code>和<code>rabbitmq</code>，但是如果我们的项目和其他的项目对接，这个和我们对接的项目使用了其他的消息中间件，那么这个时候，我们是不是还得去学一下这个消息中间件？</p><p>为了解决这个问题，我们可以使用<code>spring cloud stream</code>，这个是构建消息驱动微服务的框架，和我们使用的jdbc的原理差不多，我们使用的时候，不需要注重他底层的实现，只需要配置对应的消息中间件就行</p><p>应用程序通过<code>inputs</code>或<code> outputs</code>来与Spring Cloud Stream中binder对象交互。 通过我们配置来binding(绑定) ，而Spring Cloud Stream的binder对象负责与消息中间件交互。</p><p>所以，我们只需要搞清楚如何与spring Cloud Stream交互就可以方便使用消息驱动的方式。</p><p>Spring Cloud Stream 为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了发布-订阅、消费组、分区的三个核心概念。</p><blockquote><p>目前仅支持RabbitMQ、Kafka。</p></blockquote>",6),e=(0,p.Uk)("中文文档可以参照"),c={href:"https://m.wang1314.com/doc/webapp/topic/20971999.html",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("这个"),o=(0,p.uE)('<h2 id="设置思想" tabindex="-1"><a class="header-anchor" href="#设置思想" aria-hidden="true">#</a> 设置思想</h2><div class="custom-container tip"><p class="custom-container-title">Why</p><p>如果我们使用的是<code>RabbitMQ</code>和<code>Kafka</code>，由于这两个消息中间件的架构上的不同， 像RabbitMQ有exchange，kafka有Topic和Partitions</p><p>这些中间件的差异性导致我们实际项目开发给我们造成了一定的困扰，我们如果用了两个消息队列的其中一种，后面的业务需求，我想往另外一种消息队列进行迁移，这时候无疑就是一个灾难性的， 一大堆东西都要重新推倒重新做 ，因为它跟我们的系统耦合了，这时候springcloud Stream给我们提供了一种解耦合的方式。</p></div><h3 id="绑定器" tabindex="-1"><a class="header-anchor" href="#绑定器" aria-hidden="true">#</a> 绑定器</h3><p>在没有绑定器这个概念的情况下，我们的SpringBoot应用要直接与消息中间件进行信息交互的时候，由于各消息中间件构建的初衷不同，它们的实现细节上会有较大的差异性 ，<code>通过定义绑定器Binder作为中间层，完美地实现了应用程序与消息中间件细节之间的隔离 </code>。</p><p>Stream对消息中间件的进一步封装，可以做到代码层面对中间件的无感知，甚至于动态的切换中间件(rabbitmq切换为kafka)，使得微服务开发的高度解耦，服务可以关注更多自己的业务流程</p>',5),u=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220218125510762.png",data:"aurora"})],-1),i=(0,p._)("blockquote",null,[(0,p._)("p",null,"这个绑定器是用来绑定消息容器的生产者和消费者，它有两种类型，INPUT和OUTPUT，INPUT对应于消费者，OUTPUT对应于生产者。")],-1),r=(0,p._)("h2",{id:"标准流程",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#标准流程","aria-hidden":"true"},"#"),(0,p.Uk)(" 标准流程")],-1),k=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220218125829530.png",data:"aurora"})],-1),g=(0,p.uE)('<ul><li><p>Binder</p><p>链接中间件，屏蔽差异</p></li><li><p>Channel</p><p>通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过Channel对队列进行配置</p></li><li><p>Source和Sink</p><p>可理解为参照对象是Spring Cloud Stream自身，从Stream发布消息就是输出，接受消息就是输入。</p></li></ul><p>从该图的流程中，我们可以看出，stream处理不同消息中间件的流程是，生产者将消息输出到stream，stream将此生产者和我们的消费者进行绑定，这样消费者就能够得到该消息</p><h2 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解" aria-hidden="true">#</a> 常用注解</h2>',3),b=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220218130335469.png",data:"aurora"})],-1),d=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220218130359317.png",data:"aurora"})],-1),m=(0,p.uE)('<h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><p>这里我们搭建一个消息生产模块<code>cloud-stream-rabbitmq-provider8801</code>和两个消息接收模块，也就是消费者<code>cloud-stream-rabbitmq-consumer8802</code>和<code>cloud-stream-rabbitmq-consumer8803</code></p><p>这里使用<code>eureka</code>作为注册中心</p><h2 id="消息生产模块" tabindex="-1"><a class="header-anchor" href="#消息生产模块" aria-hidden="true">#</a> 消息生产模块</h2><h3 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> 依赖</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-stream-rabbit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token comment">&lt;!--基础配置--&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h3 id="配置项" tabindex="-1"><a class="header-anchor" href="#配置项" aria-hidden="true">#</a> 配置项</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8801</span>\n\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>stream<span class="token punctuation">-</span>provider\n  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>\n    <span class="token key atrule">stream</span><span class="token punctuation">:</span>\n      <span class="token key atrule">binders</span><span class="token punctuation">:</span> <span class="token comment"># 在此处配置要绑定的rabbitmq的服务信息；</span>\n        <span class="token key atrule">defaultRabbit</span><span class="token punctuation">:</span> <span class="token comment"># 表示定义的名称，用于于binding整合</span>\n          <span class="token key atrule">type</span><span class="token punctuation">:</span> rabbit <span class="token comment"># 消息组件类型</span>\n          <span class="token key atrule">environment</span><span class="token punctuation">:</span> <span class="token comment"># 设置rabbitmq的相关的环境配置</span>\n            <span class="token key atrule">spring</span><span class="token punctuation">:</span>\n              <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>\n                <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.75.128\n                <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>\n                <span class="token key atrule">username</span><span class="token punctuation">:</span> admin\n                <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>\n      <span class="token key atrule">bindings</span><span class="token punctuation">:</span> <span class="token comment"># 服务的整合处理</span>\n        <span class="token key atrule">output</span><span class="token punctuation">:</span> <span class="token comment"># 这个名字是一个通道的名称</span>\n          <span class="token key atrule">destination</span><span class="token punctuation">:</span> studyExchange <span class="token comment"># 表示要使用的Exchange名称定义</span>\n          <span class="token key atrule">content-type</span><span class="token punctuation">:</span> application/json <span class="token comment"># 设置消息类型，本次为json，文本则设置“text/plain”</span>\n          <span class="token key atrule">binder</span><span class="token punctuation">:</span> defaultRabbit <span class="token comment"># 设置要绑定的消息服务的具体设置</span>\n\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">client</span><span class="token punctuation">:</span> <span class="token comment"># 客户端进行Eureka注册的配置</span>\n    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>\n      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka\n  <span class="token key atrule">instance</span><span class="token punctuation">:</span>\n    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># 设置心跳的时间间隔（默认是30秒）</span>\n    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment"># 如果现在超过了5秒的间隔（默认是90秒）</span>\n    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> send<span class="token punctuation">-</span>8801.com  <span class="token comment"># 在信息列表时显示主机名称</span>\n    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token comment"># 访问的路径变为IP地址</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><blockquote><p>在配置<code>rabbitmq</code>的时候，host一定不能加上http</p></blockquote><h3 id="定义一个发送接口-并且实现该接口" tabindex="-1"><a class="header-anchor" href="#定义一个发送接口-并且实现该接口" aria-hidden="true">#</a> 定义一个发送接口，并且实现该接口</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//发送接口</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MessageProvider</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">//实现类</span>\n<span class="token annotation punctuation">@EnableBinding</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Source</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageProviderImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MessageProvider</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Resource</span>\n    <span class="token keyword">private</span> <span class="token class-name">MessageChannel</span> output<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> message <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        output<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> message<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><blockquote><p>这里得注意，<code>output</code>是对应于生产者，<code>input</code>是对应于消费者</p></blockquote><p>然后我们调用<code>send()</code>方法便可以将消息发送出去了</p><h3 id="controller" tabindex="-1"><a class="header-anchor" href="#controller" aria-hidden="true">#</a> controller</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMessageController</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Resource</span>\n    <span class="token keyword">private</span> <span class="token class-name">MessageProvider</span> provider<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/sendMessage&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> send <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;发送 {}&quot;</span><span class="token punctuation">,</span>send<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;成功发送&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="启动测试" tabindex="-1"><a class="header-anchor" href="#启动测试" aria-hidden="true">#</a> 启动测试</h3><p>当我们启动该消息生产模块的时候，那么我么便可以在web端的rabbitmq中看到一个新的交换机，交换机的名字也就是我们配置的<code>spring.cloud.stream.bindings.output.destination</code></p><h2 id="消费者模块" tabindex="-1"><a class="header-anchor" href="#消费者模块" aria-hidden="true">#</a> 消费者模块</h2><h3 id="依赖-1" tabindex="-1"><a class="header-anchor" href="#依赖-1" aria-hidden="true">#</a> 依赖</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-stream-rabbit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token comment">&lt;!--基础配置--&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h3 id="配置项-1" tabindex="-1"><a class="header-anchor" href="#配置项-1" aria-hidden="true">#</a> 配置项</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8802</span>\n\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>stream<span class="token punctuation">-</span>consumer\n  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>\n    <span class="token key atrule">stream</span><span class="token punctuation">:</span>\n      <span class="token key atrule">binders</span><span class="token punctuation">:</span> <span class="token comment"># 在此处配置要绑定的rabbitmq的服务信息；</span>\n        <span class="token key atrule">defaultRabbit</span><span class="token punctuation">:</span> <span class="token comment"># 表示定义的名称，用于于binding整合</span>\n          <span class="token key atrule">type</span><span class="token punctuation">:</span> rabbit <span class="token comment"># 消息组件类型</span>\n          <span class="token key atrule">environment</span><span class="token punctuation">:</span> <span class="token comment"># 设置rabbitmq的相关的环境配置</span>\n            <span class="token key atrule">spring</span><span class="token punctuation">:</span>\n              <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>\n                <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.75.128\n                <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>\n                <span class="token key atrule">username</span><span class="token punctuation">:</span> admin\n                <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>\n      <span class="token key atrule">bindings</span><span class="token punctuation">:</span> <span class="token comment"># 服务的整合处理</span>\n        <span class="token key atrule">input</span><span class="token punctuation">:</span> <span class="token comment"># 这个名字是一个通道的名称</span>\n          <span class="token key atrule">destination</span><span class="token punctuation">:</span> studyExchange <span class="token comment"># 表示要使用的Exchange名称定义</span>\n          <span class="token key atrule">content-type</span><span class="token punctuation">:</span> application/json <span class="token comment"># 设置消息类型，本次为对象json，如果是文本则设置“text/plain”</span>\n          <span class="token key atrule">binder</span><span class="token punctuation">:</span> defaultRabbit <span class="token comment"># 设置要绑定的消息服务的具体设置</span>\n          <span class="token comment">#group: aurora</span>\n\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">client</span><span class="token punctuation">:</span> <span class="token comment"># 客户端进行Eureka注册的配置</span>\n    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>\n      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka\n  <span class="token key atrule">instance</span><span class="token punctuation">:</span>\n    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># 设置心跳的时间间隔（默认是30秒）</span>\n    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment"># 如果现在超过了5秒的间隔（默认是90秒）</span>\n    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> receive<span class="token punctuation">-</span>8802.com  <span class="token comment"># 在信息列表时显示主机名称</span>\n    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token comment"># 访问的路径变为IP地址</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h3 id="业务类" tabindex="-1"><a class="header-anchor" href="#业务类" aria-hidden="true">#</a> 业务类</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token annotation punctuation">@Component</span>\n<span class="token annotation punctuation">@EnableBinding</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Sink</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveMessageListener</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${server.port}&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> port<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@StreamListener</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Sink</span><span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inputMsg</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> payload <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消费者1号 ---&gt; 端口: {},message: {}&quot;</span><span class="token punctuation">,</span>port<span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>我们只需要写上这个类，就可以了</p><p>当我们的消息生产者发送消息之后，那么使用<code>StreamListener</code>注解，并且value为<code>Sink.INPUT</code>的方法便会接收到该消息</p><h2 id="消息重复消费和消息持久化" tabindex="-1"><a class="header-anchor" href="#消息重复消费和消息持久化" aria-hidden="true">#</a> 消息重复消费和消息持久化</h2><h3 id="重复消费" tabindex="-1"><a class="header-anchor" href="#重复消费" aria-hidden="true">#</a> 重复消费</h3><p>当我们拷贝消费者模块，那么现在存在两个消费者模块，分别是8082和8083，但是当 生产者发送一个消息之后，我们会发现8082和8083都消费了该消息，这就会造成消息的重复消费，我们应该保证只有一个消费消费</p><p>造成这个的原因是因为，8082和8083他们都是属于不同的<code>group</code>，不是属于同一个分组的模块，他们都共同绑定在一个交换机上，那么这些不属于同一个分组的模块，都能够消费该消息，所以解决的办法就是，为8082和8083设置相同的分组，这样生产者生产消息之后，同一个分组中，只会有一个能够消费消息</p>',30),h=(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[(0,p.Uk)("如果没有设置"),(0,p._)("code",null,"group"),(0,p.Uk)("值，那么8082和8083队列的名称，会是下面这种形式")]),(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220218200947654.png",data:"aurora"})])]),(0,p._)("li",null,[(0,p._)("p",null,[(0,p.Uk)("设置"),(0,p._)("code",null,"group"),(0,p.Uk)("之后")]),(0,p._)("blockquote",null,[(0,p._)("p",null,[(0,p.Uk)("8082的"),(0,p._)("code",null,"group"),(0,p.Uk)("为aurora-8082")]),(0,p._)("p",null,[(0,p.Uk)("8083的"),(0,p._)("code",null,"group"),(0,p.Uk)("为aurora-8083")])]),(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220218201205644.png",data:"aurora"})])])],-1),y=(0,p.uE)('<p>如果我们设置了group字段，那么队列的名称也会变成<code>交换机名称.group名称</code></p><p>该<code>group</code>是通过<code>spring.cloud.stream.bindings.input.group</code>进行设置的</p><h3 id="持久化" tabindex="-1"><a class="header-anchor" href="#持久化" aria-hidden="true">#</a> 持久化</h3><p>现在我们去掉8082的group字段值，直接注释，8083不做任何处理，然后我们关闭8082和8083，调用消息提供者发送4条消息，成功发送之后，我们启动8082和8083，观察在启动的过程中，8082和8083的控制天会不会打出发送的这四条消息(<code>因为他们不属于同一个组，所以8082和8083都能够消费</code>)</p><p>但是最终就只有8083在控制台打印出生产的消息，8082没有</p><p>如果没有设置<code>group</code>，那么消息是不能持久化，也就是说，如果生产者生产了多条消息，设置group字段的某个模块突然挂机了，但是当该模块重新启动的时候，生产的消息能够被消费</p>',6),f={},v=(0,a(83744).Z)(f,[["render",function(n,s){const a=(0,p.up)("ExternalLinkIcon");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[e,(0,p._)("a",c,[l,(0,p.Wm)(a)])]),o,u,i,r,k,g,b,d,m,h,y],64)}]])}}]);