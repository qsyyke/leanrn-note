"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7249],{73363:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-bdd3e074",path:"/vue/vue2/Vuex.html",title:"vuex",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"单界面的状态管理",slug:"单界面的状态管理",children:[]},{level:2,title:"多界面状态管理",slug:"多界面状态管理",children:[]},{level:2,title:"state",slug:"state",children:[]},{level:2,title:"Getters",slug:"getters",children:[{level:3,title:"getters中，方法参数问题",slug:"getters中-方法参数问题",children:[]}]},{level:2,title:"Mutations",slug:"mutations",children:[{level:3,title:"Mutation传递参数",slug:"mutation传递参数",children:[]},{level:3,title:"Mutation提交风格",slug:"mutation提交风格",children:[]},{level:3,title:"Mutation响应规则",slug:"mutation响应规则",children:[]},{level:3,title:"Mutation常量类型",slug:"mutation常量类型",children:[]},{level:3,title:"Mutation同步函数",slug:"mutation同步函数",children:[]}]},{level:2,title:"Actions",slug:"actions",children:[{level:3,title:"基本使用",slug:"基本使用",children:[]},{level:3,title:"Action返回的Promise",slug:"action返回的promise",children:[]},{level:3,title:"Actions的写法",slug:"actions的写法",children:[]}]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},64589:(n,s,a)=>{a.r(s),a.d(s,{default:()=>B});var t=a(66252);const p=(0,t.uE)('<h1 id="vuex" tabindex="-1"><a class="header-anchor" href="#vuex" aria-hidden="true">#</a> vuex</h1><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式</p><p>也就是，加入我们有多个组件，我们想要在这些组件内共享数据，并且是响应式的，也就是该项目中的所有组件都能拿到这个数据，还能对该数据进行更改，那么就需要用到vuex</p><p>如果只是想要让项目内的所有组件都能拿到某一个值，那么就可以通过vue实例的原型添加一个属性就可以做到，但是这个属性不是响应式，因为所有组件都继承了vue实例，也就能拿到此属性</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;chuchen&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="单界面的状态管理" tabindex="-1"><a class="header-anchor" href="#单界面的状态管理" aria-hidden="true">#</a> 单界面的状态管理</h2><ul><li>State：不用多说，就是我们的状态。（你姑且可以当做就是data中的属性）</li><li>View：视图层，可以针对State的变化，显示不同的信息。</li><li>Actions：这里的Actions主要是用户的各种操作：点击、输入等等，会导致状态的改变。</li></ul>',7),e=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210722220505108.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),o=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210722220513492.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),c=(0,t.uE)('<p>比如计数器中的count就是state，actions就是点击的动作，count目前的值需要被显示在界面中，也就是我们的View部分。</p><h2 id="多界面状态管理" tabindex="-1"><a class="header-anchor" href="#多界面状态管理" aria-hidden="true">#</a> 多界面状态管理</h2><ul><li><p>Vue已经帮我们做好了单个界面的状态管理，但是如果是多个界面呢？ 多个试图都依赖同一个状态（一个状态改了，多个界面需要进行更新） 不同界面的Actions都想修改同一个状态（Home.vue需要修改，Profile.vue也需要修改这个状态）</p></li><li><p>也就是说对于某些状态(状态1/状态2/状态3)来说只属于我们某一个试图，但是也有一些状态(状态a/状态b/状态c)属于多个试图共同想要维护的 状态1/状态2/状态3你放在自己的房间中，你自己管理自己用，没问题。 但是状态a/状态b/状态c我们希望交给一个大管家来统一帮助我们管理！！！ 没错，Vuex就是为我们提供这个大管家的工具。</p></li><li><p>全局单例模式（大管家） 我们现在要做的就是将共享的状态抽取出来，交给我们的大管家，统一进行管理。 之后，你们每个试图，按照我规定好的规定，进行访问和修改等操作。 这就是Vuex背后的基本思想。</p></li></ul><h1 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h1><p>因为vuex也是一个插件，所以我们需要先安装</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>npm install vuex --save\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h1 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h1><p>一般推荐，在src下面创建一个<code>store</code>文件夹，用来存储此vuex数据</p><p>实现定时器的一个小案例</p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>当前: {{this.$store.state.count}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>incr<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>decr<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Count&quot;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">decr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token operator">--</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//store/index.js</span>\n<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>\n\n<span class="token comment">// 1.安装插件</span>\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>\n\n<span class="token comment">// 2.创建对象</span>\n<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1000</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    state<span class="token punctuation">,</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 3.导出store独享</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> store\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>因为在vuex中，state是存储我们需要共享的数据，我们可以通过<code>this.$store.state</code>得到所有的对象</p><p>如果想要修改count值，我们可以通过<code>this.$store.state++</code>实现，但是我们不能监听器过程，通过<code>devtools</code>插件</p><p>在vuex中，其状态管理图例为</p>',14),l=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210722231127062.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),u=(0,t.uE)('<p>通过这图，我们也可以看到，修改值的过程是<code>actions---&gt;mutations---&gt;state</code>，因为devtools工具只有你通过mutations修改state值，其才会进行监听，所以修改代码如下</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//store/index.js</span>\n<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1000</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    state<span class="token punctuation">,</span>\n    <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token operator">++</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token operator">--</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//count</span>\n<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">decr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;decrement&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;increment&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>其中，在mutations中，定义的方法都能够被<code>devtools</code>监听到，increment(data) {}，其中increment是事件，后面的是回调函数，也就是代码逻辑</p><p>我们需要在actions处，进行commit提交，使用<code>this.$store.commit(&quot;对应mutations中的事件名&quot;)</code></p>',5),r=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210722232209778.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),i=(0,t.uE)('<h1 id="五个属性" tabindex="-1"><a class="header-anchor" href="#五个属性" aria-hidden="true">#</a> 五个属性</h1><h2 id="state" tabindex="-1"><a class="header-anchor" href="#state" aria-hidden="true">#</a> state</h2><p>此属性我们已经知道了，其就是存储我们需要共享的属性</p><h2 id="getters" tabindex="-1"><a class="header-anchor" href="#getters" aria-hidden="true">#</a> Getters</h2><p>在组件中，如果我们需要定义一些复杂的属性，那么我们可以使用计算属性，在vuex中，可以使用Getters进行代替，也就相当于计算属性</p><p>获取学生年龄大于20的个数。</p>',6),k=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210722232757707.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),b=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210722232803444.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),m=(0,t._)("p",null,"注意：",-1),d=(0,t._)("blockquote",null,[(0,t._)("p",null,[(0,t.Uk)("在store/index.js中，我们获取state值时，不能使用"),(0,t._)("code",null,"this.state"),(0,t.Uk)("或者是"),(0,t._)("code",null,"this.$store.state"),(0,t.Uk)("，会出现一下异常")]),(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t.Uk)("vue"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("runtime"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("esm"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("js"),(0,t._)("span",{class:"token operator"},"?"),(0,t.Uk)("ff9b"),(0,t._)("span",{class:"token operator"},":"),(0,t._)("span",{class:"token number"},"619"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"["),(0,t.Uk)("Vue warn"),(0,t._)("span",{class:"token punctuation"},"]"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(" Error "),(0,t._)("span",{class:"token keyword"},"in"),(0,t.Uk)(),(0,t._)("span",{class:"token literal-property property"},"render"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"\"TypeError: Cannot read property 'state' of undefined\""),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br")])]),(0,t._)("p",null,[(0,t.Uk)("因为此方法是在"),(0,t._)("code",null,"getters"),(0,t.Uk)("内的，所以这里的this指向的是"),(0,t._)("code",null,"getters"),(0,t.Uk)("这个属性，"),(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210723112644169.png?x-oss-process=style/pictureProcess1",data:"aurora"})])],-1),g=(0,t.uE)('<h3 id="getters中-方法参数问题" tabindex="-1"><a class="header-anchor" href="#getters中-方法参数问题" aria-hidden="true">#</a> getters中，方法参数问题</h3><p>经过测试，发现getters中的方法，我们只能在<code>getParams()</code>中，传入两个值，state和getters，不能传入其他的，否则就会出现</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>getParams2 is not a <span class="token keyword">function</span>&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>getters</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>getters<span class="token punctuation">)</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果我们参数中，使用两个参数接收，在使用的时候，我们不需要传入，就可以使用这两个参数<code>this.$store.getters.getParams</code>，并且会将state赋值给第一个参数，将getters赋值给第二个参数getters</p><p>但是如果我们真的想要在<code>getParams</code>内使用，用户传入的值，那么就需要在此方法的return处，再次嵌套一个函数，参数放在此函数形参处就可以了</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">getParams2</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>getters</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>getters<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;-----getParams2 id------&quot;</span><span class="token operator">+</span>id<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> id\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//使用</span>\n<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span><span class="token function">getParams2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>运行结果</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>state <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state\ngetters <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters\nid <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="mutations" tabindex="-1"><a class="header-anchor" href="#mutations" aria-hidden="true">#</a> Mutations</h2><p>我们知道，如果要对state的状态进行更新，唯一方式就是提交mutation，因为如果使用其他的方式的话，state状态的改变不会被devtools工具监听，我们很难进行维护</p>',11),_=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210723120029282.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),h=(0,t._)("blockquote",null,[(0,t._)("p",null,"Mutation主要包括两部分："),(0,t._)("ul",null,[(0,t._)("li",null,"字符串的事件类型（type）"),(0,t._)("li",null,"一个回调函数（handler）,该回调函数的第一个参数就是state。")])],-1),y=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210723120445201.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),v=(0,t._)("p",null,[(0,t.Uk)("默认情况下，在使用是，如果我们没有传递参数的话，那么此data默认是"),(0,t._)("code",null,"this.$store.state")],-1),x=(0,t._)("h3",{id:"mutation传递参数",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#mutation传递参数","aria-hidden":"true"},"#"),(0,t.Uk)(" Mutation传递参数")],-1),f=(0,t._)("p",null,"在通过mutation更新数据的时候, 有可能我们希望携带一些额外的参数",-1),j=(0,t._)("blockquote",null,[(0,t._)("p",null,"参数被称为是mutation的载荷(Payload)")],-1),U=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("p",null,"一个参数"),(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"//mutations"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token function"},"increment"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("state"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("n")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    console"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},'"-----------"'),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    console"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("state"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    console"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("n"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    console"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},'"-------"'),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"this"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("state"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("count "),(0,t._)("span",{class:"token operator"},"+="),(0,t.Uk)(" n\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"//Count.vue"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token function"},"incr"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"this"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("$store"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"commit"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},'"increment"'),(0,t._)("span",{class:"token punctuation"},","),(0,t._)("span",{class:"token number"},"2"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br")])]),(0,t._)("p",null,"运行结果"),(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t.Uk)("state "),(0,t._)("span",{class:"token operator"},"--"),(0,t._)("span",{class:"token operator"},"-"),(0,t._)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"this"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("$store"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("state\nn "),(0,t._)("span",{class:"token operator"},"--"),(0,t._)("span",{class:"token operator"},"-"),(0,t._)("span",{class:"token operator"},">"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"2"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br")])])]),(0,t._)("li",null,[(0,t._)("p",null,"多个参数"),(0,t._)("p",null,"如果需要传递多个参数，我们一般是以对象的形式进行传递"),(0,t._)("div",{class:"language-javascript ext-js line-numbers-mode"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"//mutations"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token function"},"decrement"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},[(0,t.Uk)("state"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("payload")]),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    console"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("state"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    console"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"log"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("payload"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"this"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("state"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("count"),(0,t._)("span",{class:"token operator"},"--"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n\n"),(0,t._)("span",{class:"token comment"},"//Count.vue"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token function"},"decr"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token keyword"},"this"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("$store"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"commit"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},'"decrement"'),(0,t._)("span",{class:"token punctuation"},","),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token literal-property property"},"name"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'chuchen'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token literal-property property"},"age"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"23"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br")])]),(0,t._)("p",null,"运行结果"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210723121402130.png?x-oss-process=style/pictureProcess1",data:"aurora"})])])],-1),w=(0,t.uE)('<h3 id="mutation提交风格" tabindex="-1"><a class="header-anchor" href="#mutation提交风格" aria-hidden="true">#</a> Mutation提交风格</h3><p>除了上面的提交风格之外，vue还提供了另一种提交风格</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;increment&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">20</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',3),z=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210723121741960.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),q=(0,t.uE)('<h3 id="mutation响应规则" tabindex="-1"><a class="header-anchor" href="#mutation响应规则" aria-hidden="true">#</a> Mutation响应规则</h3><p>Vuex的store中的state是响应式的, 当state中的数据发生改变时, Vue组件会自动更新.</p><ul><li>这就要求我们必须遵守一些Vuex对应的规则: 提前在store中初始化好所需的属性.</li></ul><blockquote><p>也就是说，如果我们要做到state中的数据时响应式的，那么在项目启动的之前，这些数据就需要已经存在state中，如果是后面通过对state中的某个对象添加新的属性，那么在devtools工具中，我们能够看到state中的对象确实已经添加了新属性，但是页面中，该对象的数据，不会发生改变，因为state数据，是响应式的前提就是，已经初始化好数据</p></blockquote><p>但是还可以通过以下方法做到响应式（初始化时未存在）</p><p>当给state中的对象添加新属性时, 使用下面的方式:</p><ul><li>方式一: 使用Vue.set(obj, &#39;newProp&#39;, 123)</li><li>方式二: 用新对象给旧对象重新赋值</li></ul><h3 id="mutation常量类型" tabindex="-1"><a class="header-anchor" href="#mutation常量类型" aria-hidden="true">#</a> Mutation常量类型</h3><ul><li>我们来考虑下面的问题: 在mutation中, 我们定义了很多事件类型(也就是其中的方法名称). 当我们的项目增大时, Vuex管理的状态越来越多, 需要更新状态的情况越来越多, 那么意味着Mutation中的方法越来越多. 方法过多, 使用者需要花费大量的经历去记住这些方法, 甚至是多个文件间来回切换, 查看方法名称, 甚至如果不是复制的时候, 可能还会出现写错的情况.</li><li>如何避免上述的问题呢? 在各种Flux实现中, 一种很常见的方案就是使用常量替代Mutation事件的类型. 我们可以将这些常量放在一个单独的文件中, 方便管理以及让整个app所有的事件类型一目了然.</li><li>具体怎么做呢? 我们可以创建一个文件: mutation-types.js, 并且在其中定义我们的常量. 定义常量时, 我们可以使用ES2015中的风格, 使用一个常量来作为函数的名称.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//mutation.type.js</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">INCREMENT</span> <span class="token operator">=</span> <span class="token string">&#39;INCREMENT&#39;</span>\n\n<span class="token comment">//store/index.js</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> types <span class="token keyword">from</span> <span class="token string">&#39;./mutation.type&#39;</span>\n<span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>types<span class="token punctuation">.</span><span class="token constant">INCREMENT</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>ooszy<span class="token punctuation">.</span>cco<span class="token punctuation">.</span>vin<span class="token operator">/</span>img<span class="token operator">/</span>blog<span class="token operator">-</span>note<span class="token operator">/</span>state<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+=</span> n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n \n<span class="token comment">//Count.vue</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> types <span class="token keyword">from</span> <span class="token string">&#39;../store/mutation.type&#39;</span>\n<span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> types<span class="token punctuation">.</span><span class="token constant">INCREMENT</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">20</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="mutation同步函数" tabindex="-1"><a class="header-anchor" href="#mutation同步函数" aria-hidden="true">#</a> Mutation同步函数</h3><ul><li>通常情况下, Vuex要求我们Mutation中的方法必须是同步方法. 主要的原因是当我们使用devtools时, 可以devtools可以帮助我们捕捉mutation的快照. 但是如果是异步操作, 那么devtools将不能很好的追踪这个操作什么时候会被完成.</li></ul><blockquote><p>如果是对于异步信息，比如<code>setTimeout()</code>，官方推荐在actions里面进行操作</p></blockquote><h2 id="actions" tabindex="-1"><a class="header-anchor" href="#actions" aria-hidden="true">#</a> Actions</h2><ul><li>我们强调, 不要再Mutation中进行异步操作. 但是某些情况, 我们确实希望在Vuex中进行一些异步操作, 比如网络请求, 必然是异步的. 这个时候怎么处理呢? Action类似于Mutation, 但是是用来代替Mutation进行异步操作的.</li></ul><p>基本使用如下</p>',16),P=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("p",null,"context是什么? context是和store对象具有相同方法和属性的对象. 也就是说, 我们可以通过context去进行commit相关的操作, 也可以获取context.state等. 但是注意, 这里它们并不是同一个对象, 为什么呢? 我们后面学习Modules的时候, 再具体说."),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210723124602071.png?x-oss-process=style/pictureProcess1",data:"aurora"})])]),(0,t._)("li",null,[(0,t._)("p",null,"这样的代码是否多此一举呢? 我们定义了actions, 然后又在actions中去进行commit, 这不是脱裤放屁吗? 事实上并不是这样, 如果在Vuex中有异步操作, 那么我们就可以在actions中完成了.")])],-1),E=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210723124240712.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),S=(0,t.uE)('<h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//store/index.js actions</span>\n<span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">aIncrement</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;------actions-------&quot;</span><span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n\n        context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">type</span><span class="token operator">:</span> types<span class="token punctuation">.</span><span class="token constant">INCREMENT</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">400</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//mutations</span>\n<span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>types<span class="token punctuation">.</span><span class="token constant">INCREMENT</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>ooszy<span class="token punctuation">.</span>cco<span class="token punctuation">.</span>vin<span class="token operator">/</span>img<span class="token operator">/</span>blog<span class="token operator">-</span>note<span class="token operator">/</span>state<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+=</span> n<span class="token punctuation">.</span>n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//Count.vue</span>\n<span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;aIncrement&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div>',2),M=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210723125813683.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),V=(0,t.uE)('<blockquote><p>理解这个图的过程，我们使用actions，需要在组件中，调用dispatch进行解析到actions，然后actions通过commit提交到mutations，从而对state的状态进行修改，经过这一系列的操作，无论是异步请求还是同步，devtools都能够监控到state的改变</p></blockquote><h3 id="action返回的promise" tabindex="-1"><a class="header-anchor" href="#action返回的promise" aria-hidden="true">#</a> Action返回的Promise</h3><ul><li>前面我们学习ES6语法的时候说过, Promise经常用于异步操作. 在Action中, 我们可以将异步操作放在一个Promise中, 并且在成功或者失败后, 调用对应的resolve或reject.</li></ul><p>代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//store/index.js/actions</span>\n<span class="token function">aIncrement</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                <span class="token literal-property property">type</span><span class="token operator">:</span> types<span class="token punctuation">.</span><span class="token constant">INCREMENT</span><span class="token punctuation">,</span>\n                <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">600</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//Count.vue</span>\n<span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;aIncrement&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;action 2秒已经完成&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>使用这种方式，能够将异步的逻辑处理，和执行成功的代码进行分开</p>',6),$=(0,t._)("blockquote",null,[(0,t._)("p",null,"其执行逻辑为:"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210723131030229.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210723131152165.png?x-oss-process=style/pictureProcess1",data:"aurora"})])],-1),C=(0,t.uE)('<h3 id="actions的写法" tabindex="-1"><a class="header-anchor" href="#actions的写法" aria-hidden="true">#</a> Actions的写法</h3><p>在es6中，我们可以使用对象的解构</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;qsyyke&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token string">&#39;1.66&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>height<span class="token punctuation">}</span> <span class="token operator">=</span> obj\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>运行结果</p>',4),N=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210723133524597.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),A=(0,t._)("p",null,[(0,t.Uk)("并且其实按照属性名进行赋值的，就不用"),(0,t._)("code",null,"const name = obj.name"),(0,t.Uk)("的方式进行赋值")],-1),I=(0,t._)("ul",null,[(0,t._)("li",null,"局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState")],-1),T=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210723133620730.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),R=(0,t._)("ul",null,[(0,t._)("li",null,"如果getters中也需要使用全局的状态, 可以接受更多的参数")],-1),G=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210723133653750.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),H=(0,t._)("h1",{id:"项目结构",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#项目结构","aria-hidden":"true"},"#"),(0,t.Uk)(" 项目结构")],-1),D=(0,t._)("p",null,"因为在vuex中，我们需要管理很多的内容，如果代码很多的话，结构就会非常的混乱，所以我们就需要对index.js中的内容进行抽取",-1),F=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210723133814788.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),Y=(0,t.uE)('<p>抽离之后，我们只需要在<code>index.js</code>中导入就可以了</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> getters <span class="token keyword">from</span> <span class="token string">&quot;./getters&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> actions <span class="token keyword">from</span> <span class="token string">&quot;./actions&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> mutations <span class="token keyword">from</span> <span class="token string">&quot;./mutations&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>对于state，我们也可以抽离出来</p>',3),Z={},B=(0,a(83744).Z)(Z,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,e,o,c,l,u,r,i,k,b,m,d,g,_,h,y,v,x,f,j,U,w,z,q,P,E,S,M,V,$,C,N,A,I,T,R,G,H,D,F,Y],64)}]])}}]);