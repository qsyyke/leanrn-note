"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6227],{80743:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-6395bef4",path:"/spring/springcloud/OpenFeign%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8.html",title:"OpenFeign服务接口调用",lang:"en-US",frontmatter:{date:"2022/1/18 16:01",tag:["spring cloud","openFeign","feign","spring boot","微服务"]},excerpt:"",headers:[{level:2,title:"Feign和OpenFeign的区别",slug:"feign和openfeign的区别",children:[]},{level:2,title:"使用",slug:"使用",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},88781:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var e=a(66252);const p=(0,e.uE)('<h1 id="openfeign服务接口调用" tabindex="-1"><a class="header-anchor" href="#openfeign服务接口调用" aria-hidden="true">#</a> OpenFeign服务接口调用</h1><p>https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/htmlsingle/#spring-cloud-openfeign</p><p>Feign是一个声明式WebService客户端，使用Feign能让编写Web Service客户端更加简单。</p><p>它的使用方法是定义一个服务接口然后在上面添加注解。</p><p>Feign也支持可拔插式的编码器和解码器，Spring Cloud对Feign进行了封装，使其支持了Spring MVC标准注解和HttpMessageConverters，Feign可以与Eureka和Ribbon组合使用以支持负载均衡</p><p>我们通过查看该依赖，也能够看到，在<code>OpenFeign</code>依赖中，存在<code>Ribbon</code>依赖</p>',6),t=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220118160806649.png",data:"aurora"})],-1),o=(0,e.uE)('<p>Feign旨在使编写Java Http客户端变得更容易。 前面在使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理，形成了一套模版化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，我们只需创建一个接口并使用注解的方式来配置它(以前是Dao接口上面标注Mapper注解,现在是一个微服务接口上面标注一个Feign注解即可)，即可完成对服务提供方的接口绑定，简化了使用Spring cloud Ribbon时，自动封装服务调用客户端的开发量。</p><p>Feign集成了Ribbon 利用Ribbon维护了Payment的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，通过feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用</p><h2 id="feign和openfeign的区别" tabindex="-1"><a class="header-anchor" href="#feign和openfeign的区别" aria-hidden="true">#</a> Feign和OpenFeign的区别</h2><table><thead><tr><th>Feign</th><th>OpenFeign</th></tr></thead><tbody><tr><td>Feign是Spring Cloud组件中的一个轻量级RESTful的HTTP服务客户端<br>Feign内置了Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。Feign的使用方式是：使用Feign的注解定义接口，调用这个接口，就可以调用服务注册中心的服务</td><td>OpenFeign是Spring Cloud 在Feign的基础上支持了SpringMVC的注解，如@RequesMapping等等。OpenFeign的@FeignClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</td></tr><tr><td><code>spring-cloud-starter-feign</code></td><td><code>spring-cloud-starter-openfeign</code></td></tr></tbody></table><blockquote><p>openFeign是服务端组件，所以我们需要在消费者上使用</p></blockquote><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p>这里有两个服务，service1和service2，其中service2作为消费者</p><p>service1的接口为</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/message/messageLog&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@RestController</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageLogController</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">MessageLogService</span> messageLogService<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@ResponseResult</span>\n    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/insert&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">ModifyResult</span> <span class="token function">insertMessageLog</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Insert</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Default</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token class-name">MessageLogDO</span> messageLogDO<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BindException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> messageLogService<span class="token punctuation">.</span><span class="token function">insertMessageLog</span><span class="token punctuation">(</span>messageLogDO<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@ResponseResult</span>\n    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/update&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">ModifyResult</span> <span class="token function">updateMessageLog</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span><span class="token class-name">Update</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token class-name">MessageLogDO</span> messageLogDO<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BindException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> messageLogService<span class="token punctuation">.</span><span class="token function">updateMessageLog</span><span class="token punctuation">(</span>messageLogDO<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@ResponseResult</span>\n    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/delete/{uid}&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">ModifyResult</span> <span class="token function">deleteMessageLog</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;uid&quot;</span><span class="token punctuation">)</span> <span class="token keyword">long</span> uid<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> messageLogService<span class="token punctuation">.</span><span class="token function">deleteMessageLog</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@ResponseResult</span>\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/queryAll&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageLogVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryAllMessageLog</span><span class="token punctuation">(</span><span class="token class-name">MessageLogDO</span> messageLogDO<span class="token punctuation">,</span> <span class="token class-name">PaginationDTO</span> paginationDTO<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> messageLogService<span class="token punctuation">.</span><span class="token function">queryAllMessageLog</span><span class="token punctuation">(</span>messageLogDO<span class="token punctuation">,</span>paginationDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@ResponseResult</span>\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/queryByUid/{uid}&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">MessageLogDO</span> <span class="token function">queryMessageLogByUid</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;uid&quot;</span><span class="token punctuation">)</span> <span class="token keyword">long</span> uid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> messageLogService<span class="token punctuation">.</span><span class="token function">queryByUid</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>service2消费者的使用步骤</p><ol><li><p>创建一个feign接口</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;aurora-message&quot;</span><span class="token punctuation">,</span>contextId <span class="token operator">=</span> <span class="token string">&quot;aurora-message-messageLog&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MessageLogFeignService</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/message/messageLog/insert&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">ModifyResult</span> <span class="token function">insertMessageLog</span><span class="token punctuation">(</span><span class="token annotation punctuation">@SpringQueryMap</span> <span class="token class-name">MessageLogDO</span> messageLogDO<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BindException</span><span class="token punctuation">;</span>\n\n\n    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/message/messageLog/update&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">ModifyResult</span> <span class="token function">updateMessageLog</span><span class="token punctuation">(</span><span class="token annotation punctuation">@SpringQueryMap</span> <span class="token class-name">MessageLogDO</span> messageLogDO<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BindException</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/message/messageLog/queryByUid/{uid}&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">MessageLogDO</span> <span class="token function">queryMessageLogByUid</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> uid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>其中<code>@FeignClient(value = &quot;aurora-message&quot;,contextId = &quot;aurora-message-messageLog&quot;)</code>的name就是service2服务的名称，contextId是一个唯一id，接口中我们的接口地址需要和service1中的地址对应，并且在feign接口中，不能使用<code>RequestMapping</code>统一定义接口地址前缀</p><p>如果service1接口中的方法参数是一个对象的话，在feign接口中，需要加上<code>@SpringQueryMap</code></p></li></ol>',11),c={},l=(0,a(83744).Z)(c,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,t,o],64)}]])}}]);