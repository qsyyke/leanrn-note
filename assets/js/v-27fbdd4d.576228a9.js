"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9599],{8086:(n,a,e)=>{e.r(a),e.d(a,{data:()=>l});const l={key:"v-27fbdd4d",path:"/spring/springcloud/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8.html",title:"Ribbon负载均衡服务调用",lang:"en-US",frontmatter:{date:"2022/1/18 12:07",tag:["spring boot","spring cloud","ribbon","微服务"]},excerpt:"",headers:[{level:2,title:"是什么",slug:"是什么",children:[]},{level:2,title:"什么是LB负载均衡(Load Balance)",slug:"什么是lb负载均衡-load-balance",children:[{level:3,title:"Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡区别",slug:"ribbon本地负载均衡客户端-vs-nginx服务端负载均衡区别",children:[]},{level:3,title:"集中式LB",slug:"集中式lb",children:[]},{level:3,title:"进程内LB",slug:"进程内lb",children:[]},{level:3,title:"案例",slug:"案例",children:[]}]},{level:2,title:"架构",slug:"架构",children:[]},{level:2,title:"依赖",slug:"依赖",children:[]},{level:2,title:"RestTemplate",slug:"resttemplate",children:[]},{level:2,title:"Ribbon核心组件IRule",slug:"ribbon核心组件irule",children:[{level:3,title:"如何替换",slug:"如何替换",children:[]}]},{level:2,title:"自定义负载均衡算法",slug:"自定义负载均衡算法",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},66236:(n,a,e)=>{e.r(a),e.d(a,{default:()=>z});var l=e(66252);const s=(0,l.uE)('<h1 id="ribbon负载均衡服务调用" tabindex="-1"><a class="header-anchor" href="#ribbon负载均衡服务调用" aria-hidden="true">#</a> Ribbon负载均衡服务调用</h1><h2 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么" aria-hidden="true">#</a> 是什么</h2><p><code>Spring Cloud Ribbon</code>是基于Netflix Ribbon实现的一套客户端<code>负载均衡的工具</code>。</p><p>简单的说，Ribbon是Netflix发布的开源项目，主要功能是提供客户端的<code>软件负载均衡算法</code>和<code>服务调用</code>。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出<code>Load Balancer</code>（简称LB）后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。</p>',4),i={href:"https://github.com/Netflix/ribbon/wiki/Getting-Started",target:"_blank",rel:"noopener noreferrer"},t=(0,l.Uk)("官网"),o=(0,l.uE)('<p>但是目前其已进入维护阶段，以后可以使用<code>Spring Cloud LoadBalancer</code>进行替换</p><h2 id="什么是lb负载均衡-load-balance" tabindex="-1"><a class="header-anchor" href="#什么是lb负载均衡-load-balance" aria-hidden="true">#</a> 什么是LB负载均衡(Load Balance)</h2><p>简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA（高可用）。 常见的负载均衡有软件Nginx，LVS，硬件 F5等。</p><h3 id="ribbon本地负载均衡客户端-vs-nginx服务端负载均衡区别" tabindex="-1"><a class="header-anchor" href="#ribbon本地负载均衡客户端-vs-nginx服务端负载均衡区别" aria-hidden="true">#</a> Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡区别</h3><ul><li><p>Nginx是服务器负载均衡，客户端所有请求都会交给nginx，然后由nginx实现转发请求。即负载均衡是由服务端实现的。</p><p>也就是说，nginx是外层，但是ribbon是内层的负载均衡</p></li><li><p>Ribbon本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。</p></li></ul>',5),c=(0,l._)("p",null,[(0,l._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220118131845402.png",data:"aurora"})],-1),r=(0,l.uE)('<p>LB负载均衡又分集中式LB和进行内LB</p><h3 id="集中式lb" tabindex="-1"><a class="header-anchor" href="#集中式lb" aria-hidden="true">#</a> 集中式LB</h3><p>即在服务的消费方和提供方之间使用独立的LB设施(可以是硬件，如F5, 也可以是软件，如nginx), 由该设施负责把访问请求通过某种策略转发至服务的提供方；</p><h3 id="进程内lb" tabindex="-1"><a class="header-anchor" href="#进程内lb" aria-hidden="true">#</a> 进程内LB</h3><p>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。</p><p>Ribbon就属于进程内LB，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。</p><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h3><p>比如我们运行着两个相同的服务，8001和8002，这两个服务都提供相同的接口调用，服务名是相同的(加入为spring-cloud-provider)</p><p>有一个服务消费者80端口，我们通过80端口(<code>http://spring-cloud-provider</code>)去调用8001和8002这两个服务提供的接口，并且设置轮训方式</p><p>那么我们不断的刷新浏览器，80端口这个消费者返回的信息，就是在8001和8002之间进行访问</p><h2 id="架构" tabindex="-1"><a class="header-anchor" href="#架构" aria-hidden="true">#</a> 架构</h2>',11),u=(0,l._)("p",null,[(0,l._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220118132431857.png",data:"aurora"})],-1),p=(0,l._)("blockquote",null,[(0,l._)("p",null,[(0,l._)("code",null,"Ribbon"),(0,l.Uk)("是在服务消费者上的，不是在服务提供者上，一定要记得，他是客户端组件")])],-1),d=(0,l._)("h2",{id:"依赖",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#依赖","aria-hidden":"true"},"#"),(0,l.Uk)(" 依赖")],-1),_=(0,l._)("p",null,[(0,l._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220118132635325.png",data:"aurora"})],-1),b=(0,l._)("p",null,"在引入eureka依赖的时候，就已经引入了",-1),k=(0,l._)("h2",{id:"resttemplate",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#resttemplate","aria-hidden":"true"},"#"),(0,l.Uk)(" RestTemplate")],-1),g=(0,l._)("p",null,"这个对象里面，我们常用的方法有两种",-1),h=(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("p",null,"返回对象为响应体中数据转化成的对象，基本上可以理解为Json"),(0,l._)("p",null,[(0,l._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220118132820429.png",data:"aurora"})])]),(0,l._)("li",null,[(0,l._)("p",null,"返回对象为ResponseEntity对象，包含了响应中的一些重要信息，比如响应头、响应状态码、响应体等"),(0,l._)("p",null,[(0,l._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220118132827565.png",data:"aurora"})])])],-1),m=(0,l._)("h2",{id:"ribbon核心组件irule",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#ribbon核心组件irule","aria-hidden":"true"},"#"),(0,l.Uk)(" Ribbon核心组件IRule")],-1),U=(0,l._)("p",null,"根据特定算法中从服务列表中选取一个要访问的服务",-1),R=(0,l._)("p",null,"比如我们使用的轮巡方式，也就是此接口的一个实现类提供的",-1),x=(0,l._)("p",null,[(0,l._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220118133135576.png",data:"aurora"})],-1),y=(0,l.uE)('<ul><li><code>com.netflix.loadbalancer.RoundRobinRule</code> 轮巡</li><li><code>com.netflix.loadbalancer.RandomRule</code> 随机</li><li><code>com.netflix.loadbalancer.RetryRule</code> 先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重试，获取可用的服务</li><li><code>WeightedResponseTimeRule</code> 对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择</li><li><code>BestAvailableRule</code> 会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务</li><li><code>AvailabilityFilteringRule </code>先过滤掉故障实例，再选择并发较小的实例</li><li><code>ZoneAvoidanceRule</code> 默认规则,复合判断server所在区域的性能和server的可用性选择服务器</li></ul><h3 id="如何替换" tabindex="-1"><a class="header-anchor" href="#如何替换" aria-hidden="true">#</a> 如何替换</h3>',2),v=(0,l._)("ol",null,[(0,l._)("li",null,[(0,l._)("p",null,"新建配置类"),(0,l._)("p",null,[(0,l._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220118133433442.png",data:"aurora"})]),(0,l._)("blockquote",null,[(0,l._)("p",null,[(0,l.Uk)("新建这个配置类的时候，一定要注意，不能够让该类被"),(0,l._)("code",null,"@ComponentScan"),(0,l.Uk)("注解扫描到，此注解在"),(0,l._)("code",null,"@SpringBootApplication"),(0,l.Uk)("注解中使用到，我们知道，在"),(0,l._)("code",null,"spring"),(0,l.Uk)("主启动类所在包及其子包中的类，都将被"),(0,l._)("code",null,"@ComponentScan"),(0,l.Uk)("扫描到，所以我们就要保证，我们新建的这个配置类，不能在主启动类所在包下及其子包下")])]),(0,l._)("p",null,[(0,l._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220118133843337.png",data:"aurora"})])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l.Uk)("在该"),(0,l._)("code",null,"MySelfRule.java"),(0,l.Uk)("中，添加以下内容")]),(0,l._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,l._)("pre",{class:"language-java"},[(0,l._)("code",null,[(0,l._)("span",{class:"token annotation punctuation"},"@Configuration"),(0,l.Uk)("\n"),(0,l._)("span",{class:"token keyword"},"public"),(0,l.Uk)(),(0,l._)("span",{class:"token keyword"},"class"),(0,l.Uk)(),(0,l._)("span",{class:"token class-name"},"MySelfRule"),(0,l.Uk)(),(0,l._)("span",{class:"token punctuation"},"{"),(0,l.Uk)("\n    "),(0,l._)("span",{class:"token annotation punctuation"},"@Bean"),(0,l.Uk)("\n    "),(0,l._)("span",{class:"token keyword"},"public"),(0,l.Uk)(),(0,l._)("span",{class:"token class-name"},"IRule"),(0,l.Uk)(),(0,l._)("span",{class:"token function"},"myRule"),(0,l._)("span",{class:"token punctuation"},"("),(0,l._)("span",{class:"token punctuation"},")"),(0,l.Uk)(),(0,l._)("span",{class:"token punctuation"},"{"),(0,l.Uk)("\n        "),(0,l._)("span",{class:"token comment"},"//return new RandomRule();"),(0,l.Uk)("\n        "),(0,l._)("span",{class:"token keyword"},"return"),(0,l.Uk)(),(0,l._)("span",{class:"token keyword"},"new"),(0,l.Uk)(),(0,l._)("span",{class:"token class-name"},"RetryRule"),(0,l._)("span",{class:"token punctuation"},"("),(0,l._)("span",{class:"token punctuation"},")"),(0,l._)("span",{class:"token punctuation"},";"),(0,l.Uk)("\n    "),(0,l._)("span",{class:"token punctuation"},"}"),(0,l.Uk)("\n"),(0,l._)("span",{class:"token punctuation"},"}"),(0,l.Uk)("\n")])]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br")])])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l.Uk)("在主启动类上，使用"),(0,l._)("code",null,"RibbonClient"),(0,l.Uk)("注解，指定负载均衡规则")]),(0,l._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,l._)("pre",{class:"language-java"},[(0,l._)("code",null,[(0,l._)("span",{class:"token annotation punctuation"},"@EnableEurekaClient"),(0,l.Uk)("\n"),(0,l._)("span",{class:"token annotation punctuation"},"@SpringBootApplication"),(0,l.Uk)("\n"),(0,l._)("span",{class:"token annotation punctuation"},"@RibbonClient"),(0,l._)("span",{class:"token punctuation"},"("),(0,l.Uk)("name "),(0,l._)("span",{class:"token operator"},"="),(0,l.Uk)(),(0,l._)("span",{class:"token string"},'"CLOUD-PAYMENT-SERVICE"'),(0,l._)("span",{class:"token punctuation"},","),(0,l.Uk)("configuration "),(0,l._)("span",{class:"token operator"},"="),(0,l.Uk)(),(0,l._)("span",{class:"token class-name"},"MySelfRule"),(0,l._)("span",{class:"token punctuation"},"."),(0,l._)("span",{class:"token keyword"},"class"),(0,l._)("span",{class:"token punctuation"},")"),(0,l.Uk)("\n"),(0,l._)("span",{class:"token keyword"},"public"),(0,l.Uk)(),(0,l._)("span",{class:"token keyword"},"class"),(0,l.Uk)(),(0,l._)("span",{class:"token class-name"},"ConsumerMain80"),(0,l.Uk)(),(0,l._)("span",{class:"token punctuation"},"{"),(0,l.Uk)("\n    "),(0,l._)("span",{class:"token keyword"},"public"),(0,l.Uk)(),(0,l._)("span",{class:"token keyword"},"static"),(0,l.Uk)(),(0,l._)("span",{class:"token keyword"},"void"),(0,l.Uk)(),(0,l._)("span",{class:"token function"},"main"),(0,l._)("span",{class:"token punctuation"},"("),(0,l._)("span",{class:"token class-name"},"String"),(0,l._)("span",{class:"token punctuation"},"["),(0,l._)("span",{class:"token punctuation"},"]"),(0,l.Uk)(" args"),(0,l._)("span",{class:"token punctuation"},")"),(0,l.Uk)(),(0,l._)("span",{class:"token punctuation"},"{"),(0,l.Uk)("\n        "),(0,l._)("span",{class:"token class-name"},"SpringApplication"),(0,l._)("span",{class:"token punctuation"},"."),(0,l._)("span",{class:"token function"},"run"),(0,l._)("span",{class:"token punctuation"},"("),(0,l._)("span",{class:"token class-name"},"ConsumerMain80"),(0,l._)("span",{class:"token punctuation"},"."),(0,l._)("span",{class:"token keyword"},"class"),(0,l._)("span",{class:"token punctuation"},","),(0,l.Uk)("args"),(0,l._)("span",{class:"token punctuation"},")"),(0,l._)("span",{class:"token punctuation"},";"),(0,l.Uk)("\n    "),(0,l._)("span",{class:"token punctuation"},"}"),(0,l.Uk)("\n"),(0,l._)("span",{class:"token punctuation"},"}"),(0,l.Uk)("\n")])]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br")])]),(0,l._)("blockquote",null,[(0,l._)("p",null,[(0,l.Uk)("这里的"),(0,l._)("code",null,"name"),(0,l.Uk)("填服务提供者的"),(0,l._)("code",null,"spring.application.name"),(0,l.Uk)("值，大写")])])]),(0,l._)("li",null,[(0,l._)("p",null,"OK")])],-1),f=(0,l._)("h2",{id:"自定义负载均衡算法",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#自定义负载均衡算法","aria-hidden":"true"},"#"),(0,l.Uk)(" 自定义负载均衡算法")],-1),B=(0,l._)("p",null,[(0,l.Uk)("我们可以参照已有的那些负载均衡算法，自己动手写一个，需要实现"),(0,l._)("code",null,"IRule"),(0,l.Uk)("接口")],-1),S={},z=(0,e(83744).Z)(S,[["render",function(n,a){const e=(0,l.up)("ExternalLinkIcon");return(0,l.wg)(),(0,l.iD)(l.HY,null,[s,(0,l._)("p",null,[(0,l._)("a",i,[t,(0,l.Wm)(e)])]),o,c,r,u,p,d,_,b,k,g,h,m,U,R,x,y,v,f,B],64)}]])}}]);