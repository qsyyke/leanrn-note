"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5701],{16449:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-25ce30ba",path:"/spring/springboot/%E6%B3%A8%E8%A7%A3.html",title:"spring boot注解",lang:"en-US",frontmatter:{tag:["springboot","spring注解"]},excerpt:"",headers:[{level:2,title:"@AutoConfigureBefore 和 @AutoConfigureAfter",slug:"autoconfigurebefore-和-autoconfigureafter",children:[]},{level:2,title:"常用参数注解",slug:"常用参数注解",children:[{level:3,title:"@PathVariable",slug:"pathvariable",children:[]},{level:3,title:"RequestHeader",slug:"requestheader",children:[]},{level:3,title:"RequestParam",slug:"requestparam",children:[]},{level:3,title:"@CookieValue",slug:"cookievalue",children:[]},{level:3,title:"@RequestBody可以获取请求体信息",slug:"requestbody可以获取请求体信息",children:[]},{level:3,title:"@RequestAttribute",slug:"requestattribute",children:[]},{level:3,title:"@MatrixVariable矩阵变量",slug:"matrixvariable矩阵变量",children:[]}]},{level:2,title:"ConditionalOnProperty",slug:"conditionalonproperty",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},96634:(n,s,a)=>{a.r(s),a.d(s,{default:()=>q});var t=a(66252);const p=(0,t.uE)('<h1 id="spring-boot注解" tabindex="-1"><a class="header-anchor" href="#spring-boot注解" aria-hidden="true">#</a> spring boot注解</h1><h2 id="autoconfigurebefore-和-autoconfigureafter" tabindex="-1"><a class="header-anchor" href="#autoconfigurebefore-和-autoconfigureafter" aria-hidden="true">#</a> @AutoConfigureBefore 和 @AutoConfigureAfter</h2><ol><li><p>@AutoConfigureBefore(AAAA.class) 或 AutoConfigureBefore({AAAA.class, BBBB.class})</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@AutoConfigureBefore</span><span class="token punctuation">(</span>AAAA<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> CCCC <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>CCCC将会在AAAA类之前加载</p></li><li><p>@AutoConfigureAfter(AAAA.class) 或 AutoConfigureAfter({AAAA.class, BBBB.class})</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span>AAAA<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> CCCC <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>说明 CCCC 将会在 AAAA 之后加载</p></li></ol><h2 id="常用参数注解" tabindex="-1"><a class="header-anchor" href="#常用参数注解" aria-hidden="true">#</a> 常用参数注解</h2><p>常用的用于接收参数的注解有：</p><ul><li>@PathVariable 搭配rest风格使用</li><li>RequestHeader 获取请求头信息</li><li>RequestParam 获取参数信息(?name=chuchen....)</li><li>CookieValue 获取cookie信息</li><li>@RequestBody 获取请求体信息</li></ul><h3 id="pathvariable" tabindex="-1"><a class="header-anchor" href="#pathvariable" aria-hidden="true">#</a> @PathVariable</h3><p><code>@GetMapping(&quot;/car/{id}/owner/{username}&quot;)</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span>\n<span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span>\n<span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> pvs<span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>能够获取到id和username值，这里如果方法参数是一个<code>Map&lt;String,String&gt;</code>，那么能够将所有的值，都放入Map集合中</p><p>请求测试</p><p><code>http://localhost:8080/car/13/owner/chuchen</code></p>',12),e=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210703085549936.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),o=(0,t.uE)('<h3 id="requestheader" tabindex="-1"><a class="header-anchor" href="#requestheader" aria-hidden="true">#</a> RequestHeader</h3><p>能够获取到请求头的信息</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> <span class="token class-name">User_Agent</span><span class="token punctuation">,</span>\n<span class="token annotation punctuation">@RequestHeader</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mapHeader<span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果参数是一个<code>Map&lt;String,String&gt;</code>，同样会将所有的请求头信息放入map中</p>',4),c=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210703085730953.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),l=(0,t.uE)('<h3 id="requestparam" tabindex="-1"><a class="header-anchor" href="#requestparam" aria-hidden="true">#</a> RequestParam</h3><p>获取请求参数</p><p><code>http://localhost:8080/car/13/owner/chuchen?age=34&amp;interest=coding&amp;interest=com&amp;interest=video</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span>\n<span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paramMap<span class="token punctuation">,</span>\n<span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> interest\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>结果</p>',5),u=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210703085903464.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),i=(0,t._)("p",null,"但是这里，interest有多个值，我们如果使用Map<String,String>接收所有的参数，那么此map中，只会存入一个interest，并且是第一个",-1),r=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210703084657385.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),k=(0,t.uE)('<h3 id="cookievalue" tabindex="-1"><a class="header-anchor" href="#cookievalue" aria-hidden="true">#</a> @CookieValue</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span><span class="token string">&quot;Webstorm-2fb3dfc7&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> <span class="token class-name">Webstorm_2fb3dfc7</span><span class="token punctuation">,</span>\n<span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span><span class="token string">&quot;Webstorm-2fb3dfc7&quot;</span><span class="token punctuation">)</span><span class="token class-name">Cookie</span> cookie\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>结果</p>',3),d=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210703090152638.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),b=(0,t.uE)('<p><code>@CookieValue(&quot;Webstorm-2fb3dfc7&quot;)Cookie cookie</code>会将Webstorm-2fb3dfc7的cookie赋值给Cookie对象，通过这个对象可以获取到所有Webstorm-2fb3dfc7的cookie信息</p><h3 id="requestbody可以获取请求体信息" tabindex="-1"><a class="header-anchor" href="#requestbody可以获取请求体信息" aria-hidden="true">#</a> @RequestBody可以获取请求体信息</h3><p>但是此请求必须是post请求，因为只有post才有请求体</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> content\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>http://localhost:8080/car/13/owner/chuchen?age=34&amp;interest=coding&amp;interest=com&amp;interest=video</p><p>返回</p><p>age=34&amp;interest=coding&amp;interest=com&amp;interest=video</p><h3 id="requestattribute" tabindex="-1"><a class="header-anchor" href="#requestattribute" aria-hidden="true">#</a> @RequestAttribute</h3><p>从注解可以获取到request中的setAttribute()的值</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/goto&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">gotoGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;chuchen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;forward:/success&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@ResponseBody</span>\n<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/success&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">gotoGet</span><span class="token punctuation">(</span>\n    <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>\n    <span class="token annotation punctuation">@RequestAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> msg<span class="token punctuation">,</span>\n    <span class="token annotation punctuation">@RequestAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> code\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> map<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>运行结果</p>',11),m=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210703092518625.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),g=(0,t.uE)('<h3 id="matrixvariable矩阵变量" tabindex="-1"><a class="header-anchor" href="#matrixvariable矩阵变量" aria-hidden="true">#</a> @MatrixVariable矩阵变量</h3><p>矩阵变量的使用主要是在，当用户禁用cookie之后，通过矩阵变量的方式获取cookie</p><p>其参数传递像下面这样</p><p><code>http://localhost:8080/cars/sell;low=34;brand=byd,audi,yd</code></p><p>使用<code>;</code>进行分割开，如果一个参数，对应着多个值的话，那么可以使用<code>,or:</code>，如上面的brand，可以写成</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>brand<span class="token operator">=</span>byd<span class="token punctuation">,</span>audi<span class="token punctuation">,</span>yd\nbrand<span class="token operator">=</span>byd<span class="token operator">:</span>audi<span class="token operator">:</span>yd\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// /cars/sell;low=34;brand=byd,audi,yd</span>\n<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/cars/{path}&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">carsSell</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span><span class="token string">&quot;low&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> low<span class="token punctuation">,</span>\n                    <span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span><span class="token string">&quot;brand&quot;</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> brand<span class="token punctuation">,</span>\n                    <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;low&quot;</span><span class="token punctuation">,</span>low<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;brand&quot;</span><span class="token punctuation">,</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> map<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>运行结果</p>',8),h=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210703102309877.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),v=(0,t.uE)('<p><code>@GetMapping(&quot;/cars/{path}&quot;)</code>不能直接写成<code>@GetMapping(&quot;/cars/sell&quot;)</code>这样的话，会获取不到的，必须使用<code>{名称}</code></p><p>在默认情况下，springboot是禁用矩阵变量的，也就是禁用分号<code>;</code>功能，如果没有将<code>removeSemicolonContent</code>设置为false，那么访问的时候，就会报错</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span></span>MissingMatrixVariableException</span><span class="token operator">:</span> <span class="token class-name">Required</span> matrix variable <span class="token char">&#39;low&#39;</span> <span class="token keyword">for</span> method parameter type <span class="token class-name">Integer</span> is not present\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在<code>WebMvcAutoConfiguration</code>类中的方法中，可以看到这个设置</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configurePathMatch</span><span class="token punctuation">(</span><span class="token class-name">PathMatchConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getPathmatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">getMatchingStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">WebMvcProperties<span class="token punctuation">.</span>MatchingStrategy</span><span class="token punctuation">.</span>PATH_PATTERN_PARSER<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        configurer<span class="token punctuation">.</span><span class="token function">setPatternParser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathPatternParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    configurer<span class="token punctuation">.</span><span class="token function">setUseSuffixPatternMatch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getPathmatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isUseSuffixPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    configurer<span class="token punctuation">.</span><span class="token function">setUseRegisteredSuffixPatternMatch</span><span class="token punctuation">(</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getPathmatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isUseRegisteredSuffixPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>dispatcherServletPath<span class="token punctuation">.</span><span class="token function">ifAvailable</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dispatcherPath<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> servletUrlMapping <span class="token operator">=</span> dispatcherPath<span class="token punctuation">.</span><span class="token function">getServletUrlMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>servletUrlMapping<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">singleDispatcherServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">UrlPathHelper</span> urlPathHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlPathHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            urlPathHelper<span class="token punctuation">.</span><span class="token function">setAlwaysUseFullPath</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            configurer<span class="token punctuation">.</span><span class="token function">setUrlPathHelper</span><span class="token punctuation">(</span>urlPathHelper<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><code>UrlPathHelper urlPathHelper = new UrlPathHelper()</code>此对象中，有一个<code>setRemoveSemicolonContent(boolean removeSemicolonContent)</code>方法，就是设置这个分号功能，将此值设置为false就可以了</p><p>设置这个，涉及到之前将的springmvc定制功能，可以使用两种方式</p><p>第一种</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token function">webMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> configurePathMatch <span class="token punctuation">(</span><span class="token class-name">PathMatchConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">UrlPathHelper</span> helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlPathHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            helper<span class="token punctuation">.</span><span class="token function">setRemoveSemicolonContent</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            configurer<span class="token punctuation">.</span><span class="token function">setUrlPathHelper</span><span class="token punctuation">(</span>helper<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>第二种方式就是让此配置文件，实现<code>WebMvcConfigurer</code>接口，并且重写<code>configurePathMatch (PathMatchConfigurer configurer)</code>方法</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> configurePathMatch <span class="token punctuation">(</span><span class="token class-name">PathMatchConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">UrlPathHelper</span> helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlPathHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    helper<span class="token punctuation">.</span><span class="token function">setRemoveSemicolonContent</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    configurer<span class="token punctuation">.</span><span class="token function">setUrlPathHelper</span><span class="token punctuation">(</span>helper<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>通过这两种方法中的其中一种，便可以解决这个问题</p><h4 id="参数重复问题" tabindex="-1"><a class="header-anchor" href="#参数重复问题" aria-hidden="true">#</a> 参数重复问题</h4><p>但是如果参数重复，像这样的url<code>/boss/1;age=20/2;age=10</code>，那在获取的时候，就需要指定哪个得到哪个值</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/boss/{bossId}/{empId}&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">boss</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span>pathVar <span class="token operator">=</span> <span class="token string">&quot;bossId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> bossAge<span class="token punctuation">,</span>\n                <span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span>pathVar <span class="token operator">=</span> <span class="token string">&quot;empId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> empAge<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;bossAge&quot;</span><span class="token punctuation">,</span>bossAge<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;empAge&quot;</span><span class="token punctuation">,</span>empAge<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> map<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="conditionalonproperty" tabindex="-1"><a class="header-anchor" href="#conditionalonproperty" aria-hidden="true">#</a> ConditionalOnProperty</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;spring.datasource.druid.stat-view-servlet.enabled&quot;</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>此注解就是和配置文件绑定，name就是配置文件中的k，havingValue就是，只有当配置文件中的spring.datasource.druid.stat-view-servlet.enabled = havingValue时，才会加载的</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">spring.datasource.druid.stat-view-servlet.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true # 只有这样才会加载</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',19),f={},q=(0,a(83744).Z)(f,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,e,o,c,l,u,i,r,k,d,b,m,g,h,v],64)}]])}}]);