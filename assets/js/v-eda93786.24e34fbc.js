"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[769],{26691:(s,a,n)=>{n.r(a),n.d(a,{data:()=>t});const t={key:"v-eda93786",path:"/maven/",title:"maven使用介绍",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"能做什么？",slug:"能做什么",children:[]},{level:2,title:"maven构建项目过程",slug:"maven构建项目过程",children:[]},{level:2,title:"核心概念",slug:"核心概念",children:[]},{level:2,title:"安装",slug:"安装",children:[]},{level:2,title:"约定目录结构",slug:"约定目录结构",children:[{level:3,title:"执行一个maven项目",slug:"执行一个maven项目",children:[]}]},{level:2,title:"修改本地仓库位置",slug:"修改本地仓库位置",children:[]},{level:2,title:"仓库",slug:"仓库",children:[{level:3,title:"仓库中存放的是什么",slug:"仓库中存放的是什么",children:[]},{level:3,title:"仓库的类别",slug:"仓库的类别",children:[]}]},{level:2,title:"pom",slug:"pom",children:[]},{level:2,title:"junit工具",slug:"junit工具",children:[]},{level:2,title:"基本命令",slug:"基本命令",children:[]},{level:2,title:"使用maven窗口",slug:"使用maven窗口",children:[]},{level:2,title:"新建一个web",slug:"新建一个web",children:[]},{level:2,title:"将自己的web项目使用原生Tomcat进行部署",slug:"将自己的web项目使用原生tomcat进行部署",children:[]},{level:2,title:"如果本地仓库中没有这个jar包，何时进行下载",slug:"如果本地仓库中没有这个jar包-何时进行下载",children:[]},{level:2,title:"指定资源位置",slug:"指定资源位置",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},34644:(s,a,n)=>{n.r(a),n.d(a,{default:()=>Ms});var t=n(66252);const p=(0,t.uE)('<h1 id="maven使用介绍" tabindex="-1"><a class="header-anchor" href="#maven使用介绍" aria-hidden="true">#</a> maven使用介绍</h1><ul><li><p>什么是依赖？</p><blockquote><p>比如一个a.java其中的部分功能需要使用到b.java这个类，那么运行a.java就必须要有b.java，并b.java导入到a.java中</p></blockquote><p>在jar中也是一样的，a.jar的运行需要使用到b.jar这个包，那么我们在c.java程序中使用a.jar包时，就必须先将b.jar包下载下来，并这个jar包导入，才可以运行a.jar</p><p>如果是传统的方式进行依赖的解决过程，那么就会花费大量的时间去进行这件事，所以这个时候就有了<code>maven</code>的出现，可以解决依赖</p></li></ul><h2 id="能做什么" tabindex="-1"><a class="header-anchor" href="#能做什么" aria-hidden="true">#</a> 能做什么？</h2><blockquote><ol><li>maven可以管理jar文件</li><li>自动下载jar和他的文档，源代码</li><li>管理jar直接的依赖，a.jar需要b.jar，maven会自动下载b.jar</li><li>管理你需要的jar版本</li><li>帮你编译程序，把java编译为class</li><li>帮你测试你的代码是否正确。</li><li>帮你打包文件，形成jar文件，或者war文件</li><li>帮你部署项目</li></ol></blockquote><p>所以，maven这个工具是真的特别的强大</p><ul><li><p>相似工具</p><blockquote><p>类似自动化构建工具还有：Ant, Maven, Gradle。</p></blockquote></li></ul><h2 id="maven构建项目过程" tabindex="-1"><a class="header-anchor" href="#maven构建项目过程" aria-hidden="true">#</a> maven构建项目过程</h2><blockquote><p>构建过程中的各个环节：清理、编译、测试、报告、打包、安装、部署。</p></blockquote><p>构建（build），是面向过程的(从开始到结尾的多个步骤，涉及到多个环节的协同工作。</p><ul><li><p>构建过程的几个主要环节</p><blockquote><ol><li><p>清理：删除以前的编译结果，为重新编译做好准备。</p></li><li><p>编译：将Java源程序编译为字节码文件。</p><ul><li><code>maven一次性可以编译成千上万个java程序，但是javac就只能编译一个，一次</code></li></ul><p>​ 这个过程是批量的，maven可以同时把成千上百的文件编译为class。</p></li><li><p>测试：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性\\</p><ul><li>maven可以执行测试程序代码，验证你的功能是否正确。</li><li>批量的，maven同时执行多个测试代码，同时测试很多功能。</li></ul></li><li><p>报告：在每一次测试后以标准的格式记录和展示测试结果。</p><p>编译运行测试的结果，会有一个返回</p></li><li><p>打包：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java 工程对应 jar 包，Web工程对应war包。</p></li><li><p>安装：在Maven环境下特指将打包的结果——jar包或war包安装到本地仓库中。</p><p>这个过程是将5中的打包文件安装到本地仓库</p></li><li><p>部署：将打包的结果部署到远程仓库或将war包部署到服务器上运行</p></li></ol></blockquote></li></ul><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念" aria-hidden="true">#</a> 核心概念</h2><p>Maven能够实现自动化构建是和它的内部原理分不开的，这里我们从 Maven的九个核心概念入手，</p><p>看看Maven是如何实现自动化构建的</p><ol><li><p>POM</p><p>这是一个文件<code>pom.xml</code>maven把一个项目当做一个模型使用。控制maven构建项目的过程，管理jar依赖。</p></li><li><p>约定的目录结构：maven项目的目录和文件的位置都是规定的。</p></li><li><p>坐标： 是一个唯一的字符串，用来表示资源的。</p></li><li><p>依赖管理：管理你的项目可以使用jar文件</p></li><li><p>仓库管理：你的资源存放的位置</p></li><li><p>生命周期：maven工具构建项目的过程，就是生命周期。</p></li><li><p>插件和目标：执行maven构建的时候用的工具是插件</p></li><li><p>继承</p></li><li><p>聚合</p></li></ol><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p><code>maven</code>的使用也是有命令行的，但是命令行一般特别难记，在idea中使用maven就会变得特别的容易</p><p>其本身是使用java进行编写的，所以在使用maven的时候，必须要确保安装了java，并且设置环境变量了</p><blockquote><p><code>maven</code>同样也是需要配置环境变量，方法和java的一样，只需要将<code>bin</code>之前的目录添加到环境中，然后使用<code>%...%/bin</code></p></blockquote>',18),e=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210315193220348.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),l=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210315193255215.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),c=(0,t._)("blockquote",null,[(0,t._)("p",null,[(0,t.Uk)("使用命令"),(0,t._)("code",null,"mvn -v"),(0,t.Uk)("就可以查看是否成功安装了maven")])],-1),o=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210315193337158.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),i=(0,t.uE)('<h2 id="约定目录结构" tabindex="-1"><a class="header-anchor" href="#约定目录结构" aria-hidden="true">#</a> 约定目录结构</h2><p>这是一种规范，我们必须要遵守，但是可以打破，特别不建议这样使用</p><p>假如，我们现在正在写一个项目(<code>chuchen</code>)，其项目结构为</p><blockquote><p>chuchen(项目名)</p><p>|---src(根目录)</p><p>|---|---main</p><p>|---|---|---java</p><p>|---|---|---resources</p><p>|---|---test</p><p>|---|---|---java</p><p>|---|---|---resources</p><p>|---pom.xml</p></blockquote><p>main目录中放置的程序是我们真正需要使用到的，就是核心的代码，main目录下的<code>resouces</code>目录中存放的是需要的配置文件，比如<code>xml,properties</code>等所有的配置文件，都必须放在此目录中</p><p>java目录放置我们的代码</p><p>test目录和main是同级的，这个目录下放置的就是我们的测试程序，但是这个目录是可有可无的</p><p>一个maven项目，必须要有<code>pom.xml</code>这个文件</p><h3 id="执行一个maven项目" tabindex="-1"><a class="header-anchor" href="#执行一个maven项目" aria-hidden="true">#</a> 执行一个maven项目</h3><p>在本地新建一个目录，其目录为，使用cmd命令<code>tree 文件名可以查看此目录的结构</code></p><blockquote><p>└─hello └─src ├─main │ ├─java │ │ └─com │ │ └─chu │ └─resources └─test ├─java │ └─com │ └─chu └─resources</p></blockquote><p>当写了一个程序之后，进入到<code>hello</code>目录中，运行命令<code>mvn compile</code>就可以编译，运行此命令的时候，编译的是<code>main</code>，会在src目录中创建一个<code>target</code>目录，编译<code>mvn compile</code>会main目录中的java程序编译之后，放在<code>target</code>中，</p><ul><li><p>问题</p><p>如果执行<code>mvn compile</code>，如果没有指定jdk的版本的话，那么就会报错，出现这种情况的原因是因为，默认maven使用的是低版本的jdk，但是我使用的是13，所以就出现了这个问题，</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> 不再支持源选项 <span class="token number">5</span>。请使用 <span class="token number">7</span> 或更高版本。\n<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> 不再支持目标选项 <span class="token number">5</span>。请使用 <span class="token number">7</span> 或更高版本。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>解决方式</p><ol><li><p>在<code>pom.xml</code>文件中，指明使用的jdk版本</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>方式二：(网络上)</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>  \n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>jdk-13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>  \n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">&gt;</span></span>  \n         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>  \n         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">&gt;</span></span>13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">&gt;</span></span>  \n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>\n         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>\n         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>  \n         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span> \n\t\t <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">&gt;</span></span>13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">&gt;</span></span> \n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>   \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span>  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ol></li></ul><p>​ 正常的时候，第一次使用maven，执行<code>mvn compile</code>会出现下载文件的过程，但是我在执行的时候，并没有这个过程</p>',14),r=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210315205354224.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),u=(0,t._)("p",null,"像这样",-1),g=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("p",null,"为什么会出现下载？"),(0,t._)("p",null,"maven工具执行的操作需要很多插件（java类--jar文件）完成的")]),(0,t._)("li",null,[(0,t._)("p",null,"下载什么东西了 jar文件--叫做插件--插件是完成某些功能")]),(0,t._)("li",null,[(0,t._)("p",null,"下载的这些东西会存放在仓库中，仓库的默认位置为"),(0,t._)("blockquote",null,[(0,t._)("p",null,"C:\\Users\\（登录操作系统的用户名）Administrator.m2\\repository")])])],-1),d=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210315205550660.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),m=(0,t._)("p",null,"当执行一个maven程序的时候，无论是否编译成功，都会返回一个结果，有成功，有失败",-1),k=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210315200503914.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),b=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210315205651274.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),v=(0,t.uE)('<h2 id="修改本地仓库位置" tabindex="-1"><a class="header-anchor" href="#修改本地仓库位置" aria-hidden="true">#</a> 修改本地仓库位置</h2><ol><li>先备份<code>conf setting.xml</code>文件</li><li>修改<code>&lt;localRepository&gt;D:\\other\\mavenwarm&lt;/localRepository&gt;</code>，将这个值修改为想要存放的位置</li></ol><p>这样配置之后，之后下载的东西都不会存放在C盘中，会存放在设置的这个文件中</p><p>如果修改仓库地址之后，再次执行<code>mvn compile</code>，就会重新下载东西</p>',4),h=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210315211116448.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),x=(0,t.uE)('<h2 id="仓库" tabindex="-1"><a class="header-anchor" href="#仓库" aria-hidden="true">#</a> 仓库</h2><p>现在我们对maven工程有一个大概的认识了，那现在思考一个问题，maven怎么就这么神奇，我们写完的工</p><p>程交给他之后，他就能够自动帮我们管理，我们依赖的jar包它从哪儿获取呢？有同学说已经安装了，在它的安装</p><p>包里啊，大家可以看一下maven下载下来才8M，我们需要的jar包有时候都几百兆甚至几个G，它从哪儿弄去呢？</p><p>其实，maven有仓库的概念。在Maven中，任何一个依赖、插件或者项目构建的输出，都可以称之为构件。Maven</p><p>核心程序仅仅定义了自动化构建项目的生命周期，但具体的构建工作是由特定的构件完成的。而且为了提高构建</p><p>的效率和构件复用，maven把所有的构件统一存储在某一个位置，这个位置就叫做仓库。</p><p>仓库就是我们每次在编译的时候，maven会从网络上进行下载，比如那些jar包，并且将这些下载的jar包放在我们在配置的<code>&lt;localRepository&gt;D:\\other\\mavenwarm&lt;/localRepository&gt;</code>中，如果我们下次程序使用<code>mvn compile</code>的时候，并且java中的jar包没有进行多余的其他，那么就不会再进行下载，编译的时间就会非常的快</p><p>如果还有其他的jar包需要使用，那么就会再次进行下载，那些已经存在的jar包就不会再次进行下载</p><p><code>每一个mvn compile</code>都会先从本地仓库中查找需要的jar包是否存在，如果没有存在，就进行下载</p><h3 id="仓库中存放的是什么" tabindex="-1"><a class="header-anchor" href="#仓库中存放的是什么" aria-hidden="true">#</a> 仓库中存放的是什么</h3><ol><li><p>Maven 的插件，插件也是一些 jar，这些 jar 可以完成一定的功能。</p></li><li><p>我们自己开发项目的模块</p></li><li><p>第三方框架或工具的 jar 包</p></li></ol><h3 id="仓库的类别" tabindex="-1"><a class="header-anchor" href="#仓库的类别" aria-hidden="true">#</a> 仓库的类别</h3><p>根据仓库存储的位置，把仓库分为本地仓库和远程仓库。</p><ul><li>本地仓库</li></ul><p><strong>本地仓库</strong>，存在于当前电脑上,默认存放在~.m2\\repository中,为本机上所有的Maven工程服务。你也可以</p><p>通过Maven的配置文件Maven_home/conf/settings.xml中修改本地仓库所在的目录。</p><p>~ 是用户的主目录，windows系统中是 c：/user/登录系统的用户名</p><ul><li>远程仓库</li></ul><p><strong>远程仓库</strong>，分为为全世界范围内的开发人员提供服务的中央仓库、为全世界范围内某些特定的用户提供服务的、</p><ul><li><p>私服仓库</p><p>为本公司提供服务自己架设的私服，只能存在于局域网中，外部人员不能使用，只能公司内部使用</p></li><li><p>中央镜像仓库</p></li></ul><p>中央仓库是maven默认的远程仓库，其地址</p><p>是:http://repo.maven.apache.org/maven2/</p><p>中央仓库，包含了绝大多数流行的开源Java构件，以及源码、作者信息、许可证信息等。一般来说，简单的</p><p>Java项目依赖的构件都可以在这里下载得到。</p><p>私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务，私服代理广域网上的远程仓库，供局域网内的</p><p>Maven用户使用。当Maven需要下载构件的时候，它从私服请求，如果私服上不存在该构件，则从外部的远程仓</p><p>库下载，缓存在私服上之后，再为Maven的下载请求提供服务。我们还可以把一些无法从外部仓库下载到的构件</p><p>上传到私服上。</p><ul><li><p>分类说明：</p><blockquote><ol><li><p>本地仓库：本机当前电脑上的资源存储位置，为本机上所有 Maven工程提供服务</p></li><li><p>远程仓库：不在本机上， 通过网络才能使用。多电脑共享使用的。</p></li><li><p>中央仓库：通过Internet访问，为全世界所有 Maven工程服务。 最权威的。</p></li><li><p>中央仓库的镜像：架设在不同位置，欧洲，美洲，亚洲等每个洲都有若干的服务器，为中央仓库分担流量。减轻中央仓库的访问，下载的压力。所在洲的用户首先访问的是本洲的镜像服务器。</p></li><li><p>私服：在局域网环境中部署的服务器，为当前局域网范围内的所有 Maven工程服务。公司中常常使用这种方式。</p></li></ol></blockquote></li></ul>',30),y=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210315213913248.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),_=(0,t.uE)('<p>其路径为</p><p><code>本地仓库---&gt; 私服 ---&gt; 镜像 ---&gt; 中央仓库</code></p><p>也就是说，如果我们需要的一个jar包，在本地没有，那么就会在私服上进行查找(有私服的情况)，如果私服上也没有，那么就会向镜像上进行查找，如果这个也没有，则会到中央仓库中进行查找，如果中央仓库中也没有，则说明你的地址写错了</p><p>如果在中央仓库中找到，那么就会在镜像中备份一分，在私服中备份一份(有的情况)，保存到本地中，这样能够保证下次直接在本地就可以使用</p><h2 id="pom" tabindex="-1"><a class="header-anchor" href="#pom" aria-hidden="true">#</a> pom</h2><p>即 Project Object Model 项目对象模型。Maven 把一个项目的结构和内容抽象成一个模型，在 xml 文件中进行声明，以方便进行构建和描述，pom.xml 是 Maven 的灵魂。所以，maven 环境搭建好之后，所有的学习和操作都是关于 pom.xml 的。</p><table><thead><tr><th>modelVersion</th><th>Maven 模型的版本，对于 Maven2 和 Maven3 来说，它只能是 4.0.0</th><th></th></tr></thead><tbody><tr><td>groupId</td><td>组织 id，一般是公司域名的倒写。 格式可以为：1. 域名倒写。 例如 com.baidu 2. 域名倒写+项目名。例如 com.baidu.appolo</td><td>groupId artifactIdversion 三个元素</td></tr><tr><td>artifactId</td><td>项目名称，也是模块名称，对应 groupId 中 项目中的子项目。</td><td></td></tr><tr><td>version</td><td>项目的版本号。如果项目还在开发中，是不稳定版本，通常在版本后带-SNAPSHOT version 使用三位数字标识，例如 1.1.0</td><td></td></tr><tr><td>packaging</td><td>项目打包的类型，可以使 jar、war、rar、ear、pom，默认是 jar</td><td></td></tr></tbody></table>',7),j=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210315215810293.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),z=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210315215829760.png?x-oss-process=style/pictureProcess1",data:"aurora"}),(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210315215847211.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),f=(0,t.uE)('<ul><li><p><code>&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</code></p><p>这个值是一个固定的值，目前就只有4.0</p></li><li><p><code>groupId </code></p><p>一般是公司域名的倒写，可以加上项目名</p></li><li><p><code>artifactId</code></p><p>是项目名，对应<code>groupId </code>的子项目名</p></li></ul><p>如</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;groupId&gt;com.chu.hello&lt;/groupId&gt;\n&lt;artifactId&gt;hello&lt;/artifactId&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><p><code>version </code></p><p>版本号，项目的版本号。如果项目还在开发中，是不稳定版本，通常在版本后带-SNAPSHOT，version 使用三位数字标识，例如 1.1.0</p></li></ul><blockquote><p><code>groupId ，artifactId，version</code>称为坐标，通过这三个值，可以在互联网上唯一标识一个jar包</p></blockquote><p>中央仓库地址</p><p>https://mvnrepository.com/ 搜索使用的中央仓库， 使用groupId 或者 artifactId作为搜索条件</p><ul><li><p><code>packaging </code></p><p>可以指定我们这个项目会被打包成jar格式还是war格式，默认是jar格式</p></li><li><p><code>dependencies和dependency</code>这两个是一个使用的，配置项目所需的依赖包</p><p>比如我们要使用mysql的驱动</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p><code>properties</code></p><p>properties 是 用 来 定 义 一 些 配 置 属 性 的 ， 例 如project.build.sourceEncoding（项目构建源码编码方式），可以设置为UTF-8，防止中文乱码，也可定义相关构建版本号，便于日后统一升级</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p><code>build </code></p><p>build 表示与构建相关的配置，例如设置编译插件的 jdk 版本</p></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;project xmlns = &quot;http://maven.apache.org/POM/4.0.0&quot;\n    xmlns:xsi = &quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xsi:schemaLocation = &quot;http://maven.apache.org/POM/4.0.0\n    http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n \n    &lt;!-- 模型版本 --&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;\n    &lt;groupId&gt;com.companyname.project-group&lt;/groupId&gt;\n \n    &lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;\n    &lt;artifactId&gt;project&lt;/artifactId&gt;\n \n    &lt;!-- 版本号 --&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n&lt;/project&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h1 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h1><p>Maven 构建生命周期定义了一个项目构建跟发布的过程。</p><p>一个典型的 Maven 构建（build）生命周期是由以下几个阶段的序列组成的：</p><p>、</p>',13),P=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210316220152028.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),S=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210316220310236.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),U=(0,t.uE)('<h2 id="junit工具" tabindex="-1"><a class="header-anchor" href="#junit工具" aria-hidden="true">#</a> junit工具</h2><p>这个工具就是用来测试方法是否能够执行，就是在方法的注解上加入<code>@Test</code></p><p>但是使用这个工具需要满足下面的几点</p><blockquote><ol><li><p>需要导入依赖</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>方法必须是<code>public</code>修饰的</p></li><li><p>方法没有返回值，也就是方法是<code>void</code></p></li></ol></blockquote><h2 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令" aria-hidden="true">#</a> 基本命令</h2>',5),I=(0,t._)("ol",null,[(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("code",null,"mvn clean")]),(0,t._)("p",null,"这个命令可以清楚在此之前编译的文件，当执行这个命令的时候，是由"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210316223025101.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("p",null,"这个插件完成的，所以，如果没有这个插件的话，会进行下载"),(0,t._)("p",null,"当执行的时候，会"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210316223107058.png?x-oss-process=style/pictureProcess1",data:"aurora"})])]),(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("code",null,"mvn compile")]),(0,t._)("p",null,[(0,t.Uk)("当执行这个命令的时候，如果没有其他的依赖需要进行下载的话，那么这个命令会使用两个插件，此命令编译的是"),(0,t._)("code",null,"main"),(0,t.Uk)("中的程序")]),(0,t._)("p",null,[(0,t.Uk)("首先就是"),(0,t._)("code",null,"maven-resources-plugin:"),(0,t.Uk)("此命令会去将main包中的resources目录中的文件，复制到")]),(0,t._)("p",null,[(0,t._)("code",null,"target\\classes"),(0,t.Uk)("目录中，也就是这个命令是用来执行配置文件的")]),(0,t._)("p",null,[(0,t._)("code",null,"maven-compiler-plugin"),(0,t.Uk)("此命令是用来进行编译，会将编译的字节码文件放入到相应的包中")]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210316223756128.png?x-oss-process=style/pictureProcess1",data:"aurora"})])]),(0,t._)("li",null,[(0,t._)("p",null,[(0,t.Uk)("编译测试"),(0,t._)("code",null,"test"),(0,t.Uk)("文件，执行命令"),(0,t._)("code",null,"mvn test-compile")]),(0,t._)("p",null,[(0,t.Uk)("因为测试目录中，同样有"),(0,t._)("code",null,"resources"),(0,t.Uk)("，所以"),(0,t._)("code",null," maven-resources-plugin:"),(0,t.Uk)("插件会被使用")]),(0,t._)("p",null,[(0,t.Uk)("编译插件"),(0,t._)("code",null,"maven-compiler-plugin:"),(0,t.Uk)("也会被使用")])]),(0,t._)("li",null,[(0,t._)("p",null,[(0,t.Uk)("运行测试文件，使用命令"),(0,t._)("code",null,"mvn test")]),(0,t._)("p",null,"此命令执行的是编译的测试的程序，因为maven的声明周期为：验证，编译，测试"),(0,t._)("p",null,[(0,t.Uk)("我们现在执行的"),(0,t._)("code",null,"mvn test"),(0,t.Uk)("就处于测试阶段，所以当我们执行这个命令的时候，其前面的验证，编译也会进行，所以当我们修改测试类中的代码的时候，我们不用先进行编译，在执行"),(0,t._)("code",null,"mvn test"),(0,t.Uk)("，因为这个命令就会执行编译")]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210316230154740.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210316230614087.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("p",null,"执行两个，有一个执行出错"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210316230759120.png?x-oss-process=style/pictureProcess1",data:"aurora"})])]),(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("code",null,"mvn package"),(0,t.Uk)("打包命令")]),(0,t._)("p",null,[(0,t.Uk)("此命令会将main目录中的程序进行打包，被打包成什么文件，是由"),(0,t._)("code",null,"pom.xml"),(0,t.Uk)("文件进行指定的，默认是jar，如果执行成功，那么会将打包成的这个jar包放在"),(0,t._)("code",null,"target目录中"),(0,t.Uk)("，")]),(0,t._)("blockquote",null,[(0,t._)("p",null,[(0,t._)("code",null,"如果执行此命令的时候，测试类中的程序有至少一个发生了错误，那么这个打包命令就不能执行，会报错")]),(0,t._)("p",null,[(0,t.Uk)("打包命令使用的插件为"),(0,t._)("code",null,"maven-jar-plugin:2.4:jar")])]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210316231953592.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210316232128213.png?x-oss-process=style/pictureProcess1",data:"aurora"})])])],-1),q=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("code",null,"mvn install"),(0,t.Uk)("安装命令，执行此命令的时候，会将打包的文件，放入到本地仓库中，相应的，以为mvn的声明周期，当执行此命令的时候，会将前几个周期都执行")]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210316233007160.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("p",null,[(0,t.Uk)("如果配置文件中的"),(0,t._)("code",null,"<groupId>vipblogs.cn.hello</groupId>"),(0,t.Uk)("，是通过"),(0,t._)("code",null,"."),(0,t.Uk)("进行隔开的，那么会在仓库中生成由"),(0,t._)("code",null,"."),(0,t.Uk)("分割开的目录")]),(0,t._)("p",null,"想要在本地仓库中去找这个jar包的话，就去后面的那个地址中进行查找"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210316233310877.png?x-oss-process=style/pictureProcess1",data:"aurora"})])])],-1),w=(0,t.uE)('<p>在另外的程序中，使用安装到本地的jar包</p><ol><li><p>首先需要导入依赖，这个依赖就是我们<code>pom.xml</code>中定义的坐标</p><p>因为坐标都是全球唯一的，所以可以通过这个依赖查找到哪个jar</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>  &lt;groupId&gt;vipblogs.cn.hello&lt;/groupId&gt;\n  &lt;artifactId&gt;chuchen&lt;/artifactId&gt;\n  &lt;version&gt;1.0-0&lt;/version&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><h1 id="idea中使用maven" tabindex="-1"><a class="header-anchor" href="#idea中使用maven" aria-hidden="true">#</a> idea中使用maven</h1><p>因为默认idea中会有内置的maven配置，但是一般不使用idea默认的，以为修改配置会特别麻烦</p><p>手动配置需要修改maven安装目录，<code>setting.xml</code>文件的位置</p><p>仓库位置</p>',6),M=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317081911224.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),E=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317082547065.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),T=(0,t._)("p",null,"设置此选项的目的，就是创建maven项目的时候，会联网进行模板文件的下载，添加此选项可以不用进行下载，会节省很大声的工程加载时间",-1),R=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("p",null,"除了上面的配置之外，还需要进行设置"),(0,t._)("p",null,"新建或者打开项目，由于每次项目中使用的是默认设置，这个默认设置会使得每次新建项目都会重新配置maven。 要想解决每次都去重新配置maven，就需要对默认设置进行修改。"),(0,t._)("p",null,"以下操作只对新版2020版本以上有用"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317083242420.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317083143821.png?x-oss-process=style/pictureProcess1",data:"aurora"})])])],-1),O=(0,t._)("p",null,"##创建maven项目",-1),V=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317083756716.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),D=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317083930306.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),F=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317084012047.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),A=(0,t._)("p",null,"之后就可以了",-1),C=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317084044840.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),J=(0,t._)("p",null,"但是使用这个模板进行创建maven项目的时候，没有src",-1),H=(0,t._)("p",null,[(0,t.Uk)("所以在进行创建的时候，不要点击使用"),(0,t._)("code",null,"quickstart"),(0,t.Uk)("进行创建，")],-1),L=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317084909654.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),B=(0,t._)("p",null,"点击这个就可以了",-1),G=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317084846031.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),N=(0,t._)("p",null,"如果创建的目录中没有java，resources等目录，可以手动创建一个文件夹",-1),$=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317085035750.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),W=(0,t._)("p",null,"然后右键，点击上面这个，在根据需要添加",-1),X=(0,t._)("p",null,"需要保证变颜色才行",-1),Y=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317085124306.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),Z=(0,t._)("h2",{id:"使用maven窗口",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#使用maven窗口","aria-hidden":"true"},"#"),(0,t.Uk)(" 使用maven窗口")],-1),K=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317185830210.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),Q=(0,t._)("p",null,"idea已经将maven中的命令行做成按钮的形式，直接点击就可以",-1),ss=(0,t._)("h2",{id:"新建一个web",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#新建一个web","aria-hidden":"true"},"#"),(0,t.Uk)(" 新建一个web")],-1),as=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317190627767.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),ns=(0,t.uE)('<p>新建的maven是没有test目录的，需要手动进行添加</p><p>因为正常情况，我们在创建web项目的时候，我们会进入到module中将需要的包进行导入，但是使用maven之后，就不需要再这样，可以直接在<code>pom.xml</code>文件中添加需要的依赖就行</p><h2 id="将自己的web项目使用原生tomcat进行部署" tabindex="-1"><a class="header-anchor" href="#将自己的web项目使用原生tomcat进行部署" aria-hidden="true">#</a> 将自己的web项目使用原生Tomcat进行部署</h2><p>如果要完成这一步的话，那么需要将这个项目打包成<code>war</code>包，然后启动tomcat服务器，并将这个war文件放入到<code>webapps</code>中，就可以输入路径进行访问了</p><p>对于web应用，maven默认的打包形式就是<code>war</code></p>',5),ts=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317200004303.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),ps=(0,t._)("h1",{id:"依赖的范围",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#依赖的范围","aria-hidden":"true"},"#"),(0,t.Uk)(" 依赖的范围")],-1),es=(0,t._)("p",null,"对于部分的依赖jar包，我们可能在不同的阶段，不需要使用到，所以这个时候，就可以设置依赖的范围",-1),ls=(0,t._)("p",null,"scope的值有 compile, test, provided ,默认是compile scope:表示依赖使用的范围，也就是在maven构建项目的那些阶段中起作用。 maven构建项目 编译， 测试 ，打包， 安装 ，部署 过程（阶段）",-1),cs=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317203825552.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),os=(0,t.uE)('<p>依赖的范围使用<code>scope</code>进行设置</p><p><code>其值是maven的声明周期值</code></p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>那么这个<code>junit</code>包就只能在测试阶段有作用，在其他的阶段，比如运行主程序的时候，不会使用到</p>',4),is=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317203448960.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),rs=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317203512460.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),us=(0,t._)("p",null,[(0,t._)("code",null,"pom.xml"),(0,t.Uk)("文件设置")],-1),gs=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317203539433.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),ds=(0,t._)("p",null,"但是更改之后，就可以正常使用",-1),ms=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317203655205.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),ks=(0,t._)("p",null,[(0,t.Uk)("如果这个值为"),(0,t._)("code",null,"provided"),(0,t.Uk)("，那么就只是在特使阶段和编译阶段有效，对于其他的阶段，比如打包阶段，不会将这个jar包包含在类，就比如servlet类需要的jar包，我们就可以设置为"),(0,t._)("code",null,"provided"),(0,t.Uk)("，因为在tomcat中，就有这两个需要的jar包，在打包成的jar或者"),(0,t._)("code",null,"war"),(0,t.Uk)("包中，也找不到")],-1),bs=(0,t._)("ul",null,[(0,t._)("li",null,"下面图片是在测试打包后的jar包")],-1),vs=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317204417110.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),hs=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317204350379.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),xs=(0,t._)("h2",{id:"如果本地仓库中没有这个jar包-何时进行下载",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#如果本地仓库中没有这个jar包-何时进行下载","aria-hidden":"true"},"#"),(0,t.Uk)(" 如果本地仓库中没有这个jar包，何时进行下载")],-1),ys=(0,t._)("p",null,"如果本地的仓库中，没有这个需要的jar包，那么当我们写上这个依赖的时候，maven就会在本地仓库中进行搜索这个jar包，如果没有这个或者版本没有这个的话，就会立马进行下载",-1),_s=(0,t._)("p",null,"判断是否子本地有的最好办法，就是看是否有红色波浪线",-1),js=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("p",null,"测试"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317204827952.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("p",null,[(0,t.Uk)("本地仓库中，没有"),(0,t._)("code",null,"junit.jar 4.12")]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317204906931.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317204954962.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("p",null,"自动进行下载，很快就完成了")])],-1),zs=(0,t.uE)('<h1 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量" aria-hidden="true">#</a> 全局变量</h1><p>在 Maven 的 pom.xml 文件中，<code>&lt;properties&gt;</code>用于定义全局变量，POM 中通过${property_name}的形式引用变量的值。</p><p>定义全局变量：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">&gt;</span></span>4.3.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>引用全局变量：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Maven 系统采用的变量：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span> 源码编译 jdk 版本\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span> 运行代码的 jdk 版本\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span> 项目构建使用的编码，避免中文乱码\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">&gt;</span></span> 生成报告的编码\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>因为对于像spring这种框架，我们可能会使用他们的多个jar包，并且需要保证他们的版本号是统一的，如果一个一个的去进行修改的话，就会使得太麻烦，所以可以使用这种方式，只需要更改一个就可以了</p><ul><li>spring测试</li></ul><p>不使用自定义变量的情况</p>',11),fs=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317211508447.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),Ps=(0,t._)("p",null,"更改版本的时候，特别的不容易，",-1),Ss=(0,t._)("p",null,"使用自定义全局变量",-1),Us=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317211547557.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),Is=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210317211552763.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),qs=(0,t.uE)('<h2 id="指定资源位置" tabindex="-1"><a class="header-anchor" href="#指定资源位置" aria-hidden="true">#</a> 指定资源位置</h2><p>src/main/java 和 src/test/java 这两个目录中的所有*.java 文件会分别在 comile 和 test-comiple 阶段被编译，编</p><p>译结果分别放到了 target/classes 和 targe/test-classes 目录中，但是这两个目录中的其他文件都会被忽略掉，如果需</p><p>要把 src 目录下的文件包放到 target/classes 目录，作为输出的 jar 一部分。需要指定资源文件位置。以下内容放到</p><p><code>&lt;buid&gt;</code>标签中。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>\n         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>\n         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--所在的目录--&gt;</span>\n         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span>\n         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>\n         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>\n         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>\n         <span class="token comment">&lt;!--filtering 选项 false 不启用过滤器， *.property 已经起到过滤的作用了 --&gt;</span>\n         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span>\n         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>作用： mybatis课程中会用到这个作用</p><ol><li>默认没有使用resources的时候， maven执行编译代码时， 会把src/main/resource目录中的文件拷贝到target/classes目录中。</li></ol><blockquote><p>如果不这么设置的话，那么如果在main --&gt; java --&gt; 下创建一个新的文件，但是当使用编译的时候，会发现这个文件并没有被移动到<code>target</code>目录中，因为如果没有设置<code>built</code>，只会将<code>resources</code>目录中的配置文件进行移动</p><p>如果设置这个标签的话，那么在main --&gt; java --&gt; 下的文件，编译之后，还是会在原来的目录中，也就是<code>classes</code>中</p></blockquote>',9),ws={},Ms=(0,n(83744).Z)(ws,[["render",function(s,a){return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,e,l,c,o,i,r,u,g,d,m,k,b,v,h,x,y,_,j,z,f,P,S,U,I,q,w,M,E,T,R,O,V,D,F,A,C,J,H,L,B,G,N,$,W,X,Y,Z,K,Q,ss,as,ns,ts,ps,es,ls,cs,os,is,rs,us,gs,ds,ms,ks,bs,vs,hs,xs,ys,_s,js,zs,fs,Ps,Ss,Us,Is,qs],64)}]])}}]);