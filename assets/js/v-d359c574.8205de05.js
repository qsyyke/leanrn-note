"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9566],{15232:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-d359c574",path:"/linux/shell%E7%BC%96%E7%A8%8B.html",title:"Linux脚本",lang:"en-US",frontmatter:{date:"2021/12/21 18:09",title:"Linux脚本",tag:["shell","linux","脚本"]},excerpt:"",headers:[{level:2,title:"变量",slug:"变量",children:[]},{level:2,title:"环境变量",slug:"环境变量",children:[]},{level:2,title:"位置参数变量",slug:"位置参数变量",children:[]},{level:2,title:"预定于变量",slug:"预定于变量",children:[]},{level:2,title:"运算符",slug:"运算符",children:[{level:3,title:"基本语法",slug:"基本语法",children:[]}]},{level:2,title:"条件判断",slug:"条件判断",children:[{level:3,title:"常用判断条件",slug:"常用判断条件",children:[]},{level:3,title:"案例",slug:"案例",children:[]},{level:3,title:"流程控制",slug:"流程控制",children:[]}]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},5323:(s,n,a)=>{a.r(n),a.d(n,{default:()=>t});var e=a(66252);const l=(0,e.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Linux中的脚本，都是以<code>.sh</code>命名，但是并不是必须以<code>.sh</code>为后缀名，我们也可以以<code>var</code>为文件名，在此文件里面，写一些变量，然后<code>./var</code>这样也可以运行，但是为了规范，都是以<code>.sh</code>为后缀名</p><p>在运行脚本文件的时候，一定要保证，此脚本文件拥有可执行的权利，为了方便，我们可以直接将<code>aaa</code>文件夹下的所有脚本赋予可执行的权利</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">chmod</span> -R u+x aaa <span class="token comment">#不能是-r</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></div><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><ol><li><p>变量推荐都是大写，<code>A=100</code>,没有分号结束符</p></li><li><p>定义变量，等号两侧不能有空格</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#错误</span>\nC <span class="token operator">=</span> <span class="token number">100</span>\n\n<span class="token comment"># 正确</span>\n<span class="token assign-left variable">C</span><span class="token operator">=</span><span class="token number">100</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>使用<code>echo</code>的时候，可以使用字符串拼接，字符串为<code>&quot;&quot;</code>，<code>$变量名</code>可以在字符串中，引用此变量值</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#错误</span>\n<span class="token assign-left variable">C</span><span class="token operator">=</span><span class="token number">100</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&#39;C的值为: $C&#39;</span>\n\n<span class="token comment">#正确</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;C的值为: <span class="token variable">$C</span>&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p><code>unset 变量名</code>是撤销变量的赋值，<code>unset C</code>，输出<code>C</code>时为空</p></li><li><p>静态变量定义<code>readonly B=2</code>，不能对B进行unset</p></li><li><p>``这个符号是将某个指令的运行结果，赋值给变量</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">C</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span><span class="token variable">`</span></span>\n<span class="token comment"># 也可以使用=$(date)</span>\n<span class="token assign-left variable">D</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>那么输出C就是运行<code>date</code>的结果</p></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>\n<span class="token assign-left variable">A</span><span class="token operator">=</span><span class="token number">100</span>\n<span class="token builtin class-name">echo</span> <span class="token variable">$A</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;A = <span class="token variable">$A</span>&quot;</span>\n\n<span class="token builtin class-name">unset</span> A\n\n<span class="token builtin class-name">echo</span> <span class="token variable">$A</span>\n\n<span class="token assign-left variable">C</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span><span class="token variable">`</span></span>\n<span class="token builtin class-name">echo</span> <span class="token string">&#39;本地时间为: $C&#39;</span>\n\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;我的环境变量为: <span class="token environment constant">$PATH</span>&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>在<code>/etc/profile</code>文件里面使用<code>export</code>导出的变量，都是全局变量，我们可以直接使用，比如<code>PATH</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">AURORA</span><span class="token operator">=</span>https://aurora.xcye.xyz\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>那么我们在任何地方使用<code>echo $AURORA</code>都可以得到<code>AURORA</code>这个变量的值</p><blockquote><p>请注意以下</p><ol><li>一定要使用<code>export</code></li><li>变量大写</li><li>保存之后，一定要运行<code>source /etc/profile</code>使之生效</li><li>使用<code>/etc/profile</code>中的变量时，一定要加上<code>$</code></li></ol></blockquote></div><h2 id="位置参数变量" tabindex="-1"><a class="header-anchor" href="#位置参数变量" aria-hidden="true">#</a> 位置参数变量</h2><p>如果我们输入<code>./po.sh 11 22 33 44 55</code>，那么我们可以通过位置参数变量，获取到这些参数</p><blockquote><p><code>$n</code> （功能描述：n 为数字，$0 代表命令本身，$1-$9 代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如${10}）</p><p><code>$*</code> （功能描述：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体）</p><p><code>$@</code>（功能描述：这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待）</p><p><code>$#</code>（功能描述：这个变量代表命令行中所有参数的个数）</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>\n  <span class="token number">2</span> \n  <span class="token number">3</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;命令为: <span class="token variable">$0</span>&quot;</span>\n  <span class="token number">4</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;第1个参数为: <span class="token variable">$1</span>&quot;</span>\n  <span class="token number">5</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;第2 个参数为: <span class="token variable">$2</span>&quot;</span>\n  <span class="token number">6</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;第3 个参数为: <span class="token variable">$3</span>&quot;</span>\n  <span class="token number">7</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;第4个参数为: <span class="token variable">$4</span>&quot;</span>\n  <span class="token number">8</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;第5个参数为: <span class="token variable">$5</span>&quot;</span>\n  <span class="token number">9</span> \n <span class="token number">10</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;全部参数: <span class="token variable">$*</span>&quot;</span>\n <span class="token number">11</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;全部参数单独: <span class="token variable">$@</span>&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="预定于变量" tabindex="-1"><a class="header-anchor" href="#预定于变量" aria-hidden="true">#</a> 预定于变量</h2><p><code>shell</code>设计者事先已经定义好的变量，可以直接在<code>shell</code>脚本中使用</p><blockquote><p><code>$$</code> （功能描述：当前进程的进程号（PID）</p><p><code>$!</code> （功能描述：后台运行的最后一个进程的进程号（PID）</p><p><code>$?</code>（功能描述：最后一次执行的命令的返回状态。如果这个变量的值为 0，证明上一个命令正确执行；如果这个变量的值为非 0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>\n\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;当前进行的PID: <span class="token variable">$$</span>&quot;</span>\n\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;后台运行的最后一个PID: <span class="token variable">$!</span>&quot;</span>\n\n\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;最后一次: <span class="token variable">$?</span>&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><h3 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h3><blockquote><ol><li><p><code>$((运算式))</code> or <code>$[运算式]</code> or <code>expr m + n</code></p><p>expr为<code>expression 表达式 </code></p></li><li><p>注意expr运算符间要有空格, 如果希望将expr的结果赋给某个变量，使用 ``</p></li><li><p><code>expr m - n</code></p></li><li><p><code>expr \\*, /, % </code>乘，除，取余</p><blockquote><p><code>\\*,/,%</code>等只是对于expr表达式，如果使用的是<code>$()</code>或者<code>$[]</code>便不需要</p></blockquote></li></ol></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>\n\n<span class="token assign-left variable">RES</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token variable">))</span></span>\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;计算1: <span class="token variable">$RES</span>&quot;</span>\n\n<span class="token assign-left variable">RES1</span><span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">2</span>+3<span class="token punctuation">)</span> * <span class="token number">4</span><span class="token punctuation">]</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;计算2: <span class="token variable">$RES1</span>&quot;</span>\n\n<span class="token assign-left variable">RES2</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">2</span> + <span class="token number">3</span><span class="token variable">`</span></span>\n\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$RES2</span>&quot;</span>\n<span class="token assign-left variable">RES3</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $RES2 <span class="token punctuation">\\</span>* <span class="token number">4</span><span class="token variable">`</span></span>\n\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;expr: <span class="token variable">$RES3</span>&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>如果你使用<code>expr</code>，那么一定要加上``，否怎会报错</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#错误</span>\n<span class="token assign-left variable">RES</span><span class="token operator">=</span>expr <span class="token number">2</span> + <span class="token number">3</span>\n\n<span class="token comment">#正确</span>\n<span class="token assign-left variable">RES</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">2</span> + <span class="token number">3</span><span class="token variable">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><h2 id="条件判断" tabindex="-1"><a class="header-anchor" href="#条件判断" aria-hidden="true">#</a> 条件判断</h2><h3 id="常用判断条件" tabindex="-1"><a class="header-anchor" href="#常用判断条件" aria-hidden="true">#</a> 常用判断条件</h3><ol><li><p>字符串</p><ul><li><code>=</code> 字符串比较</li></ul></li><li><p>数字</p><ul><li><p><code>-lt</code> 小于</p></li><li><p><code>-le</code> 小于等于 little equal</p></li><li><p><code>-eq</code> 等于</p></li><li><p><code>-gt</code> 大于</p></li><li><p><code>-ge</code> 大于等于</p></li><li><p><code>-ne</code> 不等于</p></li></ul></li><li><p>按照文件权限或者文件</p><ul><li><code>-r</code> 有读的权限</li><li><code>-w</code> 有写的权限</li><li><code>-x</code> 有执行的权限</li></ul></li><li><p>按照文件类型进行判断</p><ul><li><code>-f</code> 文件存在并且是一个常规的文件</li><li><code>-e</code> 文件存在</li><li><code>-d</code> 文件存在并是一个目录</li></ul></li></ol><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h3><blockquote><p>案例 1：&quot;ok&quot;是否等于&quot;ok&quot;</p><p>案例 2：23 是否大于等于 22</p><p>案例 3：/root/shcode/aaa.txt 目录中的文件是否存在</p><p>案例 4：判断是否存在环境变量</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;ok&quot;</span> <span class="token operator">=</span> <span class="token string">&quot;ok&quot;</span> <span class="token punctuation">]</span>\n<span class="token keyword">then</span>\n        <span class="token builtin class-name">echo</span> <span class="token string">&quot;ok 等于 ok&quot;</span>\n<span class="token keyword">fi</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token number">23</span> -ge <span class="token number">22</span> <span class="token punctuation">]</span>\n<span class="token keyword">then</span>\n        <span class="token builtin class-name">echo</span> <span class="token string">&quot;23大于22&quot;</span>\n\n<span class="token keyword">fi</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">[</span> -f /root/code/a.txt <span class="token punctuation">]</span>\n<span class="token keyword">then</span>\n        <span class="token builtin class-name">echo</span> <span class="token string">&quot;a.txt文件存在&quot;</span>\n\n<span class="token keyword">fi</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token environment constant">$PATH</span> <span class="token punctuation">]</span>\n<span class="token keyword">then</span>\n        <span class="token builtin class-name">echo</span> <span class="token string">&quot;PATH存在环境变量: <span class="token environment constant">$PATH</span>&quot;</span>\n<span class="token keyword">fi</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>经过测试发现，不能如下取反</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span><span class="token environment constant">$PATH</span> <span class="token punctuation">]</span>\n<span class="token keyword">then</span> \n\t<span class="token builtin class-name">echo</span> <span class="token string">&quot;&quot;</span>\n\t\n<span class="token keyword">fi</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><h3 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制" aria-hidden="true">#</a> 流程控制</h3>',27),p=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("p",null,"单分支"),(0,e._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)(" condition "),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"then"),(0,e.Uk)("\n\t"),(0,e._)("span",{class:"token comment"},"#条件成立执行的代码"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"fi"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br")])]),(0,e._)("p",null,[(0,e._)("code",null,"一定要使用fi"),(0,e.Uk)("结束")])]),(0,e._)("li",null,[(0,e._)("p",null,"多分支"),(0,e._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e._)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)(" condition "),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"then"),(0,e.Uk)("\n\t"),(0,e._)("span",{class:"token comment"},"#成立"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"elif"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)(" condition2 "),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"then"),(0,e.Uk)("\n\t"),(0,e._)("span",{class:"token comment"},"#条件2成立"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"fi"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"6"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"7"),(0,e._)("br")])]),(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211221192752076.png?x-oss-process=style/pictureProcess1",data:"aurora"})])])],-1),c=(0,e._)("p",null,"shell脚本语法太难了，后续需要再慢慢学o(╥﹏╥)oo(╥﹏╥)o",-1),o={},t=(0,a(83744).Z)(o,[["render",function(s,n){return(0,e.wg)(),(0,e.iD)(e.HY,null,[l,p,c],64)}]])}}]);