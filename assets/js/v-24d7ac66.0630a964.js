"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5180],{69778:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-24d7ac66",path:"/spring/security/",title:"spring security的使用",lang:"en-US",frontmatter:{date:"2022/3/8 20:13",title:"spring security的使用"},excerpt:"",headers:[{level:2,title:"配置",slug:"配置",children:[]},{level:2,title:"自定义登录成功处理",slug:"自定义登录成功处理",children:[{level:3,title:"源码",slug:"源码",children:[]},{level:3,title:"自定义登录失败",slug:"自定义登录失败",children:[]}]},{level:2,title:"antMatchers() ant匹配规则",slug:"antmatchers-ant匹配规则",children:[]},{level:2,title:"权限控制",slug:"权限控制",children:[{level:3,title:"角色和权限的区别",slug:"角色和权限的区别",children:[]}]},{level:2,title:"自定义403权限错误",slug:"自定义403权限错误",children:[]},{level:2,title:"access()方法",slug:"access-方法",children:[{level:3,title:"源码分析",slug:"源码分析",children:[]},{level:3,title:"自定义判断逻辑",slug:"自定义判断逻辑",children:[]}]},{level:2,title:"基于注解的权限控制",slug:"基于注解的权限控制",children:[]},{level:2,title:"记住我",slug:"记住我",children:[{level:3,title:"设置最后登录时间存储方式",slug:"设置最后登录时间存储方式",children:[]},{level:3,title:"自定义记住我逻辑",slug:"自定义记住我逻辑",children:[]}]},{level:2,title:"Oauth2",slug:"oauth2",children:[{level:3,title:"授权服务器",slug:"授权服务器",children:[]},{level:3,title:"资源客户端",slug:"资源客户端",children:[]},{level:3,title:"使用步骤",slug:"使用步骤",children:[]},{level:3,title:"密码模式",slug:"密码模式",children:[]}]},{level:2,title:"使用redis存储token",slug:"使用redis存储token",children:[]},{level:2,title:"jwt",slug:"jwt",children:[{level:3,title:"头部",slug:"头部",children:[]},{level:3,title:"负载",slug:"负载",children:[]},{level:3,title:"签名，签证",slug:"签名-签证",children:[]},{level:3,title:"使用",slug:"使用",children:[]},{level:3,title:"jwt过期检验",slug:"jwt过期检验",children:[]},{level:3,title:"自定义声明",slug:"自定义声明",children:[]}]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},17794:(n,s,a)=>{a.r(s),a.d(s,{default:()=>N});var p=a(66252);const t=(0,p.uE)('<h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><p><code>WebSecurityConfigurerAdapter</code>这个类，是spring security中最重要的一个类，我们需要自定义的话，就需要继承该类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果我们只做了上面部分，那么我们的页面并没有任何的验证，所有的东西都需要我们重新配置</p><p>所以我们需要指定登录页面，登录的操作逻辑是哪个</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//自定义登录页面</span>\nhttp<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">//自定义登录逻辑</span>\n  <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">&quot;/login.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//授权</span>\nhttp<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">//放行登录页面</span>\n  <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/login.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">//所有请求都需要认证</span>\n  <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//禁止csrf()</span>\nhttp<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>如果我们不指定<code>.loginProcessingUrl(&quot;/login&quot;)</code>的话，那么我们点击提交，是不能够登录成功的，后面的这个<code>/login</code>是spring security，如果我们在某个controller中也有一个<code>/login</code>，他不会走这个controller中的</p><blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;执行了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token string">&quot;aurora1&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>不会走这个controller，而且就算我们controller中有一个<code>/login2</code>，我们设置处理逻辑未<code>.loginProcessingUrl(&quot;/login2&quot;)</code>，也是不会走这个controller的，并且点击提交的时候，会立马回到登录页</p></blockquote><p>如果我们要放行某个请求，那么需要通过<code>http.authorizeRequests()</code>配置</p><p><code>.antMatchers(&quot;xxxx&quot;).permitAll()</code>就是放行某个请求，或者页面</p><p><code> .anyRequest().authenticated()</code>是其他的任何请求，都需要授权验证，但是这些其他的请求，并不包含我们通过<code>antMatchers(&quot;xxxx&quot;).permitAll()</code>进行放行的</p><p>如果我们不加上<code>http.csrf().disable()</code>的话，那么是访问不到页面的，直接网络出问题</p><h2 id="自定义登录成功处理" tabindex="-1"><a class="header-anchor" href="#自定义登录成功处理" aria-hidden="true">#</a> 自定义登录成功处理</h2><p>设置登录成功是通过<code>successForwardUrl()</code>进行设置的，但是这个，存在一个问题，这里我们只能指定当前应用中的一个post请求的地址，假如我们登录成功就要跳转到百度，那么是做不到的</p><h3 id="源码" tabindex="-1"><a class="header-anchor" href="#源码" aria-hidden="true">#</a> 源码</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">FormLoginConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">H</span><span class="token punctuation">&gt;</span></span> <span class="token function">successForwardUrl</span><span class="token punctuation">(</span><span class="token class-name">String</span> forwardUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">successHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ForwardAuthenticationSuccessHandler</span><span class="token punctuation">(</span>forwardUrl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>通过点进<code>http.formLogin().successForwardUrl()</code>方法中，我们发现他执行的就是上面这个代码，从中我们可以发现，登录成功后，是这个<code>new ForwardAuthenticationSuccessHandler(forwardUrl)</code>对象进行处理的，这个类实现了<code>AuthenticationSuccessHandler</code>接口</p><p>因为我们可以指定登录成功的处理类，通过<code>.successHandler()</code>进行设置，所以我们如果需要自定义登录成功逻辑的话，那么我们可以自己写一个类，实现<code>AuthenticationSuccessHandler</code>接口，然后在此<code>.successHandler()</code>方法中，使用这个处理类</p><p>代码如下</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomAuthenticationSuccessHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationSuccessHandler</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAuthenticationSuccess</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">&quot;https://aurora.xcye.xyz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//使用</span>\n<span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">//自定义登录页面</span>\n        http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token comment">//自定义登录逻辑</span>\n                xxxx\n<span class="token comment">//                .successForwardUrl(&quot;/loginSuccess&quot;)</span>\n                <span class="token punctuation">.</span><span class="token function">successHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomAuthenticationSuccessHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><blockquote><p><code>.successHandler()</code>不能和<code>.successForwardUrl()</code>一起使用</p></blockquote><p>上面的地址，我们可以自己在<code>CustomAuthenticationSuccessHandler</code>类中，添加一个构造方法，传入进去</p><p>当登陆成功之后，我们可以通过认证的信息，获取到很多的用户信息，比如用户的ip地址等</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomAuthenticationSuccessHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationSuccessHandler</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAuthenticationSuccess</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//response.sendRedirect(&quot;https://aurora.xcye.xyz&quot;);</span>\n        <span class="token class-name">Object</span> principal <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">WebAuthenticationDetails</span> webAuthenticationDetails <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WebAuthenticationDetails</span><span class="token punctuation">)</span> authentication<span class="token punctuation">.</span><span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> remoteAddress <span class="token operator">=</span> webAuthenticationDetails<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> sessionId <span class="token operator">=</span> webAuthenticationDetails<span class="token punctuation">.</span><span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ip: &quot;</span> <span class="token operator">+</span> remoteAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><blockquote><p>但是需要注意的是，如果我们的访问路径未<code>localhost:8080</code>这种，那么ip地址为<code>0:0:0:0:0:0:0:1</code>，如果路径为<code>127.0.0.1:8080</code>，那么ip地址为<code>127.0.0.1</code>，我们需要特别注意localhost的ip地址</p></blockquote><h3 id="自定义登录失败" tabindex="-1"><a class="header-anchor" href="#自定义登录失败" aria-hidden="true">#</a> 自定义登录失败</h3><p>既然登录成功，我们可以自定义，那么登录失败也是同样的道理，只是他们实现的类不同而已</p><p>自定义登录失败的类，需要实现<code>AuthenticationFailureHandler</code>接口</p><h2 id="antmatchers-ant匹配规则" tabindex="-1"><a class="header-anchor" href="#antmatchers-ant匹配规则" aria-hidden="true">#</a> antMatchers() ant匹配规则</h2><p>这是一个ant的匹配规则，请自行搜索引擎查看</p><h2 id="权限控制" tabindex="-1"><a class="header-anchor" href="#权限控制" aria-hidden="true">#</a> 权限控制</h2><p>security默认的权限控制有以下这几种</p>',33),e=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220312202920765.png",data:"aurora"})],-1),o=(0,p.uE)('<ol><li>第一种就是允许所有</li><li>denyAll就是禁止所有</li><li>第三种就是匿名的</li><li>第四种就是认证的</li><li>第五种就是每次访问都需要经过完整验证，也就是输入用户名和密码进行验证的</li><li>第六种就是记住我，多少天内，可以免登陆</li></ol><ul><li><p>hasAuthority()</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/main.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAuthority</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>也就是说，访问<code>/main.html</code>页面，登录用户必须拥有admin的权限，否则便会报一个403错误</p></li><li><p>hasAnyAuthority()</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/main.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAnyAuthority</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;noram&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>登录用户必须要拥有admin和noram权限中的其中一个，只要用户有其中一个权限就可以了</p></li><li><p>hasAnyRole()</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/main.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAnyRole</span><span class="token punctuation">(</span><span class="token string">&quot;man&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;women&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>登录用户必须拥有<code>ROLE_man</code>或者<code>ROLE_women</code>两个角色中的其中一个</p></li><li><p>hasRole()</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/main.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">&quot;man&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>登录用户必须拥有<code>ROLE_man</code>角色</p></li><li><p>hasIpAddress()</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/main.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasIpAddress</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>登录用户的ip地址，必须为<code>127.0.0.1</code></p></li></ul><h3 id="角色和权限的区别" tabindex="-1"><a class="header-anchor" href="#角色和权限的区别" aria-hidden="true">#</a> 角色和权限的区别</h3><p>角色和权限是两个不同的，角色在security中，需要保证角色前缀是<code>ROLE_</code>，比如<code>ROLE_admin,ROLE_man</code>，但是权限可以是任何内容，不推荐加上<code>ROLE_</code>前缀，因为设置用户权限是一起添加的</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>\n<span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">{</span>\n\n  <span class="token class-name">String</span> encodePassword <span class="token operator">=</span> passwordEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>encodePassword<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;aurora&quot;</span><span class="token punctuation">,</span>encodePassword<span class="token punctuation">,</span>\n                  <span class="token class-name">AuthorityUtils</span><span class="token punctuation">.</span><span class="token function">commaSeparatedStringToAuthorityList</span><span class="token punctuation">(</span><span class="token string">&quot;admin,chuchen,ROLE_man,ROLE_men&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面的代码，就是我们为aurora这个用户增加admin,chuchen权限，增加ROLE_man,ROLE_men两个角色</p><p>还有一点需要注意，为用户增加权限，角色的时候，如果需要设置多个，我们是直接使用<code>,</code>进行隔开的，但是在<code>.antMatchers(&quot;/main.html&quot;).hasAnyAuthority(&quot;admin&quot;,&quot;sdlfkj&quot;)</code>中，是多个字符串，里面是一个可变长度的参数</p><h2 id="自定义403权限错误" tabindex="-1"><a class="header-anchor" href="#自定义403权限错误" aria-hidden="true">#</a> 自定义403权限错误</h2><p>自定义403权限错误，我们首先需要创建一个类，实现<code>AccessDeniedHandler</code>接口</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomAccessDeniedHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AccessDeniedHandler</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AccessDeniedException</span> accessDeniedException<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;application/json;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;code\\&quot;: \\&quot;403\\&quot;,\\&quot;msg\\&quot;: \\&quot;权限不足\\&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>然后我们在通过下面这个进行设置</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>http<span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accessDeniedHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomAccessDeniedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',12),c=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220312214330819.png",data:"aurora"})],-1),l=(0,p._)("p",null,"当出现权限错误时，就是我们上面写的这个进行处理",-1),u=(0,p._)("p",null,"而且我们也可以在这个里面写json数据",-1),i=(0,p._)("p",null,"同理，还存在下面的这些异常，我们也可以通过这种方法进行自定义处理",-1),r=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220312214555569.png",data:"aurora"})],-1),k=(0,p.uE)('<h2 id="access-方法" tabindex="-1"><a class="header-anchor" href="#access-方法" aria-hidden="true">#</a> access()方法</h2><p>此方法的定义为</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ExpressionInterceptUrlRegistry</span> <span class="token function">access</span><span class="token punctuation">(</span><span class="token class-name">String</span> attribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>not<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    attribute <span class="token operator">=</span> <span class="token string">&quot;!&quot;</span> <span class="token operator">+</span> attribute<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">interceptUrl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestMatchers<span class="token punctuation">,</span> <span class="token class-name">SecurityConfig</span><span class="token punctuation">.</span><span class="token function">createList</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token class-name">ExpressionUrlAuthorizationConfigurer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>REGISTRY<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>参数说明</p><blockquote><p>Allows specifying that URLs are secured by an arbitrary expression Params: attribute – the expression to secure the URLs (i.e. &quot;hasRole(&#39;ROLE_USER&#39;) and hasRole(&#39;ROLE_SUPER&#39;)&quot;)</p></blockquote><h3 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析" aria-hidden="true">#</a> 源码分析</h3><p>比如我们随便看一个内置的权限控制</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ExpressionInterceptUrlRegistry</span> <span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token class-name">String</span> role<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">access</span><span class="token punctuation">(</span><span class="token class-name">ExpressionUrlAuthorizationConfigurer</span>\n                <span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token class-name">ExpressionUrlAuthorizationConfigurer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>rolePrefix<span class="token punctuation">,</span> role<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',8),b=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220312220552534.png",data:"aurora"})],-1),d=(0,p.uE)('<p>最终<code>access()</code>方法接收的参数为<code>hasRole(\\&quot;men\\&quot;)</code>这种，所以我们可以直接在配置中，这样写</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/main.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">&quot;hasRole(\\&quot;men\\&quot;)&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="自定义判断逻辑" tabindex="-1"><a class="header-anchor" href="#自定义判断逻辑" aria-hidden="true">#</a> 自定义判断逻辑</h3><p>并且我们也可以自定义判断逻辑</p><ol><li><p>创建一个类，类中定义一个方法，返回boolean值</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomAccess</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPermission</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">GrantedAuthority</span> grantedAuthority <span class="token operator">:</span> authorities<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">String</span> authority <span class="token operator">=</span> grantedAuthority<span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>authority<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>requestURI<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li><p>在<code>WebSecurityConfigurerAdapter</code>的子类上，实例化一个<code>CustomAccess customAccess = new CustomAccess();</code>对象</p></li><li><p>通过<code>http.authorizeRequests().antMatchers(&quot;/main.html&quot;).access(&quot;@customAccess.hasPermission(request,authentication)&quot;)</code>使用</p></li></ol><blockquote><p>因为我们在<code>hasPermission()</code>方法中，需要用到<code>HttpServletRequest和Authentication</code>对象，但是<code>WebSecurityConfigurerAdapter</code>的子类里没有，我们只管传就行，框架会自动赋值的</p><p>一定要加上<code>@</code>否则会报错@customAccess.hasPermission(request,authentication)</p><p>一定要保证，我们自定义的这个类中的<code>hasPermission()</code>方法返回的是boolean值，不管你类名和方法名叫什么</p></blockquote><blockquote><p>一定要保证access(&quot;&quot;)里面@xxx对象名字和类名一样，知识首字母小写，比如access(&quot;@customAccess(request,authentication)&quot;)可以，但是access(&quot;@access(request,authentication)&quot;)就不行，尽管我们创建的CustomAccess的对象名为access，是不行的</p></blockquote><h2 id="基于注解的权限控制" tabindex="-1"><a class="header-anchor" href="#基于注解的权限控制" aria-hidden="true">#</a> 基于注解的权限控制</h2><p>自行必应，使用差不多</p><h2 id="记住我" tabindex="-1"><a class="header-anchor" href="#记住我" aria-hidden="true">#</a> 记住我</h2><p>记住我这个功能，比如在登录页面或者是接口的方式发送请求，提供一个复选框，或者是直接<code>remember-me=true</code>，那么security就会将最后一次登录的时间保存在内容中，或者是保存在mysql数据库中，默认为两周免登录，那么下次我们就可以不同再自己登录了</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TWO_WEEKS_S <span class="token operator">=</span> <span class="token number">1209600</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>并且我们也可以自己定义记住我的逻辑实现类，这样就可以做到自定义的方式</p>',13),m=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220313091405706.png",data:"aurora"})],-1),g=(0,p.uE)('<h3 id="设置最后登录时间存储方式" tabindex="-1"><a class="header-anchor" href="#设置最后登录时间存储方式" aria-hidden="true">#</a> 设置最后登录时间存储方式</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">PersistentTokenRepository</span> <span class="token function">persistentTokenRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">JdbcTokenRepositoryImpl</span> jdbcTokenRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTokenRepositoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">//设置数据源</span>\n  jdbcTokenRepository<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">//启动时是否创建表 第一次要</span>\n  <span class="token comment">//jdbcTokenRepository.setCreateTableOnStartup(true);</span>\n  <span class="token keyword">return</span> jdbcTokenRepository<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这里我们使用jdbc作为数据的存储方式，当<code>jdbcTokenRepository.setCreateTableOnStartup(true)</code>时候，程序启动的时候，便会自动创建一张名为<code>persistent_logins</code>的表，但是我第二次启动的时候，就报错了，报错原因是因为重复创建表</p>',3),h=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220313085017707.png",data:"aurora"})],-1),v=(0,p.uE)('<p>然后我们通过<code>http.xxx</code>进行设置</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>http<span class="token punctuation">.</span><span class="token function">rememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">//设置多长时间过期</span>\n  <span class="token punctuation">.</span><span class="token function">tokenValiditySeconds</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>\n  <span class="token comment">//自定义登录逻辑</span>\n  <span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomUserDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token comment">//自定义存储方式</span>\n  <span class="token punctuation">.</span><span class="token function">tokenRepository</span><span class="token punctuation">(</span><span class="token function">persistentTokenRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p><code>.userDetailsService(new CustomUserDetailsService())</code>这个好像是必须设置的</p></blockquote><h3 id="自定义记住我逻辑" tabindex="-1"><a class="header-anchor" href="#自定义记住我逻辑" aria-hidden="true">#</a> 自定义记住我逻辑</h3><p>我们可以通过下面这种方式设置记住我的逻辑实现</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>http<span class="token punctuation">.</span><span class="token function">rememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">//自定义记住我逻辑实现</span>\n    <span class="token punctuation">.</span><span class="token function">rememberMeServices</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomRememberMeServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRememberMeServices</span> <span class="token keyword">implements</span> <span class="token class-name">RememberMeServices</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Authentication</span> <span class="token function">autoLogin</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;自动登录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loginFail</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;登录失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loginSuccess</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Authentication</span> successfulAuthentication<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;登录成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>然后里面的逻辑就是我们自己实现了，想怎么存储，就怎么存储</p><p>但是如果我们像上面这样，什么都不做的话，当我们退出登录，重新登录时，数据库中也不会有任何的东西，并且我们关闭浏览器，重新打开，也是没有这个记住我的功能</p><p>因为最开始的基于内存和数据库的存储，都是通过默认的记住我逻辑类去实现的，现在我们使用自己的记住我逻辑类，也就没有上面的功能，需要我们自己去实现</p><h2 id="oauth2" tabindex="-1"><a class="header-anchor" href="#oauth2" aria-hidden="true">#</a> Oauth2</h2><p>http://localhost:8080/oauth/authorize?response_type=code&amp;client_id=admin&amp;redirect_url=http://aurora.xcye.xyz&amp;scope=all</p>',12),y=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220313124252661.png",data:"aurora"})],-1),f=(0,p.Uk)("关于"),q=(0,p._)("code",null,"Oauth2",-1),w=(0,p.Uk)("的介绍，可以看一下这篇文章，非常的详细，而且易懂"),j={href:"https://www.ruanyifeng.com/blog/2019/04/oauth_design.html",target:"_blank",rel:"noopener noreferrer"},x=(0,p.Uk)("OAuth 2.0 的一个简单解释 - 阮一峰的网络日志"),S=(0,p.Uk)("，这部分主要介绍的就是如何使用，如何配置spring security一起来使用"),_=(0,p._)("h3",{id:"授权服务器",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#授权服务器","aria-hidden":"true"},"#"),(0,p.Uk)(" 授权服务器")],-1),A=(0,p._)("p",null,"oauth2的验证，我们可以分成两部分，一个是授权服务器，另一个是资源服务器，授权服务器和资源服务器他们可以同时在一个系统中",-1),z=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220313124146903.png",data:"aurora"})],-1),R=(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[(0,p.Uk)("授权服务器的作用就是一个客户端，点击下面这个链接"),(0,p._)("code",null,"http://localhost:8080/oauth/authorize?response_type=code&client_id=admin&redirect_url=http://aurora.xcye.xyz&scope=all"),(0,p.Uk)("，然后就会出来一个页面，需要用户点击授权还是拒绝，就和使用微信登录是一样的")]),(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220313124952413.png",data:"aurora"})])]),(0,p._)("li",null,[(0,p._)("p",null,"当点击授权之后，那么就会将网页重定向到我们设置的那个地址，并且会加上一个参数"),(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220313125619797.png",data:"aurora"})]),(0,p._)("p",null,[(0,p.Uk)("其中"),(0,p._)("code",null,"60DDkz"),(0,p.Uk)("就是我们授权服务器返回回来的授权码，我们需要使用该授权码去请求token，然后使用token去请求资源服务器上的资源")])])],-1),I=(0,p.uE)('<h4 id="配置-1" tabindex="-1"><a class="header-anchor" href="#配置-1" aria-hidden="true">#</a> 配置</h4><p>首先就是我们需要用到的依赖了</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.cloud-version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-oauth2 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-oauth2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-security-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>security配置</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n\n        <span class="token comment">//禁止csrf()</span>\n        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/ouath/**&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/login/**&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/logout/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">successForwardUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/login/success&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">&quot;/login.html&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//自定义异常处理</span>\n        http<span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">accessDeniedHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomAccessDeniedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>因为获取授权码和通过授权码获取token等的请求路径是不变的，这里可以将他们放行</p><p>授权服务器配置</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@EnableAuthorizationServer</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationServer</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizationServerConfigurerAdapter</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">PasswordEncoder</span> passwordEncoder<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">ClientDetailsServiceConfigurer</span> clients<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        clients<span class="token punctuation">.</span><span class="token function">inMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n            <span class="token comment">//设置客户端id 正常是存放在数据库中的</span>\n            <span class="token punctuation">.</span><span class="token function">withClient</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span>\n            <span class="token comment">//设置客户端密码</span>\n            <span class="token punctuation">.</span><span class="token function">secret</span><span class="token punctuation">(</span>passwordEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token comment">//重定向地址，可以随便</span>\n            <span class="token punctuation">.</span><span class="token function">redirectUris</span><span class="token punctuation">(</span><span class="token string">&quot;https://aurora.xcye.xyz&quot;</span><span class="token punctuation">)</span>\n            <span class="token comment">//授权范围</span>\n            <span class="token punctuation">.</span><span class="token function">scopes</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>\n            <span class="token comment">//授权类型</span>\n            <span class="token punctuation">.</span><span class="token function">authorizedGrantTypes</span><span class="token punctuation">(</span><span class="token string">&quot;authorization_code&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><blockquote><p>一定要加上<code>EnableAuthorizationServer</code>注解，开启授权服务器</p><p>数据可以存储在本地，也可以存储在数据库中</p></blockquote><p>这里的重定向地址不一定非要是localhost这种，你当前程序运行的地址，可以是任何的地址，反正是重定向操作</p><p>如果把授权类型改为<code>password</code>，那么这个授权服务器就是密码授权，同理改为其他的</p><h3 id="资源客户端" tabindex="-1"><a class="header-anchor" href="#资源客户端" aria-hidden="true">#</a> 资源客户端</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@EnableResourceServer</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceConfig</span> <span class="token keyword">extends</span> <span class="token class-name">ResourceServerConfigurerAdapter</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">requestMatchers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/resource/userInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面这个就是配置资源服务器，其实这一块和security的配置是差不多的</p><p>使用<code>EnableResourceServer</code>注解标注的类的<code>configure()</code>方法中，被设置为需要认证的路径，都是我们需要使用oauth获得的token才能进行访问的资源(<code>尽管你已经通过security的登录认证</code>)，如果我们直接发送请求，那么就会出现下面信息</p>',15),E=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220313131345508.png",data:"aurora"})],-1),U=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220313122513228.png",data:"aurora"})],-1),C=(0,p._)("h3",{id:"使用步骤",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#使用步骤","aria-hidden":"true"},"#"),(0,p.Uk)(" 使用步骤")],-1),H=(0,p._)("ol",null,[(0,p._)("li",null,[(0,p._)("p",null,"点击http://localhost:8080/oauth/authorize?response_type=code&client_id=admin&redirect_url=http://aurora.xcye.xyz&scope=all网址进行授权"),(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220313131637211.png",data:"aurora"})]),(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220313131941758.png",data:"aurora"})]),(0,p._)("p",null,"记住这个授权码")]),(0,p._)("li",null,[(0,p._)("p",null,"打开postmen或者其他的工具"),(0,p._)("p",null,[(0,p.Uk)("按照下面这个步骤，向"),(0,p._)("code",null,"/oauth/token"),(0,p.Uk)("发送一个post请求去获取token")]),(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220313132948833.png",data:"aurora"})]),(0,p._)("blockquote",null,[(0,p._)("p",null,"无论是什么模式，客户端凭证都是不能少的，也就是上面的admin,123456(可自定义)")]),(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image-20220313133130234",originSrc:"/Users/aurora/Library/Application%20Support/typora-user-images/image-20220313133130234.png",data:"aurora"})]),(0,p._)("p",null,"然后点击发送，我们便可以得到一个token"),(0,p._)("div",{class:"language-json ext-json line-numbers-mode"},[(0,p._)("pre",{class:"language-json"},[(0,p._)("code",null,[(0,p._)("span",{class:"token punctuation"},"{"),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},'"access_token"'),(0,p._)("span",{class:"token operator"},":"),(0,p.Uk)(),(0,p._)("span",{class:"token string"},'"de122e45-f7ac-4d68-81bd-85f7922cdb7e"'),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},'"token_type"'),(0,p._)("span",{class:"token operator"},":"),(0,p.Uk)(),(0,p._)("span",{class:"token string"},'"bearer"'),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},'"expires_in"'),(0,p._)("span",{class:"token operator"},":"),(0,p.Uk)(),(0,p._)("span",{class:"token number"},"43199"),(0,p._)("span",{class:"token punctuation"},","),(0,p.Uk)("\n    "),(0,p._)("span",{class:"token property"},'"scope"'),(0,p._)("span",{class:"token operator"},":"),(0,p.Uk)(),(0,p._)("span",{class:"token string"},'"all"'),(0,p.Uk)("\n"),(0,p._)("span",{class:"token punctuation"},"}"),(0,p.Uk)("\n")])]),(0,p._)("div",{class:"line-numbers"},[(0,p._)("span",{class:"line-number"},"1"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"2"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"3"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"4"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"5"),(0,p._)("br"),(0,p._)("span",{class:"line-number"},"6"),(0,p._)("br")])])]),(0,p._)("li",null,[(0,p._)("p",null,"请求资源"),(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220313133331479.png",data:"aurora"})]),(0,p._)("p",null,[(0,p.Uk)("这个"),(0,p._)("code",null,"/resource/userInfo"),(0,p.Uk)("就是我们需要通过上一步获取到的token才能去访问的资源，可以是任何的请求，只要携带上需要的参数就行")]),(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220313133628240.png",data:"aurora"})]),(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220313133645975.png",data:"aurora"})]),(0,p._)("p",null,"这样就可以了，下图这个，就是我们直接在浏览器中，访问的结果页面"),(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220313133742346.png",data:"aurora"})])])],-1),O=(0,p._)("h3",{id:"密码模式",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#密码模式","aria-hidden":"true"},"#"),(0,p.Uk)(" 密码模式")],-1),D=(0,p._)("p",null,"我们也可以配置密码模式",-1),M=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image-20220313135156523",originSrc:"/Users/aurora/Library/Application%20Support/typora-user-images/image-20220313135156523.png",data:"aurora"})],-1),T=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220313135236116.png",data:"aurora"})],-1),L=(0,p._)("p",null,"获取token",-1),P=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220313135303154.png",data:"aurora"})],-1),W=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220313135348650.png",data:"aurora"})],-1),F=(0,p.uE)('<p>然后和前面一样，你已经获取到了token</p><h2 id="使用redis存储token" tabindex="-1"><a class="header-anchor" href="#使用redis存储token" aria-hidden="true">#</a> 使用redis存储token</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerEndpointsConfigurer</span> endpoints<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    endpoints\n        <span class="token comment">//自定义登录逻辑</span>\n        <span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span>customUserDetailsService<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">authenticationManager</span><span class="token punctuation">(</span>authenticationManager<span class="token punctuation">)</span>\n\n        <span class="token comment">//设置令牌的存储位置</span>\n        <span class="token punctuation">.</span><span class="token function">tokenStore</span><span class="token punctuation">(</span>tokenStore<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>通过<code>tokenStore</code>进行设置</p><h2 id="jwt" tabindex="-1"><a class="header-anchor" href="#jwt" aria-hidden="true">#</a> jwt</h2><h3 id="头部" tabindex="-1"><a class="header-anchor" href="#头部" aria-hidden="true">#</a> 头部</h3><p>头部用于描述关于该jwt的最基本的信息，例如其类型（jwt）以及签名所用的算法（例如HMAC，SHA256或RSA）等，这也可以被表示成一个json对象</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;alg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;HS256&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;typ&quot;</span><span class="token operator">:</span> <span class="token string">&quot;JWT&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>Type: 是类型</li><li>alg: 签名的算法</li></ul><p>我们对头部的json字符串进行base64编码，编码后的字符串如下</p><p><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</code></p><blockquote><p>这一部分是不会变的，还有头部，如果数据都一样的话，编码后的字符串都不会变</p></blockquote><h3 id="负载" tabindex="-1"><a class="header-anchor" href="#负载" aria-hidden="true">#</a> 负载</h3><p>负载就是存放有效信息的地方，除了标准中注册的声明外(建议但不强制)，我们也可以自定义一些声明</p><p>因为负载也是通过<code>base64</code>进行编码的对称加密，通过通过解密拿到里面的数据，所以敏感信息，比如密码，不能存放在里面</p><h4 id="标准中注册的声明" tabindex="-1"><a class="header-anchor" href="#标准中注册的声明" aria-hidden="true">#</a> 标准中注册的声明</h4><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>iss<span class="token operator">:</span> jwt签发者\nsub<span class="token operator">:</span> jwt所面向的用户\naud<span class="token operator">:</span> 接收jwt的一方\nexp<span class="token operator">:</span> jwt的过期时间，这个过期时间必须大于签发时间\nnbf<span class="token operator">:</span> 定义在什么时间之前，该jwt都是不可用的\nlat<span class="token operator">:</span> jwt的签发时间\njtl<span class="token operator">:</span> jwt的唯一身份标识，主要用来作为一次性token，从而回避攻击\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><p>公共的声明</p><p>公共的声明可以添加任何的信息，一般添加用户的相关信息或者其他业务需要的必要信息，但不建议添加敏感信息，因为该部分在客户端可解密</p></li><li><p>私有的声明</p><p>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息</p></li></ul><p>这个指的就是自定义的claim，比如下面这个举例中的name都属于自定的claim，这些claim跟jwt标准规定的claim区别在于，jwt规定的claim，jwt的接收方在拿到jwt之后，都知道怎么对这些标准的claim进行验证（还不知道是否验证通过），而私有的claim不会验证，除非明确告诉接收方要对这些claim进行验证以及规则才行</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;sub&quot;</span><span class="token operator">:</span> <span class="token string">&quot;123456789&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;naem&quot;</span><span class="token operator">:</span> <span class="token string">&quot;aurora&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;lat&quot;</span><span class="token operator">:</span> <span class="token number">34876459234</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>其中sub是标准的声明，name是自定义的声明（公共的或者私有的）</p><h3 id="签名-签证" tabindex="-1"><a class="header-anchor" href="#签名-签证" aria-hidden="true">#</a> 签名，签证</h3><p>jwt的第三部分是一个签证信息，这个签证信息是由三部分组成</p><ol><li>header(base64后的)</li><li>payload(base64)后的</li><li>secret(盐，一定要保密)</li></ol><p>这个部分需要base64加密后的header和payload使用<code>.</code>链接组成的字符串，然后通过header中声明的加密算法进行加盐<code>secret</code>组合加密，然后就构成了jwt的第三部分，如</p><p><code>oHuQ_qOfk-bUfRTQWcdTyrEfFi878vms4URzlBW2tXI</code></p><p>将这三部分使用<code>.</code>连接符，组合在一起，就是一个完整的jwt字符串了，比如下面这个</p><p><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjEwMDA5ODc2fQ.oHuQ_qOfk-bUfRTQWcdTyrEfFi878vms4URzlBW2tXI</code></p><blockquote><p><code>secret</code>是保存在服务器端的，jwt的签发也是在服务器端的，<code>secret</code>就是用来进行jwt的签发和jwt的验证，所以，他就是你服务端的私钥，在任何场景都不应该流露出来，一旦客户端将得知这个<code>secret</code>，那就意味着客户端可以自我签发jwt了</p></blockquote><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><p>创建jwt</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//System.out.println(System.currentTimeMillis());</span>\n<span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;aurora_docs&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">&quot;qsyyke&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setIssuer</span><span class="token punctuation">(</span><span class="token string">&quot;by aurora&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1647181460864l</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span>HS512<span class="token punctuation">,</span> <span class="token string">&quot;secret&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//头部</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Base64Codec</span><span class="token punctuation">.</span>BASE64<span class="token punctuation">.</span><span class="token function">decodeToString</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//payload</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Base64Codec</span><span class="token punctuation">.</span>BASE64<span class="token punctuation">.</span><span class="token function">decodeToString</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Base64Codec</span><span class="token punctuation">.</span>BASE64<span class="token punctuation">.</span><span class="token function">decodeToString</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><blockquote><p>这里的签发时间我直接写成了字符串，什么都没改变，所以jwt也就不会改变</p></blockquote><p>解析jwt</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//解析</span>\n<span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">&quot;secret&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;jti: &quot;</span> <span class="token operator">+</span> claims<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;sub: &quot;</span> <span class="token operator">+</span> claims<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;lat: &quot;</span> <span class="token operator">+</span> claims<span class="token punctuation">.</span><span class="token function">getIssuedAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="jwt过期检验" tabindex="-1"><a class="header-anchor" href="#jwt过期检验" aria-hidden="true">#</a> jwt过期检验</h3><p>jwt也是有生命的，如果使用上面这种方式，因为没有设置过期时间，所以生成的token是永久的</p><blockquote><p>从服务器发出的token，服务器自己并不会做记录，就存在一个弊端就是，服务端无法主动控制某个token的立即失效</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1647173241736l</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//设置一分钟失效</span>\n<span class="token keyword">long</span> l <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;aurora_docs&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">&quot;qsyyke&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setIssuer</span><span class="token punctuation">(</span><span class="token string">&quot;by aurora&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span>HS512<span class="token punctuation">,</span> <span class="token string">&quot;secret&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//解析</span>\n<span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">&quot;secret&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token class-name">SimpleDateFormat</span> simpleFormatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:m:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前时间: &quot;</span> <span class="token operator">+</span> simpleFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;过期时间: &quot;</span> <span class="token operator">+</span> simpleFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>claims<span class="token punctuation">.</span><span class="token function">getExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>当前时间<span class="token operator">:</span> <span class="token number">2022</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">4</span><span class="token operator">:</span><span class="token number">39</span>\n过期时间<span class="token operator">:</span> <span class="token number">2022</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">5</span><span class="token operator">:</span><span class="token number">38</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果此jwt已经过期，那么就会抛出一个异常</p>',41),J=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220313201117954.png",data:"aurora"})],-1),B=(0,p.uE)('<h3 id="自定义声明" tabindex="-1"><a class="header-anchor" href="#自定义声明" aria-hidden="true">#</a> 自定义声明</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;aurora_docs&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">&quot;qsyyke&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setIssuer</span><span class="token punctuation">(</span><span class="token string">&quot;by aurora&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">&quot;logo&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;aurora.jpg&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">&quot;site&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;https://aurora.xcye.xyz&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span>HS512<span class="token punctuation">,</span> <span class="token string">&quot;secret&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">&quot;secret&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;logo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;site&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><blockquote><p>自定义声明是通过<code>.claim(&quot;key&quot;,&quot;value&quot;)</code>进行设置的</p><p>获取值和map一样，使用<code>claims.get(&quot;key&quot;)</code>就可以获取到了</p></blockquote>',3),G={},N=(0,a(83744).Z)(G,[["render",function(n,s){const a=(0,p.up)("ExternalLinkIcon");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,o,c,l,u,i,r,k,b,d,m,g,h,v,y,(0,p._)("p",null,[f,q,w,(0,p._)("a",j,[x,(0,p.Wm)(a)]),S]),_,A,z,R,I,E,U,C,H,O,D,M,T,L,P,W,F,J,B],64)}]])}}]);