"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7477],{79766:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-48bddc8d",path:"/spring/security/%E5%9F%BA%E6%9C%AC%E8%A7%A3%E8%AF%BB.html",title:"",lang:"en-US",frontmatter:{date:"2022/3/11 10:23"},excerpt:"",headers:[{level:2,title:"UserDetails",slug:"userdetails",children:[]},{level:2,title:"UserDetailsService",slug:"userdetailsservice",children:[]},{level:2,title:"DaoAuthenticationProvider",slug:"daoauthenticationprovider",children:[]},{level:2,title:"执行的流程，默认配置",slug:"执行的流程-默认配置",children:[{level:3,title:"UsernamePasswordAuthenticationFilter过滤器",slug:"usernamepasswordauthenticationfilter过滤器",children:[]},{level:3,title:"AbstractUserDetailsAuthenticationProvider",slug:"abstractuserdetailsauthenticationprovider",children:[]},{level:3,title:"DaoAuthenticationProvider",slug:"daoauthenticationprovider-1",children:[]},{level:3,title:"继续",slug:"继续",children:[]},{level:3,title:"用户名和密码都正确",slug:"用户名和密码都正确",children:[]}]},{level:2,title:"总结",slug:"总结",children:[{level:3,title:"UserDetailsService UserDetails",slug:"userdetailsservice-userdetails",children:[]},{level:3,title:"PasswordEncoder",slug:"passwordencoder",children:[]}]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},88977:(n,s,a)=>{a.r(s),a.d(s,{default:()=>$});var e=a(66252);const t=(0,e._)("h2",{id:"userdetails",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#userdetails","aria-hidden":"true"},"#"),(0,e.Uk)(" UserDetails")],-1),o=(0,e._)("p",null,"用户登录时，系统会根据用户名，从存储设备查找该用户的密码及权限等，将其组装成一个UserDetails对象。并用UserDetails中的数据对用户进行认证，决定其输入的用户名/密码是否正确。",-1),p=(0,e._)("p",null,[(0,e.Uk)("此对象我们一般都不直接调用，而是使用"),(0,e._)("code",null,"UserDetailsService"),(0,e.Uk)("接口返回，我们可以实现此接口，然后返回一个"),(0,e._)("code",null,"UserDetails")],-1),c={href:"https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/dao-authentication-provider.html#servlet-authentication-daoauthenticationprovider",target:"_blank",rel:"noopener noreferrer"},i=(0,e._)("code",null,"DaoAuthenticationProvider",-1),l=(0,e.Uk)("验证"),r=(0,e._)("code",null,"UserDetails",-1),u=(0,e.Uk)("，然后返回一个已配置"),d={href:"https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-authentication",target:"_blank",rel:"noopener noreferrer"},k=(0,e._)("code",null,"Authentication",-1),h=(0,e.Uk)("的主体的主体。"),m=(0,e._)("code",null,"UserDetails UserDetailsService",-1),b=(0,e.uE)('<p>此接口中的方法，任何一个返回<code>false</code>都会导致认证失败</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDetails</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n\t<span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//权限 </span>\n\t<span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//密码</span>\n\t<span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//用户名</span>\n \n\t<span class="token keyword">boolean</span> <span class="token function">isAccountNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//账号是否未过期</span>\n\t<span class="token keyword">boolean</span> <span class="token function">isAccountNonLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//账号是否未锁定</span>\n\t<span class="token keyword">boolean</span> <span class="token function">isCredentialsNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//密码是否未过期</span>\n\t<span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//是否激活</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>例如</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">&quot;userDetailsService&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginService</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>\n\n  <span class="token annotation punctuation">@Autowired</span>\n  <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>\n\n  <span class="token annotation punctuation">@Override</span>\n  <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Users</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Users</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//数据库中，没有该条记录，认证失败</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token string">&quot;用户不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> grantedAuthorities <span class="token operator">=</span>\n      <span class="token class-name">AuthorityUtils</span><span class="token punctuation">.</span><span class="token function">commaSeparatedStringToAuthorityList</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>grantedAuthorities<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="userdetailsservice" tabindex="-1"><a class="header-anchor" href="#userdetailsservice" aria-hidden="true">#</a> UserDetailsService</h2><p>Spring Security中进行身份验证的是AuthenticationManager接口，ProviderManager是它的一个默认实现，但它并不用来处理身份认证，而是委托给配置好的AuthenticationProvider，每个AuthenticationProvider会轮流检查身份认证。检查后或者返回Authentication对象或者抛出异常。</p><p>验证身份就是加载响应的UserDetails，看看是否和用户输入的账号、密码、权限等信息匹配。此步骤由实现AuthenticationProvider的DaoAuthenticationProvider（它利用UserDetailsService验证用户名、密码和授权）处理。包含 GrantedAuthority 的 UserDetails对象在构建 Authentication对象时填入数据。</p>',7),v=(0,e.Uk)("Spring Security 提供"),g={href:"https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/in-memory.html#servlet-authentication-inmemory",target:"_blank",rel:"noopener noreferrer"},U=(0,e.Uk)("内存"),w=(0,e.Uk)("和"),A={href:"https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/jdbc.html#servlet-authentication-jdbc",target:"_blank",rel:"noopener noreferrer"},f=(0,e.Uk)("JDBC"),y=(0,e.Uk)("实现"),D=(0,e._)("code",null,"UserDetailsService",-1),P=(0,e.Uk)("。"),S=(0,e.uE)('<blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">UserDetails</span> loadedUser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote><h2 id="daoauthenticationprovider" tabindex="-1"><a class="header-anchor" href="#daoauthenticationprovider" aria-hidden="true">#</a> DaoAuthenticationProvider</h2><p><code>DaoAuthenticationProvider</code>是<code>AuthenticationProvider</code>接口的一个实现类，<code>DaoAuthenticationProvider</code>根据<code>UserDetailsService</code>和<code>PasswordEncoder</code>来验证用户名和密码</p><p>他执行的流程图如下</p>',4),E=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220311105937998.png",data:"aurora"})],-1),x=(0,e._)("p",null,"步骤如下",-1),q=(0,e.uE)("<li><p>认证过滤器读取到用户名和密码，然后将用户名和密码传递给<code>UsernamePasswordAuthenticationToken</code></p><p>``ProviderManager<code>是</code>AuthenticationManager`的一个实现类</p></li><li><p>然后<code>ProviderManager</code>是被配置用来使用<code>AuthenticationProvider</code>，因为我们要使用<code>DaoAuthenticationProvider</code>，<code>DaoAuthenticationProvider</code>是<code>AuthenticationProvider</code>的一个实现类</p><blockquote><p>所以如果有一个<code>AuthenticationProvider</code>对象，那么也就有了<code>DaoAuthenticationProvider</code>对象</p></blockquote></li><li><p><code>DaoAuthenticationProvider</code> 会从 <code>UserDetailsService</code>中寻找<code>UserDetails</code></p><blockquote><p><code>UserDetails</code>存储了用户的信息</p></blockquote></li>",3),_=(0,e._)("code",null,"DaoAuthenticationProvider",-1),j=(0,e.Uk)(" 然后会使用 "),C={href:"https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/password-encoder.html#servlet-authentication-password-storage",target:"_blank",rel:"noopener noreferrer"},B=(0,e._)("code",null,"PasswordEncoder",-1),F=(0,e.Uk)(" 来验证用户名和密码，用户名和密码信息是从第三步中返回回来的"),N=(0,e._)("code",null,"UserDetails",-1),T=(0,e.Uk)("对象中获取到的"),z=(0,e.Uk)("当身份信息验证成功后，"),L={href:"https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-authentication",target:"_blank",rel:"noopener noreferrer"},M=(0,e._)("code",null,"Authentication",-1),R=(0,e.Uk)("会返回"),W=(0,e._)("code",null,"UsernamePasswordAuthenticationToken",-1),H=(0,e.Uk)("，并且将存在"),G=(0,e._)("code",null,"UserDetails",-1),O=(0,e.Uk)("的"),Q=(0,e._)("code",null,"UserDetailsService",-1),I=(0,e.Uk)("对象返回。"),J=(0,e.uE)('<h2 id="执行的流程-默认配置" tabindex="-1"><a class="header-anchor" href="#执行的流程-默认配置" aria-hidden="true">#</a> 执行的流程，默认配置</h2><h3 id="usernamepasswordauthenticationfilter过滤器" tabindex="-1"><a class="header-anchor" href="#usernamepasswordauthenticationfilter过滤器" aria-hidden="true">#</a> UsernamePasswordAuthenticationFilter过滤器</h3><ol><li>浏览器发送请求，需要登录，输入错误用户名aurora和错误密码</li><li><code>UsernamePasswordAuthenticationFilter</code>过滤器中的<code>attemptAuthentication()</code>方法执行</li></ol><h4 id="attemptauthentication" tabindex="-1"><a class="header-anchor" href="#attemptauthentication" aria-hidden="true">#</a> attemptAuthentication()</h4><ol><li><p>判断请求的方法，如果不是<code>post</code>，那么抛出异常</p></li><li><p>通过从<code>request</code>对象中，获取到用户名和密码</p></li><li><p>根据获取到的用户名和密码，创建<code>UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(username, password)</code>对象</p><blockquote><p>在构建这个对象的过程中，会对<code>authenticated</code>赋值为false，也就是此用户还没有认证</p></blockquote></li><li><p>此方法执行完，会根据<code>UsernamePasswordAuthenticationToken</code>对象实例化一个<code>Authentication</code>对象</p></li></ol><h3 id="abstractuserdetailsauthenticationprovider" tabindex="-1"><a class="header-anchor" href="#abstractuserdetailsauthenticationprovider" aria-hidden="true">#</a> AbstractUserDetailsAuthenticationProvider</h3><p>然后程序便会进入到<code>AbstractUserDetailsAuthenticationProvider</code>抽象类中的<code>authenticate(Authentication authentication)</code>方法执行，此抽象类是<code>DaoAuthenticationProvider</code>类的父类</p><p>当执行到下面这段代码的时候，便会跳到<code>DaoAuthenticationProvider</code>中去执行</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>\n    user <span class="token operator">=</span> <span class="token function">retrieveUser</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">)</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>因为在<code>AbstractUserDetailsAuthenticationProvider</code>类中，<code>retrieveUser()</code>是一个抽象方法，<code>DaoAuthenticationProvider</code>是此抽象类的子类，所以就会跳到<code>DaoAuthenticationProvider</code>中</p></blockquote><h3 id="daoauthenticationprovider-1" tabindex="-1"><a class="header-anchor" href="#daoauthenticationprovider-1" aria-hidden="true">#</a> DaoAuthenticationProvider</h3><p>执行完上面的方法，程序便跳到<code>DaoAuthenticationProvider</code>类中，执行<code>retrieveUser(String username, UsernamePasswordAuthenticationToken authentication)</code>方法</p><ol><li><p>执行<code>UserDetailsService</code>类中的<code>loadUserByUsername(username)</code>方法，此方法返回的是一个<code>UserDetails</code>对象</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">UserDetails</span> loadedUser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>此<code>loadedUser</code>对象中，存放的是正确的用户名和密码</p></blockquote><p>因为这里输入的是一个错误用户名和错误密码，所以执行抛出一个<code>UsernameNotFoundException</code>异常</p><p>如果此用户存在的话，那么就会通过<code>User</code>类，根据用户名，密码等实例化<code>UserDetails</code>对象</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">isAccountNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                user<span class="token punctuation">.</span><span class="token function">isCredentialsNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">isAccountNonLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果用户不存在，那么就<a href="#%E7%94%A8%E6%88%B7%E4%B8%8D%E5%AD%98%E5%9C%A8">跳到</a></p></li><li><p>如果用户名是正确的，那么程序会继续<a href="#%E7%BB%A7%E7%BB%AD">执行</a></p></li></ol><h4 id="用户不存在" tabindex="-1"><a class="header-anchor" href="#用户不存在" aria-hidden="true">#</a> 用户不存在</h4><ol><li>会跳到<code>AbstractAuthenticationProcessingFilter</code>类中的<code>doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</code>方法，在此方法中，会抛出一个异常，然后执行<code>unsuccessfulAuthentication(request, response, ex);</code>方法</li><li>然后跳到<code>LogoutFilter</code>类中的<code>doFilter(xxx)</code></li><li>然后后续还有一个过滤器需要执行</li></ol><h3 id="继续" tabindex="-1"><a class="header-anchor" href="#继续" aria-hidden="true">#</a> 继续</h3><p>这一步还是在<code>AbstractUserDetailsAuthenticationProvider</code>类中的<code>authenticate(Authentication authentication)</code>方法中执行</p><p>通过<code>AbstractUserDetailsAuthenticationProvider</code>的子类<code>DefaultPreAuthenticationChecks</code>执行<code>retrieveUser()</code>方法获取大到正确的用户名和密码对象后</p><p>然后会跳到<code>DefaultPreAuthenticationChecks</code>类中的<code>check(UserDetails user)</code>方法，检查用户是否被锁着，被锁住的的用户无法被验证</p><blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//对应执行下面代码</span>\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>preAuthenticationChecks<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">additionalAuthenticationChecks</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">)</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></blockquote><p>在这个方法中，会依次调用<code>UserDetails</code>中的</p><blockquote><p>isAccountNonLocked(),isEnabled(),isAccountNonExpired()</p></blockquote><p>三个方法，如果里面的值为false，那么都将抛出对应的异常</p><p>当执行完<code>this.preAuthenticationChecks.check(user);</code>之后，便会执行<code>additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken) authentication);</code>，验证用户传入的密码是否正确</p><p>其中user是存放正确的用户名和密码的<code>UserDetails</code>对象，而<code>(UsernamePasswordAuthenticationToken) authentication)</code>是用户当前输入的<code>UserDetails</code>对象</p><p>对密码进行检查，调用的是<code>PasswordEncoder</code>对象中的<code>matches()</code>方法，如果密码不正确，那么就会抛出异常，然后后面的过程，也基本上和用户名错误差不多</p><p>如果此步密码正确，那么请<a href="#%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E9%83%BD%E6%AD%A3%E7%A1%AE">跳到</a></p><h3 id="用户名和密码都正确" tabindex="-1"><a class="header-anchor" href="#用户名和密码都正确" aria-hidden="true">#</a> 用户名和密码都正确</h3><ol><li><p>执行<code>this.postAuthenticationChecks.check(user);</code>判断用户的密码凭证是否过期，最终也就是调用<code>UserDetails</code>对象中的<code>isCredentialsNonExpired()</code>方法，进行判断</p><p>如果已经过期，就会抛出异常</p></li><li><p>然后就会通过执行<code>createSuccessAuthentication(principalToReturn, authentication, user);</code>返回一个已经验证成功的<code>Authentication</code>对象，此<code>Authentication</code>对象最终是使用<code>UsernamePasswordAuthenticationToken</code>类创建的</p></li></ol><p>中间还有其他的一些过程，就省略了，最后会在<code>AbstractAuthenticationProcessingFilter</code>类中的<code>doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</code>方法中，调用<code>successfulAuthentication(request, response, chain, authenticationResult);</code>方法</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><h3 id="userdetailsservice-userdetails" tabindex="-1"><a class="header-anchor" href="#userdetailsservice-userdetails" aria-hidden="true">#</a> UserDetailsService UserDetails</h3>',32),Y=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220311191851697.png",data:"aurora"})],-1),Z=(0,e.uE)('<p>通过上面的源码分析之后，我们发现，通过<code>UserDetailsService</code>对象获取<code>UserDetails</code>对象，是发生在<code>DaoAuthenticationProvider</code>类中的处<code>UserDetails loadedUser = this.getUserDetailsService().loadUserByUsername(username);</code>这段代码中的</p><p>如果当前应用中，我们自己创建一个类实现<code>UserDetailsService</code>接口，并将其使用<code>@Component</code>注解添加到容器中的话，那么此处的<code>this.getUserDetailsService()</code>对象就是我们自己实现的这个<code>UserDetailsService</code>对象</p><p>而且我们也可以自己写一个类，实现<code>UserDetails</code>接口，然后在我们自己的<code>UserDetailsService</code>实现类中，将此<code>UserDetails</code>实现类<code>return</code>就行了</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDetails</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//权限 </span>\n  <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//密码</span>\n  <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//用户名</span>\n\n  <span class="token keyword">boolean</span> <span class="token function">isAccountNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//账号是否未过期</span>\n  <span class="token keyword">boolean</span> <span class="token function">isAccountNonLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//账号是否未锁定</span>\n  <span class="token keyword">boolean</span> <span class="token function">isCredentialsNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//密码是否未过期</span>\n  <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//是否激活</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>UserDetails</code>中的方法逻辑，我们想怎么写，就怎么写</p><blockquote><p>而且值得注意的是，<code>DaoAuthenticationProvider</code>类中的一些方法，比如setUserDetailsService()，setPasswordEncoder()在程序启动的时候，便会执行</p></blockquote><h3 id="passwordencoder" tabindex="-1"><a class="header-anchor" href="#passwordencoder" aria-hidden="true">#</a> PasswordEncoder</h3><p>我们也可以自己实现<code>PasswordEncoder</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPasswordEncoder</span> <span class="token keyword">implements</span> <span class="token class-name">PasswordEncoder</span> <span class="token punctuation">{</span>\n\n  <span class="token annotation punctuation">@Override</span>\n  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> rawPassword<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;zhixing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token annotation punctuation">@Override</span>\n  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> rawPassword<span class="token punctuation">,</span> <span class="token class-name">String</span> encodedPassword<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;qipei&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>自定义我们自己的密码匹配和密码编码逻辑</p><p>但是spring security中，已经写好了一些实现类，我们直接使用<code>@Bean</code>配置一下就行</p>',11),K=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220311191701772.png",data:"aurora"})],-1),V=(0,e.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token class-name">PasswordEncoder</span> <span class="token function">password</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>在进行密码比对的时候，一定要保证数据库中，或者是UserDetailsService返回的对象中的密码是通过PasswordEncoder类中的encode()方法返回的字符串，否则验证不会通过</p><p><code>matches(CharSequence rawPassword, String encodedPassword)</code>方法的第一个参数是用户输入的密码字符串，没有经过任何处理，而第二个是经过<code>encode()</code>方法处理后的字符串，不能看到</p><p>而且我们也不能将经过<code>encode()</code>处理后的密码，解析成明文</p></blockquote>',2),X={},$=(0,a(83744).Z)(X,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,o,p,(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e._)("a",c,[i,(0,e.Wm)(a)]),l,r,u,(0,e._)("a",d,[k,(0,e.Wm)(a)]),h,m])]),b,(0,e._)("p",null,[v,(0,e._)("a",g,[U,(0,e.Wm)(a)]),w,(0,e._)("a",A,[f,(0,e.Wm)(a)]),y,D,P]),S,E,x,(0,e._)("ol",null,[q,(0,e._)("li",null,[(0,e._)("p",null,[_,j,(0,e._)("a",C,[B,(0,e.Wm)(a)]),F,N,T])]),(0,e._)("li",null,[(0,e._)("p",null,[z,(0,e._)("a",L,[M,(0,e.Wm)(a)]),R,W,H,G,O,Q,I])])]),J,Y,Z,K,V],64)}]])}}]);