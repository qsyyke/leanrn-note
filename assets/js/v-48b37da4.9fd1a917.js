"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[218],{28642:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-48b37da4",path:"/javaweb/%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8.html",title:"javaweb过滤器和监听器",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"原理",slug:"原理",children:[]},{level:2,title:"实现步骤",slug:"实现步骤",children:[]},{level:2,title:"配置拦截路径",slug:"配置拦截路径",children:[{level:3,title:"使用注解进行配置",slug:"使用注解进行配置",children:[]},{level:3,title:"通过web.xml进行配置",slug:"通过web-xml进行配置",children:[]}]},{level:2,title:"过滤器的执行流程",slug:"过滤器的执行流程",children:[]},{level:2,title:"拦截方式配置",slug:"拦截方式配置",children:[]},{level:2,title:"过滤器链",slug:"过滤器链",children:[]},{level:2,title:"排除某个资源",slug:"排除某个资源",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},83957:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var e=a(66252);const t=(0,e.uE)('<h1 id="javaweb过滤器和监听器" tabindex="-1"><a class="header-anchor" href="#javaweb过滤器和监听器" aria-hidden="true">#</a> javaweb过滤器和监听器</h1><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><img src="http://ooszy.cco.vin/img/blog-note/image-20210224201243081.png?x-oss-process=style/pictureProcess1" alt="image-20210224201243081" style="zoom:67%;"><blockquote><p><code>过滤器，监听器和servlet被称为javaweb的三大组件</code></p></blockquote><p>作用：将请求拦截下来，对这个请求完成一些特殊的操作，比如验证用户是否登录，如果过滤器没有放行的话，请求会一直处于拦截状态</p><p>还可以为所有的请求设置编码，这样就不用对每一个请求都单独设置编码，可以节约时间</p><h2 id="实现步骤" tabindex="-1"><a class="header-anchor" href="#实现步骤" aria-hidden="true">#</a> 实现步骤</h2><ol><li><p>定义一个类，实现<code>Filter</code>接口，重写里面的三个方法</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>\t<span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> init <span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//此方法是服务器放启动的时候，就会执行，并不是需要等访问资源时，才会执行</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> doFilter <span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> \t\tservletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//只要浏览器发送一次请求，并且这个请求的路径是在过滤器的过滤范围类，只要有一次请求，就会执行一次</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> destroy <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//服务器被正常关闭时，执行，正常关闭才会执行</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ol><h2 id="配置拦截路径" tabindex="-1"><a class="header-anchor" href="#配置拦截路径" aria-hidden="true">#</a> 配置拦截路径</h2><h3 id="使用注解进行配置" tabindex="-1"><a class="header-anchor" href="#使用注解进行配置" aria-hidden="true">#</a> 使用注解进行配置</h3><ul><li>具体资源路径：<code>/index.jsp</code> 只有访问index.jsp资源时，过滤器才会被执行</li><li>拦截目录：<code> /user/*</code> 访问/user下的所有资源时，过滤器都会被执行</li><li>后缀名拦截： <code>*.jsp</code> 访问所有后缀名为jsp资源时，过滤器都会被执行</li><li>拦截所有资源：<code>/*</code> 访问所有资源时，过滤器都会被执行</li></ul><p>使用：<code>@WebFilter(&quot;/index.jsp&quot;)</code>例如这样进行配置</p><h3 id="通过web-xml进行配置" tabindex="-1"><a class="header-anchor" href="#通过web-xml进行配置" aria-hidden="true">#</a> 通过web.xml进行配置</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>demon1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>com.chu.filter.FilterDemon1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>demon1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="过滤器的执行流程" tabindex="-1"><a class="header-anchor" href="#过滤器的执行流程" aria-hidden="true">#</a> 过滤器的执行流程</h2>',15),p=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210224204535086.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),l=(0,e.uE)('<p>配置的过滤路径是<code>/*</code></p><ol><li>当我们浏览器发送请求的时候，会首先经过过滤器，会执行<code>filterChain.doFilter(servletRequest,servletResponse);</code>上部分的代码</li><li>如果过滤器中没有<code>filterChain.doFilter(servletRequest,servletResponse);</code>，那么请求会在此处进行拦截，服务器不会对返回任何的响应，因为响应是发生在这一串代码之后</li><li>执行<code>filterChain.doFilter(servletRequest,servletResponse);</code>，然后服务器像浏览器返回响应，浏览器接收到响应，并为此展示数据</li><li>当响应执行完毕之后，就会执行<code>filterChain.doFilter(servletRequest,servletResponse);</code>最后的代码块(<code>响应代码块执行完毕</code>)</li></ol><h2 id="拦截方式配置" tabindex="-1"><a class="header-anchor" href="#拦截方式配置" aria-hidden="true">#</a> 拦截方式配置</h2><p>可以单独的为<code>请求，转发，错误跳转资源，异步访问，包含资源进行单独的配置</code></p><ul><li>使用注解进行配置(<code>设置DispatcherType的值</code>)</li></ul><blockquote><p>REQUEST：默认值。浏览器直接请求资源 FORWARD：转发访问资源 INCLUDE：包含访问资源 ERROR：错误跳转资源 ASYNC：异步访问资源</p></blockquote><p>例如<code>DispatcherType.REQUEST</code>这样配置，就是浏览器进行请求的时候，就会触发过滤器</p><p><code>DispatcherType.FORWARD</code>服务器进行请求转发时，才会触发过滤器</p><p>如果一个<code>servlet</code>文件中，没有进行请求转发，那么不会触发过滤器<code>DispatcherType.REQUEST</code></p><p>但是，如果配置了<code>DispatcherType...</code>，没有配置过滤路径的话，那么也不会有任何的过滤效果，所以出了配置<code>资源被访问的方式外，还需要配置过滤路径</code></p><blockquote><p><code>@WebFilter(dispatcherTypes = DispatcherType.REQUEST,value = &quot;/*&quot;)</code></p></blockquote><ul><li><code>web.xml</code>设置<code>&lt;dispatcher&gt;&lt;/dispatcher&gt;</code>标签即可</li></ul><h2 id="过滤器链" tabindex="-1"><a class="header-anchor" href="#过滤器链" aria-hidden="true">#</a> 过滤器链</h2><p>有时候，单独的一个过滤器并不能满足我们的需求，这个时候，我们可以多创建几个过滤器进行组合使用，这个就是过<code>滤器链</code></p>',14),c=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("p",null,"执行顺序"),(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210224211626355.png?x-oss-process=style/pictureProcess1",data:"aurora"})])])],-1),o=(0,e.uE)("<p>通过看图就可以发现，去的时候顺序是<code>过滤器1，过滤器2</code>，但是回来的时候，最先经过的是<code>过滤器2</code>，这和我们日常走路相似</p><p>所以执行顺序为</p><blockquote><p>过滤器1</p><p>过滤器2</p><p>.......</p><p>过滤器2</p><p>过滤器1</p></blockquote><p>那么如何判断谁是第一最先执行的过滤器？</p><ul><li>如果使用注解进行过滤路径配置</li></ul><p><code>那么是对过滤器的类名进行字符串的比较，字符串值小的，在前面先执行，反之，并不是过滤器的名字小的先执行</code></p><blockquote><p>@WebFilter(filterName = &quot;ab&quot;,value = &quot;/*&quot;) filtername为过滤器名字，并不是这个小的就先执行</p></blockquote>",7),i=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image-20210224213110909",originSrc:"C:%5CUsers%5Cchuchen%5CPictures%5C%E8%A7%86%E9%A2%91%E6%88%AA%E5%9B%BE%5Cjavaweb%5Cweb%5Cimage-20210224213110909.png",data:"aurora"})],-1),u=(0,e.uE)('<p>3小于0，所以<code>FileterDemon04</code>的过滤器会先执行</p><ul><li><p>使用<code>web.xml</code>进行配置</p><blockquote><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>demon1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>&lt;filter-mapping&gt;</code>谁在前面，谁先执行，因为如果有多个过滤器的话，那么我们就会配置多个<code>&lt;filter-mapping&gt;</code></p></blockquote></li></ul><h2 id="排除某个资源" tabindex="-1"><a class="header-anchor" href="#排除某个资源" aria-hidden="true">#</a> 排除某个资源</h2><p>有时候，并不是所有的资源进行访问的时候，我们都需要进行拦截，像js，css，还有验证码等等一些对于页面的展示非常重要的资源，我们不应该对其进行拦截，否则的话，就会发送页面非常丑的情况，因为js,css等等，已经被我们进行拦截了，</p><p>排除某个资源的方法</p><ol><li><p>获取请求资源的路径</p><p><code>request.getRequestURI()</code></p></li><li><p>使用<code>String</code>中的某些方法进行路径的判断，判断是否包含某些资源</p></li></ol><h1 id="listenner" tabindex="-1"><a class="header-anchor" href="#listenner" aria-hidden="true">#</a> Listenner</h1><p>这是javaweb的三大组件之一</p><ul><li>创建步骤</li></ul><ol><li>定义一个类，实现<code>ServletContextListener</code>接口</li></ol><ul><li>方法</li></ul><blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>                                                 \n<span class="token keyword">public</span> <span class="token keyword">void</span> contextInitialized <span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token class-name">ServletContext</span>对象被创建的时候，执行此方法   \n只要服务器启动，就会创建<span class="token class-name">ServletContext</span>对象 那么就会执行这个方法\n<span class="token punctuation">}</span>                                                         \n\n<span class="token annotation punctuation">@Override</span>                                                 \n<span class="token keyword">public</span> <span class="token keyword">void</span> contextDestroyed <span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n<span class="token class-name">ServletContext</span>对象被销毁时，执行此方法                                               \n<span class="token punctuation">}</span>                                                         \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></blockquote><ul><li><p>也可以通过idea直接创建，</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>chu<span class="token punctuation">.</span>listenner</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@WebListener</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListenerDemon2</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span><span class="token punctuation">,</span> <span class="token class-name">HttpSessionListener</span><span class="token punctuation">,</span> <span class="token class-name">HttpSessionAttributeListener</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">ListenerDemon2</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> contextInitialized <span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">/* This method is called when the servlet context is initialized(when the Web application is deployed). */</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> contextDestroyed <span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">/* This method is called when the servlet Context is undeployed or Application Server shuts down. */</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> sessionCreated <span class="token punctuation">(</span><span class="token class-name">HttpSessionEvent</span> se<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">/* Session is created. */</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> sessionDestroyed <span class="token punctuation">(</span><span class="token class-name">HttpSessionEvent</span> se<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">/* Session is destroyed. */</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> attributeAdded <span class="token punctuation">(</span><span class="token class-name">HttpSessionBindingEvent</span> sbe<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">/* This method is called when an attribute is added to a session. */</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> attributeRemoved <span class="token punctuation">(</span><span class="token class-name">HttpSessionBindingEvent</span> sbe<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">/* This method is called when an attribute is removed from a session. */</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> attributeReplaced <span class="token punctuation">(</span><span class="token class-name">HttpSessionBindingEvent</span> sbe<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">/* This method is called when an attribute is replaced in a session. */</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div></li><li><p>配置</p><p><code>web.xml</code>配置</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>cn.itcast.web.listener.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>使用注解</code></p><blockquote><p>因为注解中什么也没有，所以直接写注解就行</p><p><code>public @interface WebListener { String value() default &quot;&quot;; }</code></p></blockquote></li><li><p>使用监听器进行资源的加载</p></li></ul><p>因为监听器在服务器启动的时候，就会被执行，所以可以用监听器对资源进行加载</p><p>步骤</p><ol><li><p>通过<code>ServletContextEvent</code>对象获取<code>ServletContext</code>对象</p></li><li><p>通过<code>ServletContext.getInitParameter(&quot;chu&quot;)</code>获取<code>web.xml</code>文件中配置的文件</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>                                     \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>chu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>                    \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>WEB-INF/classes/f.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>                                    \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p><code>servletContext.getRealPath(chu)</code>获取此文件的真实路径，然后就可以使用IO流的知识....</p></li></ol><p>在<code>web.xml</code>中对资源文件进行配置的时候，可以多配置几个文件</p><p><code>String getInitParameter(String var1);</code>一定要保证<code>var1</code>值在<code>web.xml</code>中到的<code>&lt;context-param&gt;</code>存在</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>\t<span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> contextInitialized <span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//获取ServletContext对象</span>\n        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> sce<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> chu <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;chu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> realPath <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span>chu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',19),r={},k=(0,a(83744).Z)(r,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,p,l,c,o,i,u],64)}]])}}]);