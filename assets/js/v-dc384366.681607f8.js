"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4166],{88841:(e,s,l)=>{l.r(s),l.d(s,{data:()=>n});const n={key:"v-dc384366",path:"/redis/",title:"什么是redis",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"数据库时代的发展",slug:"数据库时代的发展",children:[{level:3,title:"单机数据库时代，一个应用，就创建一个数据库实例",slug:"单机数据库时代-一个应用-就创建一个数据库实例",children:[]},{level:3,title:"缓存，水平切分时代：",slug:"缓存-水平切分时代",children:[]},{level:3,title:"读写分离时代",slug:"读写分离时代",children:[]},{level:3,title:"分库分表时代",slug:"分库分表时代",children:[]},{level:3,title:"上面的方式，都是存在于关系型数据库的情况",slug:"上面的方式-都是存在于关系型数据库的情况",children:[]}]},{level:2,title:"基于内存",slug:"基于内存",children:[]},{level:2,title:"windows启动Redis",slug:"windows启动redis",children:[]},{level:2,title:"windows退出客户端",slug:"windows退出客户端",children:[]},{level:2,title:"Linux安装Redis",slug:"linux安装redis",children:[{level:3,title:"启动",slug:"启动",children:[]},{level:3,title:"关闭Redis",slug:"关闭redis",children:[]},{level:3,title:"客户端连接",slug:"客户端连接",children:[]},{level:3,title:"客户端退出",slug:"客户端退出",children:[]}]},{level:2,title:"测试Redis的服务性能",slug:"测试redis的服务性能",children:[]},{level:2,title:"ping，命令",slug:"ping-命令",children:[]},{level:2,title:"查看redis服务器的统计信息：info",slug:"查看redis服务器的统计信息-info",children:[]},{level:2,title:"Redis的16个库",slug:"redis的16个库",children:[{level:3,title:"切换库",slug:"切换库",children:[]},{level:3,title:"查看当前数据库中key的数目：dbsize",slug:"查看当前数据库中key的数目-dbsize",children:[]},{level:3,title:"查看当前数据库中有哪些key：keys *",slug:"查看当前数据库中有哪些key-keys",children:[]},{level:3,title:"清空当前库：flushdb",slug:"清空当前库-flushdb",children:[]},{level:3,title:"清空所有数据库：flushall",slug:"清空所有数据库-flushall",children:[]},{level:3,title:"config get * 获得redis的所有配置值",slug:"config-get-获得redis的所有配置值",children:[]}]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},88804:(e,s,l)=>{l.r(s),l.d(s,{default:()=>V});var n=l(66252);const i=(0,n.uE)('<h1 id="什么是redis" tabindex="-1"><a class="header-anchor" href="#什么是redis" aria-hidden="true">#</a> 什么是redis</h1><p>Redis是一个数据库软件，DBMS，</p><h2 id="数据库时代的发展" tabindex="-1"><a class="header-anchor" href="#数据库时代的发展" aria-hidden="true">#</a> 数据库时代的发展</h2><h3 id="单机数据库时代-一个应用-就创建一个数据库实例" tabindex="-1"><a class="header-anchor" href="#单机数据库时代-一个应用-就创建一个数据库实例" aria-hidden="true">#</a> 单机数据库时代，一个应用，就创建一个数据库实例</h3><h3 id="缓存-水平切分时代" tabindex="-1"><a class="header-anchor" href="#缓存-水平切分时代" aria-hidden="true">#</a> 缓存，水平切分时代：</h3><blockquote><p>比如在面对一个购物系统的时候，会出现上亿条的订单，物流等等记录，每一个数据库的空间都是有限的，不能够存放这么多张表，这个时候，就可以使用切分的方式</p></blockquote><p>订单表，有很多条，就单独创建一个数据库用来存放这个订单的数据</p><p>其他订单量小的表，可以几张表存放在一个数据库中，到时候需要使用的时候，就直接连接到那个数据库就行</p><h3 id="读写分离时代" tabindex="-1"><a class="header-anchor" href="#读写分离时代" aria-hidden="true">#</a> 读写分离时代</h3><blockquote><p>像京东，淘宝这样，每天，每一个时间，都会有很多的订单查询，修改等等的操作，这个时候，水平切分的方式已经不能够满足用户的需求，这个时候就需要使用到数据库的集群，</p><p>读写分离的方式，也是，所有的读订单的操作，都是那个或几个数据库中进行，所有的修改操作都去另外的几个数据库中进行，等等，所有的数据库是同步的，也就是某个数据库中的表发生了改变，那么就会立马将这个记录通过到其他的数据库中(有这条记录的表)进行修改，这种集群的方式就可以使得在拥有很大并发量的情况下，用户能够正常的进行操作</p></blockquote><h3 id="分库分表时代" tabindex="-1"><a class="header-anchor" href="#分库分表时代" aria-hidden="true">#</a> 分库分表时代</h3><blockquote><p>对于很多很大的数据，可能读写分离的方式又不能满足要求了，就比如某个订单拥有3亿多条记录，读写分离的方式可能还在存在慢的情况，这个时候就可以使用分库分表的方式，也就是将所有的记录进行拆分，这一天，这一个月，这一年，某个时刻，都用来创建数据库，可能一年就会创建12个数据库(按月)或者365（按天），这个时候，就可以将一个月或者一天的记录放在这个数据库中，这样用户进行操作的时候，就可以去那一个月或者天当中的库中查找</p><p>但是可能我们需要自己写一个程序，根据用户的不能操作去找不同的数据库</p></blockquote><p><code>上面的技术并没有消失，我们可能都还会使用，需要根据实际的情况决定使用哪种方式</code></p><h3 id="上面的方式-都是存在于关系型数据库的情况" tabindex="-1"><a class="header-anchor" href="#上面的方式-都是存在于关系型数据库的情况" aria-hidden="true">#</a> <code> 上面的方式，都是存在于关系型数据库的情况</code></h3><p>所以就有了非关系型数据库的发展，从<code>底层该表了库的存储结构</code>，不再使用表的方式存储数据，而是使用聚合数据结构的方式进行存储</p><h1 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> Redis</h1><p>Redis是使用<code>键值对</code>方式(k value)</p><p>是使用C语言编写的，开源，<code>基于内存运行的</code></p><h2 id="基于内存" tabindex="-1"><a class="header-anchor" href="#基于内存" aria-hidden="true">#</a> 基于内存</h2><blockquote><p><strong><code>一定要记住基于内存运行</code></strong></p></blockquote><p>为什么要基于内存？</p><blockquote><p>进行操作的时候，Redis是将数据写入内存，内存的运行速率是很大的，所以这就可以操作读写的速度非常快</p></blockquote><p>Redis中的数据大多数情况下，都是在内存中，</p><p>缺陷就是，内存的容量小，Redis追求的是速度的极致，所以不能存放太多数据的情况，并且存放在Redis中的数据，最好是那种，经常使用，经常读写的数据</p><p>对于需要存放很大的数据记录，就不应该使用Redis进行存储，可以使用其他的非关系型数据库，像(mongDB)</p><h1 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h1><p>一般是安装在Linux上，但是也可以安装在Windows上</p><p>安装步骤</p>',28),r=(0,n._)("ol",null,[(0,n._)("li",null,[(0,n._)("p",null,[(0,n.Uk)("下载"),(0,n._)("code",null,"zip"),(0,n.Uk)("包，解压")])]),(0,n._)("li",null,[(0,n._)("p",null,"cmd进入到这个解压包")]),(0,n._)("li",null,[(0,n._)("p",null,[(0,n.Uk)("输入命令"),(0,n._)("code",null,"redis-server redis.windows.conf")])]),(0,n._)("li",null,[(0,n._)("p",null,[(0,n.Uk)("开启服务，输入命令"),(0,n._)("code",null,"redis-server --service-install redis.windows.conf")])]),(0,n._)("li",null,[(0,n._)("p",null,"手动开启服务"),(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210305213204405.png?x-oss-process=style/pictureProcess1",data:"aurora"})])])],-1),a=(0,n.uE)('<blockquote><p>常用命令</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>卸载服务：redis-server --service-uninstall\n开启服务：redis-server --service-start\n停止服务：redis-server --service-stop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></blockquote><p>更改参数</p><blockquote><p>服务器端：<code>redis.windows-service.conf</code>改端口：<code>port 6379</code></p><p>客户端：<code>redis.windows.conf</code></p></blockquote><h2 id="windows启动redis" tabindex="-1"><a class="header-anchor" href="#windows启动redis" aria-hidden="true">#</a> windows启动Redis</h2><p>因为Redis的服务器和客户端都是使用电脑，多以需要开两个cmd窗口，一个作为服务器，一个作为客户端</p><p>启动都需要进入到Redis的目录中，</p><ul><li>第一种</li></ul><p>启动服务器，命令</p><blockquote><p><code>redis-server.exe redis.windows.conf</code></p></blockquote><p>启动客户端</p><blockquote><p><code>redis-cli.exe -h 127.0.0.1 -p 6379</code></p></blockquote><ul><li><p>第二种方式</p><p>启动服务器的方式一样</p><p>客户端进入Redis目录，输入</p><p><code>redis-cli</code>,也就是打开此目录中的<code>redis-cli.exe</code>文件</p><p>此客户端是Redis自带的客户端，只要安装了Redis就有这个客户端</p></li></ul><p>默认连接的是本机上的Redis</p><p>也可以通过主机连接其他服务器上的Redis服务</p><blockquote><p><code>redis-cli.exe -h IP地址 -p 端口</code></p></blockquote><h2 id="windows退出客户端" tabindex="-1"><a class="header-anchor" href="#windows退出客户端" aria-hidden="true">#</a> windows退出客户端</h2><blockquote><p><code>exit</code></p><p><code>quit</code></p></blockquote><h2 id="linux安装redis" tabindex="-1"><a class="header-anchor" href="#linux安装redis" aria-hidden="true">#</a> Linux安装Redis</h2><ol><li><p>运行<code>wget http:``//download.redis.io/releases/redis-5.0.7.tar.gz</code></p></li><li><p>解压<code>tar -zvxf redis-5.0.7.tar.gz</code></p></li><li><p>进入到Redis解压目录中 执行<code>make</code>命令进行编译，这里如果发生意外</p><p>https://www.bilibili.com/video/BV1Uz4y1X72A?p=5</p></li><li><p>编译完成之后，就执行<code>make install</code>，Redis是使用C语言写的，需要进行编译</p></li></ol><h3 id="启动" tabindex="-1"><a class="header-anchor" href="#启动" aria-hidden="true">#</a> 启动</h3><p>服务器启动</p><blockquote><p>后台启动<code>redis-service redis.conf</code>(需要将其设置为守护线程)</p><p>前台启动<code>redis-service</code></p><p>启动时，可以指定配置文件进行启动：<code>redis-server redis.conf &amp;</code></p><p>最好是使用后台启动的方式，如果使用配置文件进行启动，并且没有设置守护线程，那么还是前台启动</p></blockquote><p>查看端口号</p><blockquote><p><code>ps -ef|grep redis</code></p></blockquote>',24),c=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210305232021457.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),o=(0,n._)("p",null,"使用命令",-1),d=(0,n._)("blockquote",null,[(0,n._)("p",null,[(0,n._)("code",null,"cd src")]),(0,n._)("p",null,[(0,n._)("code",null,"ls"),(0,n.Uk)("可以看到编译后的文件")])],-1),t=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210305232324347.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),p=(0,n._)("p",null,"绿色的文件都是可执行的文件",-1),u=(0,n._)("ul",null,[(0,n._)("li",null,[(0,n._)("code",null,"make install"),(0,n.Uk)("命令的作用就是，将src目录下编译的可执行文件拷贝到"),(0,n._)("code",null,"usr/local/bin"),(0,n.Uk)("目录中，这样在任意位置都可以执行这些文件")])],-1),_=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210305232727594.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),b=(0,n.uE)('<h3 id="关闭redis" tabindex="-1"><a class="header-anchor" href="#关闭redis" aria-hidden="true">#</a> 关闭Redis</h3><ul><li><p>暴力方式</p><p>直接断开连接</p></li><li><p><code>ps -ef|grep redis</code>查看端口，然后结束任务</p></li><li><p><code>redis-cli shutdown</code>推荐，暴力的方式，数据可能会丢失</p></li><li><p>如果是前台启动，则输入<code>Ctrl + C</code>直接关闭</p></li></ul><h3 id="客户端连接" tabindex="-1"><a class="header-anchor" href="#客户端连接" aria-hidden="true">#</a> 客户端连接</h3><p>使用命令</p><blockquote><p><code>redis-cli</code>，需要先打开服务器，这种方式默认连接的是本机上的Redis</p></blockquote><p>连接某个IP中的Redis</p><blockquote><p><code>redis-cli -h IP地址 -p 端口(空格)</code></p></blockquote><h3 id="客户端退出" tabindex="-1"><a class="header-anchor" href="#客户端退出" aria-hidden="true">#</a> 客户端退出</h3><p><code>quit or exit</code></p><h1 id="redis基本知识" tabindex="-1"><a class="header-anchor" href="#redis基本知识" aria-hidden="true">#</a> Redis基本知识</h1><h2 id="测试redis的服务性能" tabindex="-1"><a class="header-anchor" href="#测试redis的服务性能" aria-hidden="true">#</a> 测试Redis的服务性能</h2><blockquote><p><code>redis-benchmark</code></p></blockquote>',12),h=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210306091624123.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),m=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210306091638509.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),g=(0,n.uE)('<div class="language-ssh ext-ssh line-numbers-mode"><pre class="language-ssh"><code>====== SET ======                                                    \n  100000 requests completed in 1.01 seconds\n  50 parallel clients\n  3 bytes payload\n  keep alive: 1\n  host configuration &quot;save&quot;: 3600 1 300 100 60 10000\n  host configuration &quot;appendonly&quot;: no\n  multi-thread: no\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="ping-命令" tabindex="-1"><a class="header-anchor" href="#ping-命令" aria-hidden="true">#</a> ping，命令</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>127.0.0.1:6379&gt; ping\nPONG\n127.0.0.1:6379&gt; \n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>此命令可以查看Redis服务的开启状态，是否可用，会面临着服务器和客户端不在同一台电脑上，这个时候，就可以使用这个命令查看Redis的服务时候可用</p><p><code>正常返回pong</code></p><h2 id="查看redis服务器的统计信息-info" tabindex="-1"><a class="header-anchor" href="#查看redis服务器的统计信息-info" aria-hidden="true">#</a> 查看redis服务器的统计信息：info</h2><p>语法：<code>info [section]</code></p><p>作用：以一种易于解释且易于阅读的格式，返回关于 Redis 服务器的各种信息和统计数值。section 用来返回指定部分的统计信息。 section的值：server , clients ，memory等等。不加section 返回全部统计信息</p><p>返回值：指定section的统计信息或全部信息</p>',9),x=(0,n._)("ul",null,[(0,n._)("li",null,[(0,n._)("p",null,"查看server的统计信息"),(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210306092233833.png?x-oss-process=style/pictureProcess1",data:"aurora"})])]),(0,n._)("li",null,[(0,n._)("p",null,"查看全部的统计信息"),(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210306092254854.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,n._)("ul",null,[(0,n._)("li",null,[(0,n._)("p",null,"服务器端的信息"),(0,n._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,n._)("pre",{class:"language-text"},[(0,n._)("code",null,"Server\nredis_version:6.2.1    版本\nredis_git_sha1:00000000\nredis_git_dirty:0\nredis_build_id:a99f87a74fdf9f96\nredis_mode:standalone\nos:Linux 5.4.0-65-generic x86_64\narch_bits:64\nmultiplexing_api:epoll\natomicvar_api:c11-builtin\ngcc_version:9.3.0\nprocess_id:118619\nprocess_supervised:no\nrun_id:e675ab60db6eb126d15dc83c94114c86b5d89c8c\ntcp_port:6379\nserver_time_usec:1614993780096472\nuptime_in_seconds:35350\nuptime_in_days:0\nhz:10\nconfigured_hz:10\nlru_clock:4381044\nexecutable:/redis/redis-server\nconfig_file:\nio_threads_active:0\n")]),(0,n._)("div",{class:"line-numbers"},[(0,n._)("span",{class:"line-number"},"1"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"2"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"3"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"4"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"5"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"6"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"7"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"8"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"9"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"10"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"11"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"12"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"13"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"14"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"15"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"16"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"17"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"18"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"19"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"20"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"21"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"22"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"23"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"24"),(0,n._)("br")])])]),(0,n._)("li",null,[(0,n._)("p",null,"客户端"),(0,n._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,n._)("pre",{class:"language-text"},[(0,n._)("code",null,"connected_clients:1   目前连接服务器的个数\ncluster_connections:0\nmaxclients:10000\nclient_recent_max_input_buffer:16\nclient_recent_max_output_buffer:0\nblocked_clients:0\ntracking_clients:0\nclients_in_timeout_table:0\n\n")]),(0,n._)("div",{class:"line-numbers"},[(0,n._)("span",{class:"line-number"},"1"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"2"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"3"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"4"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"5"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"6"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"7"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"8"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"9"),(0,n._)("br")])])]),(0,n._)("li",null,[(0,n._)("p",null,"内存"),(0,n._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,n._)("pre",{class:"language-text"},[(0,n._)("code",null,"# Memory\nused_memory:2323912\nused_memory_human:2.22M\nused_memory_rss:7839744\nused_memory_rss_human:7.48M\nused_memory_peak:5858176\nused_memory_peak_human:5.59M\nused_memory_peak_perc:39.67%\nused_memory_overhead:830480\nused_memory_startup:809760\nused_memory_dataset:1493432\nused_memory_dataset_perc:98.63%\nallocator_allocated:2763256\nallocator_active:3141632\nallocator_resident:5562368\ntotal_system_memory:1975848960\ntotal_system_memory_human:1.84G\nused_memory_lua:37888\nused_memory_lua_human:37.00K\nused_memory_scripts:0\nused_memory_scripts_human:0B\nnumber_of_cached_scripts:0\nmaxmemory:0\nmaxmemory_human:0B\nmaxmemory_policy:noeviction\nallocator_frag_ratio:1.14\nallocator_frag_bytes:378376\nallocator_rss_ratio:1.77\nallocator_rss_bytes:2420736\nrss_overhead_ratio:1.41\nrss_overhead_bytes:2277376\nmem_fragmentation_ratio:3.44\nmem_fragmentation_bytes:5558600\nmem_not_counted_for_evict:0\nmem_replication_backlog:0\nmem_clients_slaves:0\nmem_clients_normal:20496\nmem_aof_buffer:0\nmem_allocator:jemalloc-5.1.0\nactive_defrag_running:0\nlazyfree_pending_objects:0\nlazyfreed_objects:0\n")]),(0,n._)("div",{class:"line-numbers"},[(0,n._)("span",{class:"line-number"},"1"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"2"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"3"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"4"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"5"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"6"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"7"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"8"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"9"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"10"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"11"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"12"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"13"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"14"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"15"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"16"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"17"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"18"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"19"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"20"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"21"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"22"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"23"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"24"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"25"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"26"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"27"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"28"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"29"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"30"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"31"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"32"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"33"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"34"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"35"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"36"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"37"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"38"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"39"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"40"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"41"),(0,n._)("br"),(0,n._)("span",{class:"line-number"},"42"),(0,n._)("br")])])])])])],-1),y=(0,n._)("h2",{id:"redis的16个库",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#redis的16个库","aria-hidden":"true"},"#"),(0,n.Uk)(" Redis的16个库")],-1),f=(0,n._)("p",null,[(0,n.Uk)("Redis默认使用16个库，从0到15。 对数据库个数的修改，在"),(0,n._)("code",null,"redis.conf"),(0,n.Uk)("文件中databases 16，理论上可以配置无限多个。")],-1),v=(0,n._)("p",null,[(0,n.Uk)("Redis中的库，不像mysql中的那样，可以自己修改，更改数据库的名字，但是这样也就导致了，mysql中每一个库占的内存可能达到"),(0,n._)("code",null,"几百M"),(0,n.Uk)("，因为每一个库中都有处理这一个库的程序")],-1),k=(0,n._)("p",null,[(0,n.Uk)("而Redis每一个库，占的内存特别的小，初始化的时候，没存数据，只达到"),(0,n._)("code",null,"几KB"),(0,n.Uk)("，非常小")],-1),z=(0,n._)("ul",null,[(0,n._)("li",null,[(0,n._)("p",null,"修改初始化的库个数"),(0,n._)("p",null,[(0,n.Uk)("文件"),(0,n._)("code",null,"redis.conf")]),(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210306093112737.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,n._)("p",null,[(0,n.Uk)("Redis的库和关系型数据库中的数据库实例类似，但又有一些不同，比如redis中各个库"),(0,n._)("code",null,"不能自定义命名"),(0,n.Uk)("，只能用"),(0,n._)("code",null,"序号"),(0,n.Uk)("表示，也就是从0开始，redis中各个库不是完全独立的，使用时最好一个应用使用一个redis实例，不建议一个redis实例中保存多个应用的数据。Redis实例本身所占存储空间其实是非常小的，因此不会造成存储空间的浪费。")])])],-1),q=(0,n._)("h3",{id:"切换库",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#切换库","aria-hidden":"true"},"#"),(0,n.Uk)(" 切换库")],-1),w=(0,n._)("blockquote",null,[(0,n._)("p",null,[(0,n.Uk)("切换库命令："),(0,n._)("code",null,"select db")])],-1),R=(0,n._)("p",null,[(0,n.Uk)("默认使用第0个，如果要使用其他数据库，命令是 "),(0,n._)("code",null,"select index")],-1),U=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210306093307660.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),j=(0,n.uE)('<p>如果超过库的总个数，会报下标越界错误</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>127.0.0.1:6379[15]&gt; select 16\n(error) ERR DB index is out of range\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="查看当前数据库中key的数目-dbsize" tabindex="-1"><a class="header-anchor" href="#查看当前数据库中key的数目-dbsize" aria-hidden="true">#</a> 查看当前数据库中key的数目：dbsize</h3><blockquote><p>语法：<code>dbsize</code></p></blockquote><p>作用：返回当前数据库的 key 的数量。</p><p>返回值：数字，key的数量</p>',6),P=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps1.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),S=(0,n._)("h3",{id:"查看当前数据库中有哪些key-keys",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#查看当前数据库中有哪些key-keys","aria-hidden":"true"},"#"),(0,n.Uk)(" 查看当前数据库中有哪些key："),(0,n._)("code",null,"keys *")],-1),E=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps2.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),B=(0,n._)("h3",{id:"清空当前库-flushdb",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#清空当前库-flushdb","aria-hidden":"true"},"#"),(0,n.Uk)(" 清空当前库："),(0,n._)("code",null,"flushdb")],-1),C=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps3.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),M=(0,n._)("p",null,"清空当前数据库中国的key",-1),D=(0,n._)("h3",{id:"清空所有数据库-flushall",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#清空所有数据库-flushall","aria-hidden":"true"},"#"),(0,n.Uk)(" 清空所有数据库："),(0,n._)("code",null,"flushall")],-1),L=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps4.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),I=(0,n.uE)('<p>这也体现出redis中的库并不是完全无关的。</p><p><code>执行这个命令的话，那么当前Redis 中所有的库中的信息都会被删除</code></p><h3 id="config-get-获得redis的所有配置值" tabindex="-1"><a class="header-anchor" href="#config-get-获得redis的所有配置值" aria-hidden="true">#</a> config get * 获得redis的所有配置值</h3><blockquote><p>语法：<code>config get parameter</code></p></blockquote><p>作用：获取运行中Redis服务器的配置参数， 获取全部配置可以使用*。</p><p>参数信息来自redis.conf 文件的内容。</p><ul><li>例1：获取数据库个数 <code>config get databases</code></li></ul>',7),G=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps5.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),K=(0,n._)("ul",null,[(0,n._)("li",null,[(0,n.Uk)("例2：获取端口号"),(0,n._)("code",null,"config get port")])],-1),T=(0,n._)("p",null,[(0,n._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps6.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),A=(0,n._)("p",null,"手册地址：",-1),H=(0,n._)("p",null,"redis英文版命令大全：https://redis.io/commands",-1),N=(0,n._)("p",null,"redis中文版命令大全：http://redisdoc.com/",-1),O={},V=(0,l(83744).Z)(O,[["render",function(e,s){return(0,n.wg)(),(0,n.iD)(n.HY,null,[i,r,a,c,o,d,t,p,u,_,b,h,m,g,x,y,f,v,k,z,q,w,R,U,j,P,S,E,B,C,M,D,L,I,G,K,T,A,H,N],64)}]])}}]);