"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9335],{19132:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-d7a8dfd8",path:"/javaweb/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0.html",title:"数据库连接池",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"c3p0",slug:"c3p0",children:[]},{level:2,title:"注意",slug:"注意",children:[]},{level:2,title:"导入包",slug:"导入包",children:[]},{level:2,title:"使用步骤",slug:"使用步骤",children:[]},{level:2,title:"参数测试",slug:"参数测试",children:[{level:3,title:"测试最大连接数",slug:"测试最大连接数",children:[]}]},{level:2,title:"测试ComboPooledDataSource()参数构造",slug:"测试combopooleddatasource-参数构造",children:[]},{level:2,title:"归还",slug:"归还",children:[{level:3,title:"归还测试",slug:"归还测试",children:[]}]},{level:2,title:"配置文件",slug:"配置文件",children:[]},{level:2,title:"使用步骤",slug:"使用步骤-1",children:[]},{level:2,title:"封装工具类",slug:"封装工具类",children:[]},{level:2,title:"导包",slug:"导包",children:[]},{level:2,title:"使用",slug:"使用",children:[]},{level:2,title:"DML语言操作",slug:"dml语言操作",children:[{level:3,title:"update()",slug:"update",children:[]}]},{level:2,title:"DQL语言",slug:"dql语言",children:[{level:3,title:"queryForMap()",slug:"queryformap",children:[]},{level:3,title:"queryForList()",slug:"queryforlist",children:[]},{level:3,title:"queryForObject()",slug:"queryforobject",children:[]},{level:3,title:"将查询结果集封装成java对象",slug:"将查询结果集封装成java对象",children:[]}]},{level:2,title:"queryForObject()",slug:"queryforobject-1",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},42149:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var p=a(66252);const t=(0,p.uE)('<h1 id="数据库连接池" tabindex="-1"><a class="header-anchor" href="#数据库连接池" aria-hidden="true">#</a> 数据库连接池</h1><p>数据库连接池就相当于是一个容器，如果是传统的方式，我们在使用的时候，每建立一个连接，在使用完成之后，就会关闭，这样会很浪费时间，</p><p>连接池的出现就是为了解决这个问题，当我们使用完连接对象之后，使用完的这个连接不会立即断开，其会回到存储连接的容器中，当下一次需要使用查询的时候，我们就会从连接池里面去取，使用完成之后又会放回去</p><h2 id="c3p0" tabindex="-1"><a class="header-anchor" href="#c3p0" aria-hidden="true">#</a> c3p0</h2><p>这个也是一个jdbc连接池的供应商，但是这个的年代比较久远，现在使用就是阿里巴巴的druid，这个号称是世界上最好用的连接池</p><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h2><p>在使用c3p0的时候，我们可以通过直接设置用户名和密码的方式进行操作，但是不推荐，维护特别麻烦，我们使用的就是通过配置文件</p><p><code>配置文件</code>的名字一定要符合正确，如果是使用<code>properties</code>那么名字就必须是<code>c3p0.properties</code> 如果是使用<code>xml</code>，名字必须是 <code>c3p0-config.xml</code></p><p>xml文件</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>c3p0-config</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!--使用默认的配置读取数据库连接池对象 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>default-config</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--  连接参数 --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driverClass<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbcUrl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>jdbc:mysql://localhost:3306/test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>\n\n        <span class="token comment">&lt;!-- 连接池参数 --&gt;</span>\n        <span class="token comment">&lt;!--初始化申请的连接数量--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>initialPoolSize<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--最大的连接数量--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>maxPoolSize<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--超时时间--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkoutTimeout<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>3000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>default-config</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token comment">&lt;!--    &lt;named-config name=&quot;otherc3p0&quot;&gt;--&gt;</span>\n    <span class="token comment">&lt;!--        &amp;lt;!&amp;ndash;  连接参数 &amp;ndash;&amp;gt;--&gt;</span>\n    <span class="token comment">&lt;!--        &lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;--&gt;</span>\n    <span class="token comment">&lt;!--        &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql://localhost:3306/hs_test?serverTimezone=Asia/Shanghai&lt;/property&gt;--&gt;</span>\n    <span class="token comment">&lt;!--        &lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;--&gt;</span>\n    <span class="token comment">&lt;!--        &lt;property name=&quot;password&quot;&gt;root&lt;/property&gt;--&gt;</span>\n\n    <span class="token comment">&lt;!--        &amp;lt;!&amp;ndash; 连接池参数 &amp;ndash;&amp;gt;--&gt;</span>\n    <span class="token comment">&lt;!--        &lt;property name=&quot;initialPoolSize&quot;&gt;5&lt;/property&gt;--&gt;</span>\n    <span class="token comment">&lt;!--        &lt;property name=&quot;maxPoolSize&quot;&gt;8&lt;/property&gt;--&gt;</span>\n    <span class="token comment">&lt;!--        &lt;property name=&quot;checkoutTimeout&quot;&gt;1000&lt;/property&gt;--&gt;</span>\n    <span class="token comment">&lt;!--    &lt;/named-config&gt;--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>c3p0-config</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>初始化容量(initialPoolSize)：如果为5的话，那么最先创建的Connection对象就是5个</p>',11),e=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210216201941009.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),o=(0,p.uE)('<p>最大连接容量(maxPoolSize)：初始化为5个，如果还需要连接，就会继续扩容，但是最大的容量只能是10，到达10就不会在增加了</p><h2 id="导入包" tabindex="-1"><a class="header-anchor" href="#导入包" aria-hidden="true">#</a> 导入包</h2><p>请注意，一共需要<code>导入两个jar包</code>,这两个jar包的名字为<code>c3p0-0.9.5.5.jar,mchange-commons-java-0.2.19.jar</code>，并且还需要导入哪个厂家的驱动，比如mysql的jdbc驱动，并不是导入c3p0jar包就可以了</p><h2 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤</h2><ol><li><p>获取<code>DataSource ds = new ComboPooledDataSource();</code>对象，这里使用的是多态，</p><p>ComboPooledDataSource extends AbstractComboPooledDataSource，AbstractComboPooledDataSource实现了AbstractPoolBackedDataSource implements PooledDataSource</p><p>PooledDataSource extends DataSource</p></li><li><p>获取<code>Connection</code>连接</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Connection</span> con <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol><h2 id="参数测试" tabindex="-1"><a class="header-anchor" href="#参数测试" aria-hidden="true">#</a> 参数测试</h2><h3 id="测试最大连接数" tabindex="-1"><a class="header-anchor" href="#测试最大连接数" aria-hidden="true">#</a> 测试最大连接数</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">DataSource</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Connection</span> con <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">&quot;  &quot;</span><span class="token operator">+</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>因为配置文件中设置的最大连接数为<code>10</code></p><p>超时时间为<code>3</code>秒</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;property name=&quot;maxPoolSize&quot;&gt;10&lt;/property&gt;\n&lt;property name=&quot;checkoutTimeout&quot;&gt;3000&lt;/property&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>所以这里，在10个以内，都会打印出来，但是当i值为11时，因为最大连接数是10，所以就会在3秒之后报错</p><h2 id="测试combopooleddatasource-参数构造" tabindex="-1"><a class="header-anchor" href="#测试combopooleddatasource-参数构造" aria-hidden="true">#</a> 测试ComboPooledDataSource()参数构造</h2><p>看xml配置文档，我们发现除了一个默认的配置外，还有一个是有<code>name</code>值的配置</p><ol><li><p><code>&lt;default-config&gt;</code>默认配置</p></li><li><p><code>&lt;named-config name=&quot;otherc3p0&quot;&gt;</code></p></li></ol><p>我们可以在一个配置文件中写很多个数据库的url,用户名，密码，</p><p>ComboPooledDataSource类有两个参数，一个是无参，一个是有参<code>ComboPooledDataSource(String configName)</code></p><p>如果我们使用的是无参构造，那么系统选择的配置就是默认配置的参数，也就是<code>&lt;default-config&gt;</code></p><p>如果是选择有参构造，<code>configName</code>值就是<code>&lt;named-config name=&quot;otherc3p0&quot;&gt;</code>中的<code>name</code>值，那么选择的数据库就是这个配置中的</p><h2 id="归还" tabindex="-1"><a class="header-anchor" href="#归还" aria-hidden="true">#</a> 归还</h2><p>既然其使用完成之后，不会进行释放，会将其重新放入连接池中，那如何归还？</p><p><code>归还</code>直接调用那个对象的<code>close()</code>方法就行</p><h3 id="归还测试" tabindex="-1"><a class="header-anchor" href="#归还测试" aria-hidden="true">#</a> 归还测试</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">DataSource</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Connection</span> con <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">&quot;  &quot;</span><span class="token operator">+</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>如果其不会归还的话，那么在i等于11的时候，就会出现异常</p><p>运行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token number">1</span>  <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mchange<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>c3p0<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>NewProxyConnection</span><span class="token annotation punctuation">@5c0369c4</span> <span class="token punctuation">[</span>wrapping<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>JDBC4Connection</span><span class="token annotation punctuation">@2be94b0f</span><span class="token punctuation">]</span>\n<span class="token number">2</span>  <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mchange<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>c3p0<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>NewProxyConnection</span><span class="token annotation punctuation">@17ed40e0</span> <span class="token punctuation">[</span>wrapping<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>JDBC4Connection</span><span class="token annotation punctuation">@50675690</span><span class="token punctuation">]</span>\n<span class="token number">3</span>  <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mchange<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>c3p0<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>NewProxyConnection</span><span class="token annotation punctuation">@3ac42916</span> <span class="token punctuation">[</span>wrapping<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>JDBC4Connection</span><span class="token annotation punctuation">@47d384ee</span><span class="token punctuation">]</span>\n<span class="token number">4</span>  <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mchange<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>c3p0<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>NewProxyConnection</span><span class="token annotation punctuation">@22a71081</span> <span class="token punctuation">[</span>wrapping<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>JDBC4Connection</span><span class="token annotation punctuation">@3930015a</span><span class="token punctuation">]</span>\n<span class="token number">5</span>  <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mchange<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>c3p0<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>NewProxyConnection</span><span class="token annotation punctuation">@1bc6a36e</span> <span class="token punctuation">[</span>wrapping<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>JDBC4Connection</span><span class="token annotation punctuation">@1ff8b8f</span><span class="token punctuation">]</span>\n<span class="token number">6</span>  <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mchange<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>c3p0<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>NewProxyConnection</span><span class="token annotation punctuation">@71e7a66b</span> <span class="token punctuation">[</span>wrapping<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>JDBC4Connection</span><span class="token annotation punctuation">@2ac1fdc4</span><span class="token punctuation">]</span>\n<span class="token number">7</span>  <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mchange<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>c3p0<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>NewProxyConnection</span><span class="token annotation punctuation">@1c53fd30</span> <span class="token punctuation">[</span>wrapping<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>JDBC4Connection</span><span class="token annotation punctuation">@1ff8b8f</span><span class="token punctuation">]</span>\n<span class="token number">8</span>  <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mchange<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>c3p0<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>NewProxyConnection</span><span class="token annotation punctuation">@75412c2f</span> <span class="token punctuation">[</span>wrapping<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>JDBC4Connection</span><span class="token annotation punctuation">@282ba1e</span><span class="token punctuation">]</span>\n<span class="token number">9</span>  <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mchange<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>c3p0<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>NewProxyConnection</span><span class="token annotation punctuation">@f5f2bb7</span> <span class="token punctuation">[</span>wrapping<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>JDBC4Connection</span><span class="token annotation punctuation">@73035e27</span><span class="token punctuation">]</span>\n<span class="token number">10</span>  <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mchange<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>c3p0<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>NewProxyConnection</span><span class="token annotation punctuation">@3ecf72fd</span> <span class="token punctuation">[</span>wrapping<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>JDBC4Connection</span><span class="token annotation punctuation">@483bf400</span><span class="token punctuation">]</span>\n<span class="token number">11</span>  <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mchange<span class="token punctuation">.</span>v2<span class="token punctuation">.</span>c3p0<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>NewProxyConnection</span><span class="token annotation punctuation">@77f03bb1</span> <span class="token punctuation">[</span>wrapping<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>JDBC4Connection</span><span class="token annotation punctuation">@326de728</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>因为程序在i等于5时，输出之后，调用了<code>close()</code>方法进行了关闭，那么这个connection对象会重新放在连接池中</p><p>第五个<code>connection</code>对象为<code>com.mysql.jdbc.JDBC4Connection@1ff8b8f</code></p><p>但是在第七个获取的对象，居然是第五个的<code>connection</code>对象</p><p><code>com.mysql.jdbc.JDBC4Connection@1ff8b8f</code>说明进行了归还</p><h1 id="druid" tabindex="-1"><a class="header-anchor" href="#druid" aria-hidden="true">#</a> druid</h1><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><p>druid的配置文件不像c3p0那样，其名字一定要那样才可以</p><p>druid的配置文件是<code>properties</code>，但是名字可以是任何，到时候放在<code>src</code>目录下就可以</p><h2 id="使用步骤-1" tabindex="-1"><a class="header-anchor" href="#使用步骤-1" aria-hidden="true">#</a> 使用步骤</h2><ol><li><p>加载配置文件</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Properties</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">InputStream</span> in <span class="token operator">=</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\n    <span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;druid.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\npro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>获取连接池对象</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">DataSource</span> ds <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>获取<code>connection</code>对象</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Connection</span> con <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol><p>其他的操作是一样的</p><h2 id="封装工具类" tabindex="-1"><a class="header-anchor" href="#封装工具类" aria-hidden="true">#</a> 封装工具类</h2><p>因为我们一般都会经常使用这个连接池，如果每一次使用都创建一个的话，那么就感觉太麻烦了，所以我们可以自己封装一个工具类</p><p>如果要使用的时候，就直接从连接池中拿取连接就行</p><p>直接上代码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>chu<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * @Author 程钦义 vipblogs.cn\n * @Version 1.0\n */</span>\n<span class="token comment">//这是一个数据库连接池工具类</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidUtil</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DataSource</span> ds<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> properties <span class="token operator">=</span> <span class="token string">&quot;druid.properties&quot;</span><span class="token punctuation">;</span>\n    <span class="token comment">//设置构造方法为私有，工具类不应该有构造方法</span>\n    <span class="token keyword">private</span> <span class="token class-name">DruidUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">static</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token comment">//加载配置文件</span>\n            <span class="token comment">//配置文件的名称默认就是druid.properties</span>\n            <span class="token comment">//可以调用setProperties进行设置</span>\n            <span class="token class-name">Properties</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//初始化连接池</span>\n            ds <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;静态代码出错&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//获取连接Connection对象</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> setProperties <span class="token punctuation">(</span><span class="token class-name">String</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">DruidUtil</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">/*\n     *释放资源\n     * 因为在使用Connection对象的时候，我们都会进行DML语言或者是DQL语言的操作\n     * 那么都会使用到Statement对象\n     * 如果进行的是DQL语言，那么还需要ResultSet结果集对象，在关闭资源的时候，这两个对象都应该对其进行关闭\n     */</span>\n    <span class="token comment">//DML语言的关闭</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> stmt<span class="token punctuation">,</span><span class="token class-name">Connection</span> conn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进行的其实的归还操作</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//DQL语言的关闭</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> res<span class="token punctuation">,</span> <span class="token class-name">Statement</span> stmt<span class="token punctuation">,</span> <span class="token class-name">Connection</span> conn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进行的其实的归还操作</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br></div></div><p>测试类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>chu<span class="token punctuation">.</span>utiltest</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>chu<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">DruidUtil</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * @Author 程钦义 vipblogs.cn\n * @Version 1.0\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token class-name">ResultSet</span> res <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token comment">//获取连接对象</span>\n            conn <span class="token operator">=</span> <span class="token class-name">DruidUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//定义sql</span>\n            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select * from t_user&quot;</span><span class="token punctuation">;</span>\n            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            res <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//处理结果集</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>\n            <span class="token class-name">DruidUtil</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>stmt<span class="token punctuation">,</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h1 id="jdbctemplate类使用" tabindex="-1"><a class="header-anchor" href="#jdbctemplate类使用" aria-hidden="true">#</a> JdbcTemplate类使用</h1><p>这是一个<code>spring</code>中的一个对于处理sql结果集的一个类，使用这个类，可以简化很多的操作，不用再去获取Statemet对象，和获取结果集对象，使用这个类中的方法就可以很容易的得到结果</p><h2 id="导包" tabindex="-1"><a class="header-anchor" href="#导包" aria-hidden="true">#</a> 导包</h2><p>使用这个类，一共需要导入5个jar包</p>',49),c=(0,p._)("blockquote",null,[(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210216231314508.png?x-oss-process=style/pictureProcess1",data:"aurora"})])],-1),l=(0,p.uE)('<h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><ol><li>获取JdbcTemplate对象，构造方法有无参还有有参，有参需要传入一个<code>DataSource</code>对象</li><li>调用方法，执行sql语句</li></ol><h2 id="dml语言操作" tabindex="-1"><a class="header-anchor" href="#dml语言操作" aria-hidden="true">#</a> DML语言操作</h2><h3 id="update" tabindex="-1"><a class="header-anchor" href="#update" aria-hidden="true">#</a> update()</h3><p>可以使用<code>template.update()</code>进行DML语言的操作，参数需要传入一个<code>sql语句</code>，如果为了防止sql注入问题，那么就需要在后面指定参数值，和ps对象一样</p><p>增操作</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//增操作</span>\n<span class="token class-name">JdbcTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token class-name">DruidUtil</span><span class="token punctuation">.</span><span class="token function">getDs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;INSERT into account (username,money) VALUES(?,?);&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> update <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">&quot;小猴子&quot;</span><span class="token punctuation">,</span><span class="token number">898</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//问号传入参数为Object</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回影响的行数</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>删除操作</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//删除操作                                                      </span>\n<span class="token class-name">JdbcTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token class-name">DruidUtil</span><span class="token punctuation">.</span><span class="token function">getDs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;DELETE FROM account WHERE username=?&quot;</span><span class="token punctuation">;</span>        \n<span class="token keyword">int</span> update <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">&quot;三国演义&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  \n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>                                 \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>改操作</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">JdbcTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token class-name">DruidUtil</span><span class="token punctuation">.</span><span class="token function">getDs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                   \n<span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;UPDATE t_user SET username=&#39;cqy&#39; WHERE pwd=&#39;blog&#39;&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">//执行sql                                                          </span>\n <span class="token keyword">int</span> blog <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">&quot;blog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                       \n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>                                        \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="dql语言" tabindex="-1"><a class="header-anchor" href="#dql语言" aria-hidden="true">#</a> DQL语言</h2><h3 id="queryformap" tabindex="-1"><a class="header-anchor" href="#queryformap" aria-hidden="true">#</a> queryForMap()</h3><p>查询结果会将结果集封装为Map集合</p><p><code>这个方法只能查询返回结果是一条的情况，对于查询结果有两条记录，或者是0条记录，都会报错</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">JdbcTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token class-name">DruidUtil</span><span class="token punctuation">.</span><span class="token function">getDs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           \n<span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select * from account where username=?&quot;</span><span class="token punctuation">;</span>                  \n<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForMap</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">&quot;初尘&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             \n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>                                               \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>运行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">{</span>username<span class="token operator">=</span>初尘<span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> id<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>查询有两条记录情况</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">JdbcTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token class-name">DruidUtil</span><span class="token punctuation">.</span><span class="token function">getDs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      \n<span class="token class-name">String</span> sql <span class="token operator">=</span> &quot;select <span class="token operator">*</span> from account where username<span class="token operator">=</span><span class="token operator">?</span> or username<span class="token operator">=</span><span class="token operator">?</span>      \n<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForMap</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">&quot;初尘&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;西游记&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      \n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>                                          \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>运行结果，报错</p><p><code>Incorrect result size: expected 1, actual 2</code>查询结果有两个</p><h3 id="queryforlist" tabindex="-1"><a class="header-anchor" href="#queryforlist" aria-hidden="true">#</a> queryForList()</h3><p>查询结果会将其结果集封装为LIst集合</p><p>这个方法就使用于查询结果，有多个的情况</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">JdbcTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token class-name">DruidUtil</span><span class="token punctuation">.</span><span class="token function">getDs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      \n<span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select * from account where username=? or username=?&quot;</span><span class="token punctuation">;</span>              \n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> maps <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">&quot;初尘&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;西游记&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         \n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>maps<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                         \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>运行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">[</span><span class="token punctuation">{</span>username<span class="token operator">=</span>初尘<span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> id<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>username<span class="token operator">=</span>西游记<span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span> id<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>其原理可以通过<code>List&lt;Map&lt;String, Object&gt;&gt; maps = template.queryForList()</code>的返回对象就可以知道，将每一个查询到的结果集封装成Map集合<code>Map&lt;String, Object&gt;</code>，然后又将这个map集合封装成List集合<code>List&lt;Map&lt;String, Object&gt;&gt;</code>，通过泛型就可以知道</p><h3 id="queryforobject" tabindex="-1"><a class="header-anchor" href="#queryforobject" aria-hidden="true">#</a> queryForObject()</h3><p>此方法通常用于聚合函数，例如<code>count(*)</code></p><h3 id="将查询结果集封装成java对象" tabindex="-1"><a class="header-anchor" href="#将查询结果集封装成java对象" aria-hidden="true">#</a> 将查询结果集封装成java对象</h3><h4 id="传统方法" tabindex="-1"><a class="header-anchor" href="#传统方法" aria-hidden="true">#</a> 传统方法</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">JdbcTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token class-name">DruidUtil</span><span class="token punctuation">.</span><span class="token function">getDs</span><span class="token punctuation">(</span>\n<span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select * from account&quot;</span><span class="token punctuation">;</span>                    \n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   \n    <span class="token comment">//获取map集合中的信息                                        </span>\n    <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       \n    <span class="token class-name">Integer</span> money <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          \n    <span class="token class-name">Integer</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                \n    <span class="token class-name">Account</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           \n    a<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                             \n    a<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   \n    a<span class="token punctuation">.</span><span class="token function">setD</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                                          \n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                               \n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 \n<span class="token punctuation">}</span>                                                        \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>Account类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>chu<span class="token punctuation">.</span>tem</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * @Author 程钦义 vipblogs.cn\n * @Version 1.0\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> username<span class="token punctuation">;</span>\n    <span class="token keyword">double</span> money<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> d<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> setUsername <span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> setMoney <span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> setD <span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">=</span> d<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> toString <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Account{&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;username=&#39;&quot;</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span> <span class="token string">&quot;, money=&quot;</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token string">&quot;, d=&quot;</span> <span class="token operator">+</span> d <span class="token operator">+</span> <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>运行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Account</span><span class="token punctuation">{</span>username<span class="token operator">=</span><span class="token char">&#39;赵敏&#39;</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">1000.0</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">}</span>\n<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>\n<span class="token class-name">Account</span><span class="token punctuation">{</span>username<span class="token operator">=</span><span class="token char">&#39;初尘&#39;</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">1000.0</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">}</span>\n<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>\n<span class="token class-name">Account</span><span class="token punctuation">{</span>username<span class="token operator">=</span><span class="token char">&#39;西游记&#39;</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">2000.0</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><hr><h4 id="使用接口方法rowmapper" tabindex="-1"><a class="header-anchor" href="#使用接口方法rowmapper" aria-hidden="true">#</a> 使用接口方法RowMapper&lt;&gt;</h4><p>步骤</p><ol><li><p>调用<code>query()</code>方法</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> rowMapper<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>参数RowMapper<code>&lt;T&gt;</code>是一个接口，其接口中的方法为</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Account</span> mapRow <span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>使用匿名内部类的方式进行封装</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">JdbcTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token class-name">DruidUtil</span><span class="token punctuation">.</span><span class="token function">getDs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           \n<span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select * from account&quot;</span><span class="token punctuation">;</span>                                  \n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> accounts <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>                                                          \n    <span class="token keyword">public</span> <span class="token class-name">Account</span> mapRow <span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>  \n        <span class="token comment">/*\n        此方法的执行原理是，调用query方法每查询到一个结果，就会执行一次mapRow()方法\n        并且将获取到的结果集传递给方法，通过结果集对象ResultSet rs便可以获取此条记录\n        中的结果，通过get...()方法获取，并且会把这个需要封装的对象进行return，将所有\n        的account对象存储在一个list集合中，\n        */</span>\n        <span class="token class-name">String</span> username <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    \n        <span class="token keyword">int</span> money <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                \n        <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      \n        <span class="token class-name">Account</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                     \n        a<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       \n        a<span class="token punctuation">.</span><span class="token function">setD</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    \n        a<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>                                             \n        <span class="token keyword">return</span> a<span class="token punctuation">;</span>                                                      \n    <span class="token punctuation">}</span>                                                                  \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                    \n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Account</span> account <span class="token operator">:</span> accounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                     \n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       \n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 \n<span class="token punctuation">}</span>                                                                      \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div></li></ol><p>运行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Account</span><span class="token punctuation">{</span>username<span class="token operator">=</span><span class="token char">&#39;赵敏&#39;</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">}</span>\n<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>\n<span class="token class-name">Account</span><span class="token punctuation">{</span>username<span class="token operator">=</span><span class="token char">&#39;初尘&#39;</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">}</span>\n<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>\n<span class="token class-name">Account</span><span class="token punctuation">{</span>username<span class="token operator">=</span><span class="token char">&#39;西游记&#39;</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">}</span>\n<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>\n<span class="token class-name">Account</span><span class="token punctuation">{</span>username<span class="token operator">=</span><span class="token char">&#39;水浒传&#39;</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">}</span>\n<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>\n<span class="token class-name">Account</span><span class="token punctuation">{</span>username<span class="token operator">=</span>&#39;chuchen&#39;<span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">}</span>\n<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>\n<span class="token class-name">Account</span><span class="token punctuation">{</span>username<span class="token operator">=</span><span class="token char">&#39;cqy&#39;</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">23435</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">}</span>\n<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>\n<span class="token class-name">Account</span><span class="token punctuation">{</span>username<span class="token operator">=</span><span class="token char">&#39;小猴子&#39;</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">898</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">}</span>\n<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>注意:<code>如果没有将结果集rs中的数据传入Account对象中的话，直接返回a对象，那么全部都会是null</code></p><p>然而Spring就是为了简化我们的操作，但是我们现在发现并没有简化我们的操作，我们可以使用另一个实现类<code>BeanPropertyRowMapper</code>，其已经实现了</p><p><code>BeanPropertyRowMapper&lt;T&gt; implements RowMapper&lt;T&gt;</code>，所以我们可以直接使用它，使用这个特别简单</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">JdbcTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token class-name">DruidUtil</span><span class="token punctuation">.</span><span class="token function">getDs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select * from account&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span> accounts <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> \n                                        <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Account</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Account</span> account <span class="token operator">:</span> accounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>注意：<code>虽然BeanPropertyRowMapper类中含有无参构造，但是我们还是使用有参构造方法，我们需要指定其泛型类型，还有需要传递需要封装类的Class</code></p><p><code> new BeanPropertyRowMapper&lt;Account&gt;(Account.class)</code>其会自动将查询到的记录中的每一个字段的名字和提供类中的字段名，进行匹配，并将其传入进去，</p><p><code>因此，为了保证能够匹配成功，我们需要使提供类中的每一个字段和查询记录中的每一个字段都匹配，如果没有匹配的，那么就将其设置为默认值，而且还需要保证那个类中的字段都有set方法，否则也是默认值</code></p><p>上面程序运行结果(id字段不匹配)</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Account</span><span class="token punctuation">{</span>username<span class="token operator">=</span><span class="token char">&#39;赵敏&#39;</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span>\n<span class="token class-name">Account</span><span class="token punctuation">{</span>username<span class="token operator">=</span><span class="token char">&#39;初尘&#39;</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span>\n<span class="token class-name">Account</span><span class="token punctuation">{</span>username<span class="token operator">=</span><span class="token char">&#39;西游记&#39;</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span>\n<span class="token class-name">Account</span><span class="token punctuation">{</span>username<span class="token operator">=</span><span class="token char">&#39;水浒传&#39;</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span>\n<span class="token class-name">Account</span><span class="token punctuation">{</span>username<span class="token operator">=</span>&#39;chuchen&#39;<span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span>\n<span class="token class-name">Account</span><span class="token punctuation">{</span>username<span class="token operator">=</span><span class="token char">&#39;cqy&#39;</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">23435</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span>\n<span class="token class-name">Account</span><span class="token punctuation">{</span>username<span class="token operator">=</span><span class="token char">&#39;小猴子&#39;</span><span class="token punctuation">,</span> money<span class="token operator">=</span><span class="token number">898</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="queryforobject-1" tabindex="-1"><a class="header-anchor" href="#queryforobject-1" aria-hidden="true">#</a> queryForObject()</h2><p>如果使用这个方法的话，这个<code>使用于查询结果只有一条的情况，而且还需要保证查询结果只有一条，如果查询结果没有的话，也会报错，而且还应该保证User类有一个无参构造</code></p><blockquote><p><code>template.queryForObject(sql, new BeanPropertyRowMapper&lt;User&gt;(User.class));</code></p></blockquote><p><code>new BeanPropertyRowMapper()</code>如果使用这个方式的话，需要保证查询出来的结果至少有一个，否则会报错</p><p>如果user中的属性字段名和表中的字段名，有不匹配的，那么不匹配的字段会设置为null</p>',58),u={},r=(0,a(83744).Z)(u,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,o,c,l],64)}]])}}]);