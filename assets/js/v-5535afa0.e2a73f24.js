"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8583],{49833:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5535afa0",path:"/spring/springboot/spring%20boot%20web/web%E9%A1%B9%E7%9B%AE.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"重复表单提交",slug:"重复表单提交",children:[]},{level:2,title:"拦截器",slug:"拦截器",children:[]},{level:2,title:"文件上传",slug:"文件上传",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},3810:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var p=a(66252);const e=(0,p.uE)('<h2 id="重复表单提交" tabindex="-1"><a class="header-anchor" href="#重复表单提交" aria-hidden="true">#</a> 重复表单提交</h2><p>解决表单重复提交最好的办法是使用重定向</p><h2 id="拦截器" tabindex="-1"><a class="header-anchor" href="#拦截器" aria-hidden="true">#</a> 拦截器</h2><p>步骤</p><ol><li>创建一个类，实现<code>HandlerInterceptor</code>接口，并且重写其中的三个方法</li><li>创建配置类，实现<code>WebMvcConfigurer</code>接口，并重写<code>addInterceptors (InterceptorRegistry registry)</code>方法</li><li>在拦截器中，配置拦截条件</li><li>在配置类中，配置拦截路径</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * 在返回页面之前执行\n     * <span class="token keyword">@author</span> chuchen\n     * <span class="token keyword">@date</span> 2021/7/6 17:56\n     * <span class="token keyword">@param</span> <span class="token parameter">request</span>\n     * <span class="token keyword">@param</span> <span class="token parameter">response</span>\n     * <span class="token keyword">@param</span> <span class="token parameter">handler</span>\n     * <span class="token keyword">@return</span> boolean\n     */</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> preHandle <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Object</span> userInfo <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;loginInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>userInfo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;path{}&quot;</span><span class="token punctuation">,</span>requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     *  在处理请求之后执行\n     */</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> postHandle <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     *  在响应页面完成之后，执行\n     */</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> afterCompletion <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginConf</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> addInterceptors <span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//&quot;*/css/**&quot;,&quot;*/js/**&quot;,&quot;*/images/**&quot;,&quot;*/fonts/**&quot;</span>\n        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/css/**&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/js/**&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/images/**&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/fonts/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>拦截器中的三个方法，一个是发送请求，请求处理完成后，拦截</p><p>一个是，在响应页面之前，已经放行了</p><p>一个是，浏览器响应页面完成之后</p><p>因为页面中，存在很多的静态资源，但是对于静态资源，我们不用拦截，所以就要在配置类类中，配置拦截路径规则</p>',11),t=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210706184413638.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),o=(0,p.uE)('<p>静态资源都是以css,font等开头的，所以可以直接<code>&quot;/css/**&quot;,&quot;/js/**&quot;,&quot;/images/**&quot;,&quot;/fonts/**&quot;</code></p><p>，但是不能<code>&quot;*/css/**&quot;,&quot;*/js/**&quot;,&quot;*/images/**&quot;,&quot;*/fonts/**&quot;</code>这样配置是错误的</p><p>并且拦截所以请求，不能<code>addPathPatterns(&quot;/&quot;)</code>，这个只是拦截<code>localhost:8080</code>请求，拦截所有，需要<code>/**</code></p><p>对静态资源的拦截，还可以配置静态资源的访问路径，在配置文件中设置，比如所有静态资源都是以static开头，那么放行静态资源就可以直接<code>/static/**</code></p><h2 id="文件上传" tabindex="-1"><a class="header-anchor" href="#文件上传" aria-hidden="true">#</a> 文件上传</h2><p>因为默认单个文件上传大小为1MB，多个文件上传大小为10MB，所以就需要更改文件上传大小</p>',6),c={},l=(0,a(83744).Z)(c,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,t,o],64)}]])}}]);