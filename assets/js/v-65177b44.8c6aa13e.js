"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6256],{93557:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-65177b44",path:"/datastructure/%E6%8E%92%E5%BA%8F/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.html",title:"插入排序",lang:"en-US",frontmatter:{date:"2021/10/23 8:06"},excerpt:"",headers:[{level:2,title:"代码实现",slug:"代码实现",children:[]},{level:2,title:"优化",slug:"优化",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},30662:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var e=a(66252);const p=(0,e._)("h1",{id:"插入排序",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#插入排序","aria-hidden":"true"},"#"),(0,e.Uk)(" 插入排序")],-1),t=(0,e._)("blockquote",null,[(0,e._)("p",null,"插入式排序属于内部排序法，是对于欲排序的元素以插入的方式找寻该元素的适当位置，以达到排序的目的。")],-1),o=(0,e._)("div",{class:"custom-container tip"},[(0,e._)("p",{class:"custom-container-title"},"TIP"),(0,e._)("p",null,"算法思想:"),(0,e._)("p",null,"把n个待排序的元素看成为一个有序表和一个无序表，开始时有序表中只包含一个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。")],-1),c=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211023080749980.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),r=(0,e.uE)('<blockquote><p>比如现在有一个数组</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>那么使用插入排序进行的步骤为</p><ol><li><p>第一次<code>arr[0]</code>就已经排好了，最开始默认<code>arr[0]是一个有序的表</code></p><blockquote><p><code>2,56,34,1,78,3</code></p></blockquote></li><li><p>把<code>arr[1]</code>和<code>arr[0]</code>进行比较，如果arr[1]比arr[0]大，那么arr[1]就排在arr[0]后面</p><blockquote><p><code>2,56,34,78,3</code></p></blockquote></li><li><p>轮到<code>arr[2]</code>和<code>arr[0],arr[1]</code>进行比较，往后的操作都是一样的</p><blockquote><p><code>2,34,56,78,3</code></p></blockquote></li></ol></blockquote><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//使用for循环，进行比较 insertValue为最大值</span>\n        <span class="token keyword">int</span> insertValue <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//insertIndex为插入的下标</span>\n        <span class="token keyword">int</span> insertIndex <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//使用循环的方式移动下标，当插入的值，小于已排序的最大的一个的时候</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>insertIndex <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> insertValue <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//已排序的进行移动</span>\n            arr<span class="token punctuation">[</span>insertIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            insertIndex<span class="token operator">--</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">//退出while循环的，可能是insertIndex &lt; 0，也可能是该需插入的数，已经在找到合适的位置了</span>\n        arr<span class="token punctuation">[</span>insertIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> insertValue<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>经过测试发现，插入排序的时间花费差不多是1秒左右，选择排序的时间平均3秒，冒泡平均22秒</p><p>代码实现，在<code>while</code>循环里面，其退出的条件是<code>insertIndex</code>小于0，也就是-1，或者是<code>insertValue</code>小于<code>arr[insertIndex]</code>(<code>已经找到了插入的位置</code>)，因为在之前，<code>insertIndex = i -1</code>，退出while循环的时候，其插入的位置为i，所以我们可以直接<code>arr[insertIndex + 1] = insertValue</code></p></div><h2 id="优化" tabindex="-1"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h2><p>优化主要是对<code>arr[insertIndex + 1] = insertValue</code>，这里如果<code>insertIndex + 1 == i</code>，那么这个<code>arr[insertIndex + 1]</code>和<code>arr[i]</code>是一样的，他们的位置没有发生改变，所以只需要加上下面这个</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//使用循环的方式移动下标，当插入的值，小于已排序的最大的一个的时候</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>insertIndex <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> maxNum <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//已排序的进行移动</span>\n    arr<span class="token punctuation">[</span>insertIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    insertIndex<span class="token operator">--</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//退出while循环的，可能是insertIndex &lt; 0，也可能是该需插入的数，已经在找到合适的位置了</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>insertIndex <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    arr<span class="token punctuation">[</span>insertIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> maxNum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',7),l={},u=(0,a(83744).Z)(l,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,t,o,c,r],64)}]])}}]);