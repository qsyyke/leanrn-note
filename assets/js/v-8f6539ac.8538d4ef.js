"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2247],{66709:(e,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-8f6539ac",path:"/javaweb/servlet.html",title:"servlet",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"配置web.xml文件",slug:"配置web-xml文件",children:[]},{level:2,title:"配置servlet的启动时机",slug:"配置servlet的启动时机",children:[]},{level:2,title:"destroy被摧毁时",slug:"destroy被摧毁时",children:[]},{level:2,title:"init方法",slug:"init方法",children:[]},{level:2,title:"@WebServlet",slug:"webservlet",children:[]},{level:2,title:"将javaee jar包添加到项目中",slug:"将javaee-jar包添加到项目中",children:[]},{level:2,title:"启动不同的项目",slug:"启动不同的项目",children:[{level:3,title:"添加不同的tomcat",slug:"添加不同的tomcat",children:[]}]},{level:2,title:"配置",slug:"配置",children:[]},{level:2,title:"tomcat Catalina Log乱码情况",slug:"tomcat-catalina-log乱码情况",children:[]},{level:2,title:"查看配置",slug:"查看配置",children:[]},{level:2,title:"docBase",slug:"docbase",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},82132:(e,a,s)=>{s.r(a),s.d(a,{default:()=>O});var t=s(66252);const n=(0,t.uE)('<h1 id="servlet" tabindex="-1"><a class="header-anchor" href="#servlet" aria-hidden="true">#</a> servlet</h1><p>动态资源的理解</p><p>像我们的java程序，就是一个动态资源，java程序必须得依赖于服务器才能运行，他没有主方法，没有main方法去运行，我们可以理解为，是tomcat去运行编写的java程序</p><p>但是并不是随便创建一个java类，tomcat就会去创建其对象，调用其方法，他们必须要具有一种规则，这种规则就是这些类必须是新<strong>servlet</strong>接口，只有实现了这个接口，tomcat才能去运行他们，创建他们的对象，调用方法</p><p>servlet接口是在javaee api中才能找到</p><h1 id="编写servlet" tabindex="-1"><a class="header-anchor" href="#编写servlet" aria-hidden="true">#</a> 编写servlet</h1><p>如何编写一个servlet程序？</p><ol><li>新建一个类，实现<code>Servlet</code>接口，重写里面的方法</li></ol><h2 id="配置web-xml文件" tabindex="-1"><a class="header-anchor" href="#配置web-xml文件" aria-hidden="true">#</a> 配置web.xml文件</h2>',9),l=(0,t._)("ol",null,[(0,t._)("li",null,[(0,t._)("p",null,"配置web.xml文件"),(0,t._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,t._)("pre",{class:"language-text"},[(0,t._)("code",null,"    <servlet>\n        <servlet-name>demon1</servlet-name>\n        <servlet-class>com.web.servlet.Demon1</servlet-class>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>demon1</servlet-name>\n        <url-pattern>/chu1</url-pattern>\n    </servlet-mapping>\n\n")]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br")])]),(0,t._)("p",null,"其中servlet-name标签值随便写"),(0,t._)("p",null,"servlet-class需要写这个java类的完成类名"),(0,t._)("p",null,"servlet-mapping是映射，就是将一个浏览器中的虚拟目录映射到这个文件"),(0,t._)("p",null,"servlet-mapping标签中的servlet-name需要和servlet中的servlet-name保持一样"),(0,t._)("p",null,[(0,t.Uk)("url-pattern就是浏览器端口后面的虚拟目录，使用这个访问就可以执行这个"),(0,t._)("code",null,"Demon1.java"),(0,t.Uk)("程序")]),(0,t._)("p",null,"如果想要测试，可以在"),(0,t._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,t._)("pre",{class:"language-java"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"public"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"void"),(0,t.Uk)(" service "),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token class-name"},"ServletRequest"),(0,t.Uk)(" servletRequest"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token class-name"},"ServletResponse"),(0,t.Uk)(" servletResponse"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"throws"),(0,t.Uk)(),(0,t._)("span",{class:"token class-name"},"ServletException"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token class-name"},"IOException"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        "),(0,t._)("span",{class:"token class-name"},"System"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("out"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"println"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},'"hello servlet"'),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br")])]),(0,t._)("p",null,"中打印语句话，这样只要我们在浏览器中刷新一次，就会在控制台打印这句话"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214154616915.png?x-oss-process=style/pictureProcess1",data:"aurora"})])])],-1),r=(0,t.uE)('<h1 id="servlet的执行原理" tabindex="-1"><a class="header-anchor" href="#servlet的执行原理" aria-hidden="true">#</a> servlet的执行原理</h1><ul><li><p>首先tomcat服务器接收浏览器的请求，解析请求地址</p><p>http://localhost:8080/web/demon1</p></li><li><p>通过地址定位到服务器中的web项目，在web.xml文件中查找url-pattern是否有一个为<strong>demon1</strong>，没有，则找不到，如果存在，继续</p></li><li><p>通过mapping的servlet-name标签内容在servlet标签中查找servlet-name内容，如果都是一样的，那么tomcat就可以拿到这个java程序的字节码文件，因为包名已经知道，通过servlet-class知道的</p></li><li><p>拿到字节码文件，Class.forName()，就可以使用这个Class创建一个对象（newInstance()），之后就调用service方法，其他方法之后补充</p></li></ul><h2 id="配置servlet的启动时机" tabindex="-1"><a class="header-anchor" href="#配置servlet的启动时机" aria-hidden="true">#</a> 配置servlet的启动时机</h2><p>在web.xml文件中进行配置，并且一定要在servlet标签中进行配置，如果你想要为几个类，都设置启动时机，那么每一个类都需要设置</p><p><code>&lt;load-on-startup&gt;5&lt;/load-on-startup&gt;</code>有两个值，如果为负，则是第一次被访问的时候，就执行，也就是在浏览器中输入虚拟目录，按enter的时候</p><p>如果为整整数或者是0，那么就是只要服务器启动就执行，并且如果你有多个servletjava程序，那么就会执行多个多的init方法（前提所有的java程序都设置时机为整数的时候）</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>demon1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.web.servlet.Demon1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>\n<span class="token comment">&lt;!--        指定servlet的创建时机--&gt;</span>\n        <span class="token comment">&lt;!--\n        有两个值，一个为负，一个为正\n        1. 第一次被访问时，创建，其值为负\n        2. 在服务器启动时，创建，其值为正或者是0，也就是服务器启动的时候，就调用init()方法\n        --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h1 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h1><h2 id="destroy被摧毁时" tabindex="-1"><a class="header-anchor" href="#destroy被摧毁时" aria-hidden="true">#</a> destroy被摧毁时</h2><p>这个方法是在servlet被销毁之前就执行，相当于是交代遗言，</p><p>一般用于释放资源</p><h2 id="init方法" tabindex="-1"><a class="header-anchor" href="#init方法" aria-hidden="true">#</a> init方法</h2><p>只是在servlet被创建时执行，servlet是单例的，所以存在线程不安全的问题，解决的办法就是不要设置成员变量，设置局部变量</p><p>一般用于加载资源</p><h1 id="注解进行配置" tabindex="-1"><a class="header-anchor" href="#注解进行配置" aria-hidden="true">#</a> 注解进行配置</h1><p>使用注解进行配置的时候，我们就不需要在使用web.xml就可以完成配置</p><p>但是只有servlet3.0才支持注解，也就是从javaee6开始就支持</p><h2 id="webservlet" tabindex="-1"><a class="header-anchor" href="#webservlet" aria-hidden="true">#</a> @WebServlet</h2>',18),c=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214174532429.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),i=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214174555564.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),p=(0,t._)("p",null,"这个注解只能作用于类上，不能作用于方法或者其他上",-1),o=(0,t._)("p",null,'urlPatterns()为虚拟目录，我们可以进行配置，@WebServlet(urlPatterns = "demon1")',-1),u=(0,t._)("p",null,"其是一个数组",-1),d=(0,t._)("p",null,"因为在配置的时候，最重要的就是url的地址，而且在注解中，value就代表着最重要的，所以我们也可以把urlPatterns()的值写在value中，这种方式更加的简洁",-1),g=(0,t._)("h1",{id:"错误诊断",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#错误诊断","aria-hidden":"true"},"#"),(0,t.Uk)(" 错误诊断")],-1),m=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214202758327.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),h=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214202827864.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),b=(0,t._)("h1",{id:"idea中如何打开不同项目tomca",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#idea中如何打开不同项目tomca","aria-hidden":"true"},"#"),(0,t.Uk)(" idea中如何打开不同项目tomca")],-1),v=(0,t._)("h2",{id:"将javaee-jar包添加到项目中",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#将javaee-jar包添加到项目中","aria-hidden":"true"},"#"),(0,t.Uk)(" 将javaee jar包添加到项目中")],-1),_=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214205524478.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),x=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214205610567.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),k=(0,t._)("p",null,"将tomcat中的lib目录添加到这里就可以了",-1),y=(0,t._)("h2",{id:"启动不同的项目",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#启动不同的项目","aria-hidden":"true"},"#"),(0,t.Uk)(" 启动不同的项目")],-1),f=(0,t._)("h3",{id:"添加不同的tomcat",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#添加不同的tomcat","aria-hidden":"true"},"#"),(0,t.Uk)(" 添加不同的tomcat")],-1),z=(0,t._)("p",null,"记住：不同的module需要启动不同的tomcat",-1),j=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214205824444.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),w=(0,t._)("p",null,"点击加号，可以为不同的module添加不同的tomcat，如果启动一个tomcat，但是有两个，不能用这个module的tomcat去访问另一个的文件，减号可以取消tomcat",-1),S=(0,t._)("p",null,"启动的时候，可以选择",-1),U=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214211055144.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),P=(0,t._)("h2",{id:"配置",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#配置","aria-hidden":"true"},"#"),(0,t.Uk)(" 配置")],-1),C=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214211335162.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),q=(0,t.uE)('<p>需要填写的是web的绝对位置</p><h2 id="tomcat-catalina-log乱码情况" tabindex="-1"><a class="header-anchor" href="#tomcat-catalina-log乱码情况" aria-hidden="true">#</a> tomcat Catalina Log乱码情况</h2><p>将<strong>apache-tomcat-9.0.40\\conf\\logging.prpperties</strong>所有编码方式全部改成GBK就可以解决</p><h1 id="idea和tomcat的相关配置" tabindex="-1"><a class="header-anchor" href="#idea和tomcat的相关配置" aria-hidden="true">#</a> idea和tomcat的相关配置</h1><p>我们知道，部署web应用就三种方式，其实idea就是使用的第三种的方式，只是idea已经为我们设置了</p><h2 id="查看配置" tabindex="-1"><a class="header-anchor" href="#查看配置" aria-hidden="true">#</a> 查看配置</h2><p>通过打印信息Using CATALINA_BASE: &quot;C:\\Users\\chuchen\\AppData\\Local\\JetBrains\\IntelliJIdea2020.3\\tomcat\\6667befc-6feb-477e-b64c-eac42a173bf1&quot;</p><p>可以打开当前项目的tomcat的配置</p>',8),B=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214214439637.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),E=(0,t._)("p",null,"结构还是一样的",-1),I=(0,t._)("p",null,"打开文件",-1),A=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214214534075.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),D=(0,t._)("p",null,"从这里就可以知道，idea使用的就是部署项目中的第三种方式",-1),L=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214214643541.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),R=(0,t._)("p",null,"此文件里对应的docBase就是web项目的地址，path就是我们在idea中的配置",-1),W=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214214757778.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),N=(0,t._)("p",null,"并且此文件名就是以这个保存的，如果更改，只有重新启动tomcat才会看到改变的效果",-1),J=(0,t._)("h2",{id:"docbase",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#docbase","aria-hidden":"true"},"#"),(0,t.Uk)(" docBase")],-1),T=(0,t._)("p",null,"打开这个目录，此目录就是tomcat的工作空间",-1),F=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214215022618.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),G=(0,t._)("p",null,"WEB-INF中保存的就是我们的java的字节码文件，并且其结构就是和我们在idea中的Src中的目录是一样的",-1),H=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214215221927.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),K={},O=(0,s(83744).Z)(K,[["render",function(e,a){return(0,t.wg)(),(0,t.iD)(t.HY,null,[n,l,r,c,i,p,o,u,d,g,m,h,b,v,_,x,k,y,f,z,j,w,S,U,P,C,q,B,E,I,A,D,L,R,W,N,J,T,F,G,H],64)}]])}}]);