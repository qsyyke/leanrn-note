"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3230],{23037:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-4182fa6d",path:"/spring/springcloud/stream3.2%E5%AD%A6%E4%B9%A0.html",title:"spring cloud stream 3.2学习记录",lang:"en-US",frontmatter:{date:"2022/4/2"},excerpt:"",headers:[{level:2,title:"streamBridge使用",slug:"streambridge使用",children:[]},{level:2,title:"topic交换机",slug:"topic交换机",children:[]},{level:2,title:"fanout交换机的绑定",slug:"fanout交换机的绑定",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},23449:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var p=a(66252);const t=(0,p.uE)('<h1 id="spring-cloud-stream-3-2学习记录" tabindex="-1"><a class="header-anchor" href="#spring-cloud-stream-3-2学习记录" aria-hidden="true">#</a> spring cloud stream 3.2学习记录</h1><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>\n    <span class="token key atrule">cloud</span><span class="token punctuation">:</span>\n        <span class="token key atrule">stream</span><span class="token punctuation">:</span>\n          <span class="token key atrule">function</span><span class="token punctuation">:</span>\n            <span class="token key atrule">definition</span><span class="token punctuation">:</span> testFunc\n          <span class="token key atrule">bindings</span><span class="token punctuation">:</span>\n            <span class="token key atrule">testFunc-out-0</span><span class="token punctuation">:</span>\n              <span class="token key atrule">destination</span><span class="token punctuation">:</span> aurora<span class="token punctuation">-</span>stream<span class="token punctuation">-</span>test\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在配置的时候，无论存在一个bean还是存在多个bean，我们都需要配置<code>function.definition</code></p>',3),e=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image-20220408225931323",originSrc:"https://picture.xcye.xyz/image-20220408225931323.png",data:"aurora"})],-1),c=(0,p.uE)('<p>如果没有生产者没有设置stream.bindings.xxx.destination，但是设置了rabbitmq.bindings.xxx.producer的相关属性的时候，那么交换机的名称就是方法名称</p><p>如果我们指定<code>stream.bindings.xxx.destination</code>，那么这个值就是交换机的名称</p><p>其中stream.bindings.xxx.就是信道名称</p><h2 id="streambridge使用" tabindex="-1"><a class="header-anchor" href="#streambridge使用" aria-hidden="true">#</a> streamBridge使用</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>\n<span class="token keyword">private</span> <span class="token class-name">StreamBridge</span> streamBridge<span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token class-name">GenerateInfoUtils</span><span class="token punctuation">.</span><span class="token function">generateUid</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">boolean</span> send <span class="token operator">=</span> streamBridge<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;provider1-out-0&quot;</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> l <span class="token operator">+</span> <span class="token string">&quot;发送: &quot;</span> <span class="token operator">+</span> send<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这个send方法有多个重载，其中第一个参数，可以是绑定的名称，也可以是交换机名称(如果<code>spring.cloud.stream.bindings.xxx-out-0.destination</code>没有设置的时候，会将此名称作为交换机名称)</p><p>我们可以在send方法中发送Object类型的数据，如果想要正常使用，我们还需要在配置文件中，加上一些配置，可以通过<code>spring.cloud.stream.bindings.xxx-out-0</code>和<code>spring.cloud.stream.rabbit.bindings.&lt;channelName&gt;.producer.</code>进行设置</p><h2 id="topic交换机" tabindex="-1"><a class="header-anchor" href="#topic交换机" aria-hidden="true">#</a> topic交换机</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/msg3&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">boolean</span> send <span class="token operator">=</span> streamBridge<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topicPro-out-0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sdfsdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>spring.cloud.bindings:\n        topicPro-out-0:\n          destination: nimade\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>消费者，这里设置四个消费者</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">consumer1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> msg <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;交换机1号: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">consumer3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> msg <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;交换机3号: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">consumer4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> msg <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;交换机4号: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>\n\t  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>\n    <span class="token key atrule">stream</span><span class="token punctuation">:</span>\n      <span class="token key atrule">bindings</span><span class="token punctuation">:</span> <span class="token comment"># 服务的整合处理</span>\n        <span class="token key atrule">consumer1-in-0</span><span class="token punctuation">:</span>\n          <span class="token key atrule">destination</span><span class="token punctuation">:</span> nimade\n        <span class="token key atrule">consumer3-in-0</span><span class="token punctuation">:</span>\n          <span class="token key atrule">destination</span><span class="token punctuation">:</span> nimade\n        <span class="token key atrule">consumer4-in-0</span><span class="token punctuation">:</span>\n          <span class="token key atrule">destination</span><span class="token punctuation">:</span> nimade\n      <span class="token key atrule">function</span><span class="token punctuation">:</span>\n        <span class="token key atrule">definition</span><span class="token punctuation">:</span> consumer1;consumer3;consumer4\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>如果有多个消费者的话，不管是和哪种交换机进行绑定，都一定要设置<code>spring.cloud.function.definition</code>，值是方法名，如果存在多个，使用<code>;</code>进行分隔开</p>',14),o=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image-20220409002413733",originSrc:"https://picture.xcye.xyz/image-20220409002413733.png",data:"aurora"})],-1),l=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image-20220409002359560",originSrc:"https://picture.xcye.xyz/image-20220409002359560.png",data:"aurora"})],-1),u=(0,p.uE)('<h2 id="fanout交换机的绑定" tabindex="-1"><a class="header-anchor" href="#fanout交换机的绑定" aria-hidden="true">#</a> fanout交换机的绑定</h2><p>生产者</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/msg4&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    streamBridge<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;fanoutPro-out-0&quot;</span><span class="token punctuation">,</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>\n\t<span class="token key atrule">cloud</span><span class="token punctuation">:</span>\n\t\t<span class="token key atrule">stream</span><span class="token punctuation">:</span>\n\t\t\t<span class="token key atrule">bindings</span><span class="token punctuation">:</span> <span class="token comment"># 服务的整合处理</span>\n\t\t\t\t<span class="token key atrule">fanoutPro-out-0</span><span class="token punctuation">:</span>\n\t\t\t\t\t<span class="token key atrule">destination</span><span class="token punctuation">:</span> fanout<span class="token punctuation">-</span>ex\n\n\t<span class="token key atrule">cloud</span><span class="token punctuation">:</span>\n    <span class="token key atrule">stream</span><span class="token punctuation">:</span>\n      <span class="token key atrule">rabbit</span><span class="token punctuation">:</span>\n        <span class="token key atrule">bindings</span><span class="token punctuation">:</span>\n          <span class="token key atrule">fanoutPro-out-0</span><span class="token punctuation">:</span>\n            <span class="token key atrule">producer</span><span class="token punctuation">:</span>\n              <span class="token key atrule">exchangeType</span><span class="token punctuation">:</span> fanout\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>消费者</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">consumer3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> msg <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;交换机3号: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">consumer4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> msg <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;交换机4号: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',6),i={},r=(0,a(83744).Z)(i,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,c,o,l,u],64)}]])}}]);