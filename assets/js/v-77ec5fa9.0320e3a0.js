"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8924],{94565:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-77ec5fa9",path:"/datastructure/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8.html",title:"链表的使用",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"简介",slug:"简介",children:[]},{level:2,title:"单链表代码实现",slug:"单链表代码实现",children:[{level:3,title:"节点对象",slug:"节点对象",children:[]},{level:3,title:"操作方法",slug:"操作方法",children:[]},{level:3,title:"测试",slug:"测试",children:[]},{level:3,title:"总结",slug:"总结",children:[]},{level:3,title:"画图",slug:"画图",children:[]}]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},9774:(n,s,a)=>{a.r(s),a.d(s,{default:()=>b});var p=a(66252);const e=(0,p.uE)('<h1 id="链表的使用" tabindex="-1"><a class="header-anchor" href="#链表的使用" aria-hidden="true">#</a> 链表的使用</h1><p>对于数据存储来说，我们可以使用线性表的顺序存储，其有点就是查找快，可以直接通过下标获取数据，但是其最大缺点便是删除和插入时，需要移动大量的元素，需要耗费更多的时间，所以这也就需要链表的使用，线性表的链式存储。</p><p>其最大的特点就是每一个元素之间并不是相邻的位置关系，他们通过指针域链接在一起，这样当删除和插入新结点的时候，就不需要移动大量的元素</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>对于每一个元素来说，除了需要存储其数据之外，还需要存储一个指示其直接后继的信息</p><p>把存储数据元素信息的域称为<code>数据域</code></p><p>存储直接后继位置的域称为<code>指针域</code>，指针域中存储的信息称为指针或链</p><p>这两部分组成了数据元素(a1,a2,a3...)的存储印象，称为结点</p><p>n个结点链结成了一个链表，及线性表的链式存储，因为此链表的每个结点中包含一个指针域，所以叫做单链表</p><blockquote><p><code>把链表中的第一个结点的存储位置叫做头指针</code></p><p>如果某个结点的直接后继为<code>NULL</code>，那么就称该结点为尾结点</p></blockquote><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>为了存储方便，一般会在单链表第一个结点前新加一个结点，称为<code>头结点</code>，此结点不存储任何的信息，也可以存储一些附加信息，如单链表的长度，看需要决定，头结点的直接后继，指向第一个结点的指针</p></div><p>头指针和头结点的异同</p><blockquote><p>头指针</p></blockquote><ul><li><p>头指针存储第一个结点的地址的指针</p><img src="https://ooszy.cco.vin/img/blog-note/image-20210923193513550.png?x-oss-process=style/pictureProcess1" alt="image-20210923193513550" style="zoom:50%;"><p><code>头指针并不是一个结点，其只是第一个结点上的指针域的描述</code></p></li><li><p>无论链表是否为空，头指针均部位空，头指针是链表的必要元素</p></li></ul><blockquote><p>头结点</p></blockquote><ul><li>头结点是为了操作的统一和方便而设立的，放在第一元素的结点之前，其数据域一般是没有含义的，也可以存放链表长度等附属信息</li><li>有了头结点，对第一元素结点前插入结点和删除，其操作与其他结点的操作就统一了</li><li>头结点并不是链表的必要元素</li></ul><h2 id="单链表代码实现" tabindex="-1"><a class="header-anchor" href="#单链表代码实现" aria-hidden="true">#</a> 单链表代码实现</h2><h3 id="节点对象" tabindex="-1"><a class="header-anchor" href="#节点对象" aria-hidden="true">#</a> 节点对象</h3><blockquote><p><code>HeroNode</code>是一个节点对象，通过模拟英雄人物的添加进行链表的测试，其中,name,no,nickName都是节点中的数据域，next是一个指针，指向该结点的直接后续指针引用</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 节点对象</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeroNode</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 数据域</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> nickName<span class="token punctuation">;</span>\n\n    <span class="token comment">// 指针域</span>\n    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span> next<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> no<span class="token punctuation">,</span> <span class="token class-name">String</span> nickName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>nickName <span class="token operator">=</span> nickName<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> no<span class="token punctuation">,</span> <span class="token class-name">String</span> nickName<span class="token punctuation">,</span> <span class="token class-name">HeroNode</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>nickName <span class="token operator">=</span> nickName<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;HeroNode{&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span> <span class="token string">&quot;, no=&quot;</span> <span class="token operator">+</span> no <span class="token operator">+</span> <span class="token string">&quot;, nickName=&#39;&quot;</span> <span class="token operator">+</span> nickName <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span> <span class="token string">&quot;, next=&quot;</span> <span class="token operator">+</span> next <span class="token operator">+</span> <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="操作方法" tabindex="-1"><a class="header-anchor" href="#操作方法" aria-hidden="true">#</a> 操作方法</h3><blockquote><p>实现链表的增删改查操作，<code>SingleLink</code>对象也就相当于是一个单链表，在此对象中，保存的该单链表的所有节点信息</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">vin<span class="token punctuation">.</span>cco<span class="token punctuation">.</span>link</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * 这是一个单链表\n * <span class="token keyword">@author</span> 青衫烟雨客 程钦义\n * <span class="token keyword">@blog</span> https://blog.cco.vin\n * <span class="token keyword">@date</span> 2021/09/23 19:52\n **/</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleLink</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 这是一个头结点</span>\n    <span class="token keyword">private</span> <span class="token class-name">HeroNode</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 向单链表中，添加结点</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNode</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 因为头结点不能够移动，所以创建一个临时直接，进行判断</span>\n        <span class="token class-name">HeroNode</span> tempNode <span class="token operator">=</span> head<span class="token punctuation">;</span>\n\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//如果某个结点的直接后继为null，那么直接退出循环，在该结点后加入新节点</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token comment">//运行到这里，说明该tempNode的直接后继不为null</span>\n            <span class="token comment">// 重新将tempNode的引用指向原来的tempNode的直接后继</span>\n            tempNode <span class="token operator">=</span> tempNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">//退出循环，说明该tempNode的直接后继为null，将node加入</span>\n        tempNode<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 通过顺序的方式向单链表中插入数据 也就是通过结点的no进行判断的</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOrderBy</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">HeroNode</span> tempNode <span class="token operator">=</span> head<span class="token punctuation">;</span>\n        <span class="token comment">// 设置标志点，如果为TRUE，表示该插入节点的no已经在单链表中存在</span>\n        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 空链表</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token comment">// 该tempNode存在直接后继结点</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">&gt;</span> node<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 说明node结点的no在tempNode前，位置找到</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">==</span> node<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// no编号重合</span>\n                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            tempNode <span class="token operator">=</span> tempNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;该预插入节点&quot;</span> <span class="token operator">+</span> node <span class="token operator">+</span> <span class="token string">&quot;已经存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n            node<span class="token punctuation">.</span>next <span class="token operator">=</span> tempNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n            tempNode<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 更新节点信息，更具no</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateNode</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 判断链表中是否存在此no</span>\n        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token class-name">HeroNode</span> tempNode <span class="token operator">=</span> head<span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 空链表</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">==</span> node<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            tempNode <span class="token operator">=</span> tempNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 得到需要更改的节点信息，也就是tempNode.next</span>\n            tempNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>name <span class="token operator">=</span> node<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n            tempNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>nickName <span class="token operator">=</span> node<span class="token punctuation">.</span>nickName<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 删除某个单链表的信息，也是根据no进行删除</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 判断是否存在此node，更具no</span>\n        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token class-name">HeroNode</span> tempNode <span class="token operator">=</span> head<span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">==</span> node<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">//找到</span>\n                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            tempNode <span class="token operator">=</span> tempNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            tempNode<span class="token punctuation">.</span>next <span class="token operator">=</span> tempNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;未找到该结点: &quot;</span> <span class="token operator">+</span> node <span class="token operator">+</span> <span class="token string">&quot;的信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 展示该单链表的数据</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showSingleLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;该单链表为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token class-name">HeroNode</span> nextNode <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextNode<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">//到达最后一个节点</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            nextNode <span class="token operator">=</span> nextNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br></div></div><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleLinkDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//创建四个结点</span>\n        <span class="token class-name">HeroNode</span> hero1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token string">&quot;宋江&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;及时雨&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">HeroNode</span> hero4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token string">&quot;林冲&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&quot;豹子头&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">HeroNode</span> hero2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token string">&quot;卢俊义&quot;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;玉麒麟&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">HeroNode</span> hero3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token string">&quot;吴用&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;智多星&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">SingleLink</span> singleLink <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">/*singleLink.addNode(hero1);\n        singleLink.addNode(hero2);\n        singleLink.addNode(hero3);\n        singleLink.addNode(hero4);*/</span>\n\n        singleLink<span class="token punctuation">.</span><span class="token function">addOrderBy</span><span class="token punctuation">(</span>hero1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        singleLink<span class="token punctuation">.</span><span class="token function">addOrderBy</span><span class="token punctuation">(</span>hero2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        singleLink<span class="token punctuation">.</span><span class="token function">addOrderBy</span><span class="token punctuation">(</span>hero3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        singleLink<span class="token punctuation">.</span><span class="token function">addOrderBy</span><span class="token punctuation">(</span>hero4<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        singleLink<span class="token punctuation">.</span><span class="token function">showSingleLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;修改no为3的节点信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// singleLink.updateNode(new HeroNode(&quot;qsyyke&quot;,5,&quot;chuchen&quot;));</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行删除no为4的节点信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// singleLink.deleteNode(hero4);</span>\n        singleLink<span class="token punctuation">.</span><span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        singleLink<span class="token punctuation">.</span><span class="token function">showSingleLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li><p>在对单链表进行操作的过程中，一般都需要设置一个临时变量，最初引用值为头节点的引用，这是因为在操作的过程中，头节点是不能移动的，在删除等操作过程中，都需要不断切换节点，进行删除判断，所以需要使用一个临时变量来接收</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">HeroNode</span> tempNode <span class="token operator">=</span> head<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>头节点是在初始化单链表对象<code>SingleLink</code>的时候就已经创建了</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleLink</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 这是一个头结点</span>\n    <span class="token keyword">private</span> <span class="token class-name">HeroNode</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>在进行删除，更新，按照顺序添加结点的时候，都需要使用一个对照点，这里使用的是<code>no</code></p></li><li><p>在使用的过程中，可以使用一个标志点配合使用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 更新节点信息，更具no</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateNode</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 判断链表中是否存在此no</span>\n    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token class-name">HeroNode</span> tempNode <span class="token operator">=</span> head<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 空链表</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">==</span> node<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        tempNode <span class="token operator">=</span> tempNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 得到需要更改的节点信息，也就是tempNode.next</span>\n        tempNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>name <span class="token operator">=</span> node<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n        tempNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>nickName <span class="token operator">=</span> node<span class="token punctuation">.</span>nickName<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div></li></ol></div><h3 id="画图" tabindex="-1"><a class="header-anchor" href="#画图" aria-hidden="true">#</a> 画图</h3><h4 id="更新结点信息" tabindex="-1"><a class="header-anchor" href="#更新结点信息" aria-hidden="true">#</a> 更新结点信息</h4>',29),t=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210923223936068.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),o=(0,p.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateNode</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 判断链表中是否存在此no</span>\n    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token class-name">HeroNode</span> tempNode <span class="token operator">=</span> head<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 空链表</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">==</span> node<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        tempNode <span class="token operator">=</span> tempNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 得到需要更改的节点信息，也就是tempNode.next</span>\n        tempNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>name <span class="token operator">=</span> node<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n        tempNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>nickName <span class="token operator">=</span> node<span class="token punctuation">.</span>nickName<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>得到对应需要结点tempNode之后，不能直接使用下面方法进行结点的更新</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>tempNode<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这是因为，此tempNode的指针域保存的对象地址并不是node的对象地址，只能通过重新赋值方式修改</p></div><h4 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h4>',3),c=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210923225013913.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),l=(0,p._)("h4",{id:"结点增加",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#结点增加","aria-hidden":"true"},"#"),(0,p.Uk)(" 结点增加")],-1),u=(0,p._)("p",null,"结点的增加也是一样的道理",-1),r=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210923225529248.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),i=(0,p.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 通过顺序的方式向单链表中插入数据 也就是通过结点的no进行判断的</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOrderBy</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">HeroNode</span> tempNode <span class="token operator">=</span> head<span class="token punctuation">;</span>\n    <span class="token comment">// 设置标志点，如果为TRUE，表示该插入节点的no已经在单链表中存在</span>\n    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 空链表</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// 该tempNode存在直接后继结点</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">&gt;</span> node<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 说明node结点的no在tempNode前，位置找到</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">==</span> node<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// no编号重合</span>\n            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        tempNode <span class="token operator">=</span> tempNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;该预插入节点&quot;</span> <span class="token operator">+</span> node <span class="token operator">+</span> <span class="token string">&quot;已经存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n        node<span class="token punctuation">.</span>next <span class="token operator">=</span> tempNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        tempNode<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div>',1),k={},b=(0,a(83744).Z)(k,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,t,o,c,l,u,r,i],64)}]])}}]);