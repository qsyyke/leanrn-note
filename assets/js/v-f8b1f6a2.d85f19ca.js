"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1616],{47014:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-f8b1f6a2",path:"/spring/spring5/%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E6%B3%A8%E5%85%A5.html",title:"使用注解前提",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"步骤",slug:"步骤",children:[]},{level:2,title:"测试",slug:"测试",children:[]},{level:2,title:"注解区别",slug:"注解区别",children:[]},{level:2,title:"使用注解的几种方式",slug:"使用注解的几种方式",children:[]},{level:2,title:"扫描多个包的方式",slug:"扫描多个包的方式",children:[]},{level:2,title:"对属性的赋值操作",slug:"对属性的赋值操作",children:[]},{level:2,title:"对引用类型进行赋值操作",slug:"对引用类型进行赋值操作",children:[]},{level:2,title:"使用配置文件和$，注解配合使用",slug:"使用配置文件和-注解配合使用",children:[]},{level:2,title:"配置文件和注解注入的选择",slug:"配置文件和注解注入的选择",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},83386:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var e=a(66252);const p=(0,e.uE)('<h1 id="使用注解前提" tabindex="-1"><a class="header-anchor" href="#使用注解前提" aria-hidden="true">#</a> 使用注解前提</h1><p>如果需要使用注解的方式，那么就必须要用到 <code>spring=aop</code>这个包，否则的话，不能使用注解，但是使用maven，导入<code>spring-context</code>依赖的时候，就会自动导入这个包</p><h1 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h1><h2 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤" aria-hidden="true">#</a> 步骤</h2><ul><li>加入maven依赖，spring-context,在加入这个依赖的时候，会间接的加入spring-aop依赖，这个依赖是注解必须的</li><li>在类中使用spring注解，有多个不同功能的注解</li><li>在spring的配置文件中，加入一个组件扫描器的标签，说明注解在你的项目中的位置</li></ul><ol><li><p>使用注解</p><p>在这个类的上，加上<code>@Component</code>注解</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;zs&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这个注解的作用，相当于是创建对象的作用，所以上面的注解，就相当于创建了一个zs的对象，这个注解的值，是一个唯一值，这个注解相当于</p><p><code>&lt;bean id=&quot;myStudent&quot; class=&quot;com.bjpowernode.ba01.Student&quot; /&gt;</code></p></li><li><p>创建组件扫描器</p><p>如果使用了注解之后，一定要使用组件扫描器，需要创建一个配置文件</p><p><code>&lt;context:component-scan base-package=&quot;vin.cco.domain&quot; /&gt;</code></p><p>其中，<code>base-package=&quot;vin.cco.domain&quot;</code>这个是一个包名路径，不是类的全限定名称</p><p>其工作原理是，添加了这个标签之后，spring就会自动扫描这个包中，和子包中的所有的类，会在这些类中寻找有这个注解的类，如果有，则会创建对象，或者是给属性赋值</p><p>加入这个组件扫描器之后，配置文件会有什么变化</p><ol><li>会自动的加上一个约束文件（idea会自动加上）</li><li>给约束文件，起一个别名空间</li></ol><p>最初spring配置文件中的代码为</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;\n\n&lt;/beans&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>但是加上这个组件扫描器之后，idea就会自动加上一个约束</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;\n       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;\n    &lt;context:component-scan base-package=&quot;vin.cco.domain&quot; /&gt;\n&lt;/beans&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ol><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//这是一个注解，相当于创建一个对象的功能 这个值是唯一的，</span>\n<span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;zs&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> getName <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> setName <span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> getAge <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> setAge <span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> toString <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Student{&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span> <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>测试类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">&quot;anno1.xml&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Student</span> zs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;zs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>成功输出，这个的<code>context.getBean(&quot;zs&quot;);</code>参数的值，就是注解中的那个value值</p><h2 id="注解区别" tabindex="-1"><a class="header-anchor" href="#注解区别" aria-hidden="true">#</a> 注解区别</h2><p>除了<code>Component</code>能够创建对象之外，还有几个注解，他们也能创建对象，但是他们之间的功能又存在不同，</p><ul><li><p><code>@Repository</code>（用在持久层类的上面） : 放在dao的实现类上面，必须要放在实现类上面，因为接口是不能够进行创建对象的</p><p>表示创建dao对象，dao对象是能访问数据库的。</p></li><li><p><code>@Service</code>(用在业务层类的上面)：放在service的实现类上面，</p><p>创建service对象，service对象是做业务处理，可以有事务等功能的。</p></li><li><p><code>@Controller</code>(用在控制器的上面)：放在控制器（处理器）类的上面，创建控制器对象的，</p><p>控制器对象，能够接受用户提交的参数，显示请求的处理结果。</p></li></ul><p>@Repository，@Service，@Controller是给项目的对象分层的。</p><p>他们之间虽然都是用于创建对象，但是他们之间的功能并不是一样的，各有各的功能</p><p>那么什么时候使用@Component，先看他有没有mvc三层结构的功能，如果都没有的话，那么我们就使用@component进行对象的创建</p><h2 id="使用注解的几种方式" tabindex="-1"><a class="header-anchor" href="#使用注解的几种方式" aria-hidden="true">#</a> 使用注解的几种方式</h2><p>因为@component注解中，只有一个value，所以我们可以省略value不写<code>@Component(&quot;zs&quot;)</code></p><p>也可以直接写<code>@Component()</code>，但是如果是这种的话，那么<code>context.getBean(&quot;student&quot;)</code>就需要使这个类名的首字母小写</p><h2 id="扫描多个包的方式" tabindex="-1"><a class="header-anchor" href="#扫描多个包的方式" aria-hidden="true">#</a> 扫描多个包的方式</h2>',21),t=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)("使用多个"),(0,e._)("code",null,'<context:component-scan base-package="vin.cco.domain" />'),(0,e.Uk)("标签，这个标签可以使用多次")])]),(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)("使用分号"),(0,e._)("code",null,";"),(0,e.Uk)("或者逗号"),(0,e._)("code",null,","),(0,e.Uk)("进行分割，这种方式，也可以扫描多个包")]),(0,e._)("p",null,[(0,e._)("code",null,'<context:component-scan base-package="vin.cco.domain;vin.cco.domain1" />')])]),(0,e._)("li",null,[(0,e._)("p",null,"使用多个包共同的父包"),(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210519205239883.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,e._)("p",null,[(0,e._)("code",null,'<context:component-scan base-package="vin" />')]),(0,e._)("p",null,"但是这种方式的话，不是很推荐使用，因为可能这个vin包中，含有很多个子包，那么在启动程序的时候，加载资源花费的时间，就会变得非常多")])],-1),o=(0,e.uE)('<h2 id="对属性的赋值操作" tabindex="-1"><a class="header-anchor" href="#对属性的赋值操作" aria-hidden="true">#</a> 对属性的赋值操作</h2><p>使用注解<code>@Value</code>对属性进行赋值的两种操作</p><ul><li><p>在属性名上使用，<code>这种方式，不需要有set方法，推荐使用</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//@Value(&quot;chuchen&quot;)</span>\n<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n\n<span class="token comment">//@Value(&quot;20&quot;)</span>\n<span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>在set方法上使用，<code>原理是调用set方法进行赋值，所以如果此set方法中，还含有其他的代码块的话，也会执行，不太推荐使用</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;qsyyke&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> setName <span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> setAge <span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;chuchen blog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul><h2 id="对引用类型进行赋值操作" tabindex="-1"><a class="header-anchor" href="#对引用类型进行赋值操作" aria-hidden="true">#</a> 对引用类型进行赋值操作</h2><p>使用<code>@Autowired()</code>注解对引用类型进行赋值操作，对引用类型进行赋值操作，不能使用<code>@Value</code>注解进行，因为这个注解中，传入的是一个String类型，只能对int，String等赋值，对引用赋值，需要使用<code>@Autowired()</code></p><p>同样也是有两种写法，在属性上面，在set方法上面</p><p>但是推荐在属性上面进行赋值操作</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">&quot;bs&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;保山学院&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;云南保山&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> toString <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;School{&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span> <span class="token string">&quot;, address=&#39;&quot;</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span> <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;初尘&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;21&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">School</span> school<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> toString <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Student{&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span> <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">&quot;, school=&quot;</span> <span class="token operator">+</span> school <span class="token operator">+</span> <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>成功输出</p><p><code>@Autowired()</code>注解参数中，只有一个Boolean类型的参数，</p><p><code>boolean required() default true;</code>，默认就是为true，不需要写，原理就是使用自动注入的方式，使用byType或者是byName</p><p>也可以不用使用注解方式进行school对象的创建，也可以使用配置文件，进行对象的创建</p><p><code>&lt;bean id=&quot;bs&quot; class=&quot;vin.cco.anno3.School&quot;&gt;&lt;/bean&gt;</code>同样也可以达到效果</p><p>使用上面这种方式进行引用赋值，是使用<code>byType</code>，但是如果需要使用<code>byName</code>，那么就需要在加上一个注解</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;bs&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">private</span> <span class="token class-name">School</span> school<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>原理，在创建这个对象的时候，就会去寻找，对象School，并且这个对象的名字为bs的对象，如果没有找到，那么就会报错，这种方式就是通过byName进行赋值</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">&quot;bs&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token punctuation">{</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>Autowired</code>注解参数的使用</p><p>假如，我们使用byName进行引用的赋值操作，但是<code> @Qualifier(&quot;bs&quot;)@Autowired()</code>的名称写错了，如果<code> @Autowired(required = true)</code>，那么就会报错，因为为true，就表示，会去寻找，找不到就报错</p><p>但是如果是<code> @Autowired(required = false)</code>，当找不到的时候，就会为这个引用赋值一个null值</p><p>但是推荐使用true，因为尽管启动的时候，程序发生错误，但是我们还可以进行调试</p><p>对引用属性进行赋值，还可以使用jdk提供的注解进行<code>@Resource</code>，但是这个注解，在jdk11中，就不支持了</p><p>这个默认是使用byName进行注入的，但是如果使用这个名字，没有找到，就会使用byType进行赋值</p><h2 id="使用配置文件和-注解配合使用" tabindex="-1"><a class="header-anchor" href="#使用配置文件和-注解配合使用" aria-hidden="true">#</a> 使用配置文件和$，注解配合使用</h2><p>我们也可以将参数的值，写入配置文件properties中，在注解中，使用${名称}方式进行属性的赋值操作</p><p>使用步骤</p><ol><li>定义配置文件</li><li>在springxml文件中，加载这个配置文件</li><li>在注解中<code>@Value(&quot;${名称})</code>进行属性的赋值</li></ol><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value">chsdfuchen</span>\n<span class="token attr-name">age</span><span class="token punctuation">=</span><span class="token attr-value">199</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;context:component-scan base-package=&quot;vin.cco.anno3&quot; /&gt;\n&lt;!--&lt;bean id=&quot;bs&quot; class=&quot;vin.cco.anno3.School&quot;&gt;&lt;/bean&gt;--&gt;\n&lt;context:property-placeholder location=&quot;value.properties&quot; /&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在注解中使用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${name}&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${age}&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>成功输出，<code>感觉使用配置文件进行传值的方式，会比较方便</code></p><h2 id="配置文件和注解注入的选择" tabindex="-1"><a class="header-anchor" href="#配置文件和注解注入的选择" aria-hidden="true">#</a> 配置文件和注解注入的选择</h2><p>在使用配置文件和注解中，该如何选择呢，现在很多时候，使用的是注解的方式，但是也并不是配置文件就不行，最好的就是他们之间共同配合使用</p>',35),c={},l=(0,a(83744).Z)(c,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,t,o],64)}]])}}]);