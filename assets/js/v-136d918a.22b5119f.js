"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9367],{608:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-136d918a",path:"/javaweb/json.html",title:"json介绍",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"json的遍历",slug:"json的遍历",children:[]},{level:2,title:"方法解释",slug:"方法解释",children:[]},{level:2,title:"Json注解",slug:"json注解",children:[]},{level:2,title:"将List或者Map集合转化为Json",slug:"将list或者map集合转化为json",children:[]},{level:2,title:"将Json转换为java对象",slug:"将json转换为java对象",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},77428:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var p=a(66252);const t=(0,p.uE)('<h1 id="json介绍" tabindex="-1"><a class="header-anchor" href="#json介绍" aria-hidden="true">#</a> json介绍</h1><h1 id="语法规则" tabindex="-1"><a class="header-anchor" href="#语法规则" aria-hidden="true">#</a> 语法规则</h1><blockquote><ul><li>数据在名称/值对中</li><li>数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul></blockquote><p><code>使用的是键值对的方式</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token literal-property property">键</span><span class="token operator">:</span>值\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>值的写法和数据类型</code></p><blockquote><ul><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li>逻辑值（true 或 false）</li><li>数组（在方括号中）</li><li>对象（在花括号中）</li><li>null</li></ul></blockquote><h1 id="嵌套" tabindex="-1"><a class="header-anchor" href="#嵌套" aria-hidden="true">#</a> 嵌套</h1><p>json可以进行嵌套使用</p><ul><li><strong>---&gt; {}</strong></li></ul><blockquote><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>var person = <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&quot;cqy&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;pwd&quot;</span><span class="token operator">:</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span>;                 \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote><ul><li><strong>[] ---&gt; {}</strong></li></ul><blockquote><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>var persons = \n<span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>name<span class="token operator">:</span>...<span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">345</span><span class="token punctuation">,</span>...<span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>name<span class="token operator">:</span>...<span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">345</span><span class="token punctuation">,</span>...<span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>name<span class="token operator">:</span>...<span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">345</span><span class="token punctuation">,</span>...<span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></blockquote><ul><li><strong>{} ---&gt; []</strong></li></ul><blockquote><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>var persons = \n<span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>....<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>...<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>...<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>...<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\nvar persons = \n<span class="token punctuation">{</span>                                                                   \n    <span class="token property">&quot;habit&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>code<span class="token operator">:</span><span class="token string">&quot;coding&quot;</span><span class="token punctuation">,</span>ah<span class="token operator">:</span><span class="token string">&quot;ppq&quot;</span><span class="token punctuation">,</span>is<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\t\t\t\t<span class="token punctuation">{</span>code<span class="token operator">:</span><span class="token string">&quot;computer&quot;</span><span class="token punctuation">,</span>ah<span class="token operator">:</span><span class="token string">&quot;ymq&quot;</span><span class="token punctuation">,</span>is<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\t\n    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>name_age<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name_age<span class="token operator">:</span><span class="token number">34</span><span class="token punctuation">}</span><span class="token punctuation">]</span>                                         \n<span class="token punctuation">}</span>;                                                                                \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></blockquote><ul><li><strong>{} ---&gt; {}</strong></li></ul><blockquote><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>var persons = \n<span class="token punctuation">{</span>\n    <span class="token punctuation">{</span>name<span class="token operator">:</span>....<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">{</span>age<span class="token operator">:</span><span class="token number">234</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">{</span>sex<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></blockquote><h1 id="获取json值" tabindex="-1"><a class="header-anchor" href="#获取json值" aria-hidden="true">#</a> 获取json值</h1><p>格式</p><blockquote><ul><li><p>对象：</p><ul><li><code>对象名.键名</code></li><li><code>对象名[&#39;键名&#39;]</code></li></ul></li><li><p>数组</p><ul><li><code>对象[]...</code></li></ul><p>如果保存的是一个数组的格式，那么就是使用<code>下标</code>获取到这个数组对象，如果这个对象是<code>{}</code>，就还是一样的</p></li></ul></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>                                                                     \n    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;cqy&quot;</span><span class="token punctuation">,</span>                                                                    \n    <span class="token string-property property">&quot;pwd&quot;</span><span class="token operator">:</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span>                                                                   \n    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">,</span>                                                                        \n    <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token boolean">true</span>                                                                       \n<span class="token punctuation">}</span><span class="token punctuation">;</span>                                                                                 \n<span class="token function">alert</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                             \n<span class="token function">alert</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                           \n                                                                                   \n<span class="token keyword">var</span> persons <span class="token operator">=</span> <span class="token punctuation">{</span>                                                                    \n    <span class="token string-property property">&quot;habit&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">code</span><span class="token operator">:</span><span class="token string">&quot;coding&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">ah</span><span class="token operator">:</span><span class="token string">&quot;ppq&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">is</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">code</span><span class="token operator">:</span><span class="token string">&quot;computer&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">ah</span><span class="token operator">:</span><span class="token string">&quot;ymq&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">is</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">name_age</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">name_age</span><span class="token operator">:</span><span class="token number">34</span><span class="token punctuation">}</span><span class="token punctuation">]</span>                                           \n<span class="token punctuation">}</span><span class="token punctuation">;</span>                                                                                 \n<span class="token function">alert</span><span class="token punctuation">(</span>persons<span class="token punctuation">.</span>habit<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                      \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="json的遍历" tabindex="-1"><a class="header-anchor" href="#json的遍历" aria-hidden="true">#</a> json的遍历</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>                           \n    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;cqy&quot;</span><span class="token punctuation">,</span>                          \n    <span class="token string-property property">&quot;pwd&quot;</span><span class="token operator">:</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span>                         \n    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">,</span>                              \n    <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token boolean">true</span>                             \n<span class="token punctuation">}</span><span class="token punctuation">;</span>                                       \n<span class="token comment">//遍历                                     </span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>                \n    <span class="token comment">// console.log(key+&quot; : &quot;+person.key);</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">&quot; : &quot;</span><span class="token operator">+</span>person<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token punctuation">}</span>                                        \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> persons <span class="token operator">=</span> <span class="token punctuation">{</span>                                                                    \n    <span class="token string-property property">&quot;habit&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">code</span><span class="token operator">:</span><span class="token string">&quot;coding&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">ah</span><span class="token operator">:</span><span class="token string">&quot;ppq&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">is</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">code</span><span class="token operator">:</span><span class="token string">&quot;computer&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">ah</span><span class="token operator">:</span><span class="token string">&quot;ymq&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">is</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">name_age</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">name_age</span><span class="token operator">:</span><span class="token number">34</span><span class="token punctuation">}</span><span class="token punctuation">]</span>                                           \n<span class="token punctuation">}</span><span class="token punctuation">;</span>                                                                                 \n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> persons<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                         \n    <span class="token comment">//key为habit name  persons[key]为[{code:&quot;coding&quot;,ah:&quot;ppq&quot;,is:true}               </span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> persons<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                \n        <span class="token comment">//f 为{code:&quot;coding&quot;,ah:&quot;ppq&quot;,is:true}                                      </span>\n        <span class="token keyword">var</span> f <span class="token operator">=</span> persons<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                                                   \n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key_f <span class="token keyword">in</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                     \n            <span class="token comment">//key_f为每一个值                                                         </span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key_f<span class="token operator">+</span><span class="token string">&quot; : &quot;</span><span class="token operator">+</span>f<span class="token punctuation">[</span>key_f<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                     \n        <span class="token punctuation">}</span>                                                                          \n    <span class="token punctuation">}</span>                                                                              \n<span class="token punctuation">}</span>                                                                                  \n                                                                                   \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h1 id="json解析" tabindex="-1"><a class="header-anchor" href="#json解析" aria-hidden="true">#</a> json解析</h1><p>解析json的技术有很多</p><blockquote><p>Jsonlib，Gson，fastjson，jackson</p></blockquote><p>使用<code>jackson</code>进行解析的步骤</p>',28),o=(0,p._)("ol",null,[(0,p._)("li",null,[(0,p._)("p",null,"导入jar包"),(0,p._)("blockquote",null,[(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210303230506507.png?x-oss-process=style/pictureProcess1",data:"aurora"})])])]),(0,p._)("li",null,[(0,p._)("p",null,"创建Jackson核心对象 ObjectMapper")]),(0,p._)("li",null,[(0,p._)("p",null,"调用相关方法进行解析")])],-1),e=(0,p.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token comment">//1.创建对象</span>\n    <span class="token class-name">User</span> zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    zs<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    zs<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    zs<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token char">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//创建对象</span>\n    <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//解析</span>\n    <span class="token comment">/*String s = mapper.writeValueAsString(zs);\n    System.out.println(s);*/</span>\n\t<span class="token comment">// mapper.writeValue(new File(&quot;D://zs.txt&quot;),zs);</span>\n    mapper<span class="token punctuation">.</span><span class="token function">writeValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D://zszs.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>zs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="方法解释" tabindex="-1"><a class="header-anchor" href="#方法解释" aria-hidden="true">#</a> 方法解释</h2><p><code>writeValue(参数1，obj)</code>此方法可以使用参数类型，将解析的json以参数类型进行保存</p><blockquote><p>File：将obj对象转换为JSON字符串，并保存到指定的文件中 Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中 OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中</p></blockquote><p><code>writeValueAsString(obj)</code>:将对象转为json字符串，返回的就是一个<code>String</code>类型</p><h2 id="json注解" tabindex="-1"><a class="header-anchor" href="#json注解" aria-hidden="true">#</a> Json注解</h2><p>有的时候，我们会使用<code>Date</code>类来表示日期，但是时间戳的形式，用户根本就看不懂，</p><p>这个时候，就可以使用注解，</p><ol><li>将这个日期忽略，这样在将对象解析为json的时候，就会忽略<code>Date</code>字段</li><li>也可以将这个转换成我们看得懂的形式</li></ol><ul><li><p><code>@JsonIgnore(true)</code></p><p>忽略此字段 再将对象扎转换为json的时候，会忽略此字段</p><p>在对象解析为json的时候，就会忽略这个字段<code>private Date birthday;</code></p><p>此注解默认<code>value(true)</code></p></li><li><p><code>@JsonFormat(pattern = &quot;yyyy年MM月dd日&quot;)</code></p><p>将这个字段以某种格式进行转换</p><p><code>private Date birthday;</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">{</span><span class="token string">&quot;username&quot;</span><span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">&quot;sex&quot;</span><span class="token operator">:</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;birthday&quot;</span><span class="token operator">:</span><span class="token string">&quot;2021年03月04日&quot;</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><h2 id="将list或者map集合转化为json" tabindex="-1"><a class="header-anchor" href="#将list或者map集合转化为json" aria-hidden="true">#</a> 将List或者Map集合转化为Json</h2><ul><li><p><code>List</code>转Json</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token comment">//1.创建对象</span>\n    <span class="token class-name">User</span> z1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    z1<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    z1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    z1<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token char">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    z1<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">User</span> z2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    z2<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    z2<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    z2<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token char">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    z2<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">User</span> z3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    z3<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    z3<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    z3<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token char">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    z3<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//集合对象</span>\n    <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>z1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>z2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>z3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//创建对象</span>\n    <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div></li></ul><blockquote><p>输出结果</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">[</span>\n    <span class="token punctuation">{</span><span class="token property">&quot;username&quot;</span><span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token property">&quot;sex&quot;</span><span class="token operator">:</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;birthday&quot;</span><span class="token operator">:</span><span class="token string">&quot;2021年03月04日&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span><span class="token property">&quot;username&quot;</span><span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token property">&quot;sex&quot;</span><span class="token operator">:</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;birthday&quot;</span><span class="token operator">:</span><span class="token string">&quot;2021年03月04日&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\t   \n    <span class="token punctuation">{</span><span class="token property">&quot;username&quot;</span><span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token property">&quot;sex&quot;</span><span class="token operator">:</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;birthday&quot;</span><span class="token operator">:</span><span class="token string">&quot;2021年03月04日&quot;</span><span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>因为list集合是一个数组的形式，所以将list集合转化为json一定是以数组形式进行存储的</code>，每一个list中存放了不同的对象数据，这个也就是数组中的每一个下标对应</p></blockquote><ul><li><p>Map集合转Json</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;chuchen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;sex&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;habit&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;coding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>输出结果</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;habit&quot;</span><span class="token operator">:</span><span class="token string">&quot;coding&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;sex&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;chuchen&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote></li></ul><p>map集合就是以键值对的方式进行存储的，所以将map集合转化为json，那么也一定是以键值对的方式进行存储</p><h2 id="将json转换为java对象" tabindex="-1"><a class="header-anchor" href="#将json转换为java对象" aria-hidden="true">#</a> 将Json转换为java对象</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n   <span class="token comment">//将json转换为java对象</span>\n   <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;username\\&quot;:\\&quot;张三\\&quot;,\\&quot;age\\&quot;:22,\\&quot;sex\\&quot;:\\&quot;男\\&quot;,\\&quot;birthday\\&quot;:\\&quot;2021年03月04日\\&quot;}&quot;</span><span class="token punctuation">;</span>\n   <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token class-name">User</span> user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>运行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">User</span><span class="token punctuation">{</span>username<span class="token operator">=</span><span class="token char">&#39;张三&#39;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">,</span> sex<span class="token operator">=</span>男<span class="token punctuation">,</span> birthday<span class="token operator">=</span><span class="token class-name">Thu</span> <span class="token class-name">Mar</span> <span class="token number">04</span> <span class="token number">08</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> CST <span class="token number">2021</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>将json作为String时，一定要加上{}，否则会报错</code></p><p>一定要像这种方式</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;username&quot;</span><span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token property">&quot;sex&quot;</span><span class="token operator">:</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;birthday&quot;</span><span class="token operator">:</span><span class="token string">&quot;2021年03月04日&quot;</span><span class="token punctuation">}</span>\n\n<span class="token comment">//错误方式</span>\n<span class="token property">&quot;username&quot;</span><span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token property">&quot;sex&quot;</span><span class="token operator">:</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;birthday&quot;</span><span class="token operator">:</span><span class="token string">&quot;2021年03月04日&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h1 id="出现的问题" tabindex="-1"><a class="header-anchor" href="#出现的问题" aria-hidden="true">#</a> 出现的问题</h1><p>如果导入json包，并且项目有导入Springjar，可能存在冲突问题，会ObjectMapper会出现空指针异常情况</p>',24),c={},l=(0,a(83744).Z)(c,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,o,e],64)}]])}}]);