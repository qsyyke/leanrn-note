"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7537],{93936:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-61ba9693",path:"/datastructure/%E9%93%BE%E8%A1%A8/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98.html",title:"约瑟夫问题",lang:"en-US",frontmatter:{date:"2021/10/17 16:32"},excerpt:"",headers:[{level:2,title:"问题描述",slug:"问题描述",children:[]},{level:2,title:"循环链表",slug:"循环链表",children:[{level:3,title:"代码实现",slug:"代码实现",children:[]}]},{level:2,title:"解决约瑟夫问题",slug:"解决约瑟夫问题",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},64924:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var p=a(66252);const t=(0,p._)("h1",{id:"约瑟夫问题",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#约瑟夫问题","aria-hidden":"true"},"#"),(0,p.Uk)(" 约瑟夫问题")],-1),e=(0,p._)("p",null,"约瑟夫问题，也叫做约瑟夫环问题，是一个循环链表的例子，也可以使用数组进行解决",-1),o=(0,p._)("h2",{id:"问题描述",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#问题描述","aria-hidden":"true"},"#"),(0,p.Uk)(" 问题描述")],-1),c=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211017163317215.png?x-oss-process=style/pictureProcess1",data:"aurora"}),(0,p.Uk)(" Josephu 问题为：设编号为1，2，… n的n个人围坐一圈，约定编号为k（1<=k<=n）的人从1开始报数，数到m 的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。")],-1),l=(0,p.uE)('<details class="custom-container details"><summary>理解</summary><img src="https://ooszy.cco.vin/img/blog-note/image-20211017164016910.png?x-oss-process=style/pictureProcess1" alt="image-20211017164016910" style="zoom:50%;"><p>这里有5个节点组成一个环状，加入一次数两个数，最开始从1开始(<code>假设，开始位置随便</code>)，那么数到2的时候，是节点2，那么现在节点2就会被删除，现在又从节点3开始(<code>因为节点2删除</code>)，这次数万，是到节点4(<code>删除</code>)，依次这样，直达搜此环最终只剩下一个节点，就结束了</p><p>上面环的出圈顺序为<code>2,4,1,5,3</code></p></details><p>提示：用一个不带头结点的循环链表来处理Josephu 问题：先构成一个有n个结点的单循环链表，然后由k结点起从1开始计数，计到m时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从1开始计数，直到最后一个结点从链表中删除算法结束。</p>',2),u=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211017163747023.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),i=(0,p.uE)('<h2 id="循环链表" tabindex="-1"><a class="header-anchor" href="#循环链表" aria-hidden="true">#</a> 循环链表</h2><blockquote><p>循环链表就是链表永远是一个环状，尽管只有一个节点，也是一个环状</p></blockquote><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>创建循环链表</p><ol><li>创建节点，此节点属性有id,next域</li><li>使用for循环依次创建多个节点</li><li>这些节点保证，最后一个节点的<code>next</code>域指向第一个节点，其余节点的<code>next</code>域指向下一个节点</li><li>这样就形成了一个环</li></ol></div><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h3><blockquote><p>设置节点</p><p>这里使用boy作为一个节点</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Boy</span> <span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/** 这是一个孩子节点 **/</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/** 这是孩子节点的写一个节点 **/</span>\n    <span class="token keyword">private</span> <span class="token class-name">Boy</span> next<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Boy</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span><span class="token class-name">Boy</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Boy{&quot;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;id=&quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span>\n                <span class="token string">&quot;, next=&quot;</span> <span class="token operator">+</span> next <span class="token operator">+</span>\n                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><blockquote><p>创建节点操作方法</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">CircleSingleLinkedList</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Boy</span> firstBoyNode<span class="token punctuation">;</span>\n\n\n    <span class="token doc-comment comment">/**\n     * @Author qsyyke\n     * @Date 2021/10/17\n     * <span class="token keyword">@description</span>\n     * <span class="token keyword">@param</span> <span class="token parameter">null</span> null\n     * @Return null\n     **/</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> childNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//使用循环的方式增加节点</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>childNum <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;子节点个数不能为0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token class-name">Boy</span> tempNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token comment">//节点个数不为0</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> childNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n            <span class="token class-name">Boy</span> boyNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                firstBoyNode <span class="token operator">=</span> boyNode<span class="token punctuation">;</span>\n                tempNode <span class="token operator">=</span> firstBoyNode<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n                tempNode<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>boyNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                boyNode<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>firstBoyNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                tempNode <span class="token operator">=</span> boyNode<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Boy</span> tempNode <span class="token operator">=</span> firstBoyNode<span class="token punctuation">;</span>\n\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>firstBoyNode <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tempNode<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;节点为空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token comment">//节点不为空</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;节点id为: &quot;</span> <span class="token operator">+</span> tempNode<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">//判断是否为最后一个</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> firstBoyNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            tempNode <span class="token operator">=</span> tempNode<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><blockquote><p>demo</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JosephusLinkedDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">CircleSingleLinkedList</span> circleSingleLinkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CircleSingleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        circleSingleLinkedList<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        circleSingleLinkedList<span class="token punctuation">.</span><span class="token function">showNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>运行结果</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>节点id为: 1\n节点id为: 2\n节点id为: 3\n节点id为: 4\n节点id为: 5\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="解决约瑟夫问题" tabindex="-1"><a class="header-anchor" href="#解决约瑟夫问题" aria-hidden="true">#</a> 解决约瑟夫问题</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">CircleSingleLinkedList</span> <span class="token punctuation">{</span>\n    \n    <span class="token comment">//,,,,,,,,,,,,,</span>\n    \n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countBoy</span><span class="token punctuation">(</span><span class="token keyword">int</span> startNum<span class="token punctuation">,</span> <span class="token keyword">int</span> countNum<span class="token punctuation">,</span> <span class="token keyword">int</span> totalNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token comment">//判断参数是否合法</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>startNum <span class="token operator">&gt;</span> totalNum <span class="token operator">||</span> firstBoyNode <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> countNum <span class="token operator">&gt;</span> totalNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;参数不合法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token class-name">Boy</span> helperNode <span class="token operator">=</span> firstBoyNode<span class="token punctuation">;</span>\n        <span class="token comment">//设置一个帮助指针，最初该帮助指针指向循环链表的最后一个位置，firstBoyNode指向循环链表头</span>\n        <span class="token comment">//开始计数之后，帮助指针和firstBoyNode都需要移动startNum -1个位置</span>\n\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>helperNode<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> firstBoyNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">//在循环链表的最后</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            helperNode <span class="token operator">=</span> helperNode<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">//帮助指针和firstBoyNode都移动startNum -1个位置</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> startNum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            firstBoyNode <span class="token operator">=</span> firstBoyNode<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            helperNode <span class="token operator">=</span> helperNode<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">//循环出圈</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>helperNode <span class="token operator">==</span> firstBoyNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">//同一个节点，链表中，只剩下一个节点</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> countNum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                firstBoyNode <span class="token operator">=</span> firstBoyNode<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                helperNode <span class="token operator">=</span> helperNode<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token comment">//firstBoyNode移动到需要出圈的节点了</span>\n\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;出圈节点ID = &quot;</span> <span class="token operator">+</span> firstBoyNode<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            firstBoyNode <span class="token operator">=</span> firstBoyNode<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            helperNode<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>firstBoyNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">//最后一个</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;最后一个节点 = &quot;</span> <span class="token operator">+</span> helperNode<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">思路</p><p>如果要解决这个问题，我们需要使用到两个辅助节点，firstBoyNode和helperNode，并且在之前的操作中，都是规定firstBoyNode不可变的，但是在这个问题中，可以更改其值，也可以不用更改，重新创建一个节点，对象值为firstBoyNode就行</p><ol><li>helperNode节点，最初的位置，需要在循环链表的最后一个节点上，firstBoyNode就是链表的第一个位置</li><li>因为每次的开始报数位置，都是可以改变的，所以需要使用for循环，将firstBoyNode和helperNode两个节点都移动<code>startNum -1</code>个位置，每一次循环，都需要重新设置他们的值</li><li>当firstBoyNode节点在startNum对应节点位置上时，就正式开始操作，使用for循环，使得firstBoyNode和helperNode都移动<code>countNum - 1</code>个位置，然后就是<code>firstBoyNode</code>节点删除</li></ol></div>',15),r={},k=(0,a(83744).Z)(r,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,o,c,l,u,i],64)}]])}}]);