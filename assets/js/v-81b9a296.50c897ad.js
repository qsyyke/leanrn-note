"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[781],{63419:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-81b9a296",path:"/mybatis/",title:"简单案例",lang:"en-US",frontmatter:{stick:!1,date:"2021/2/22"},excerpt:"",headers:[{level:2,title:"创建表",slug:"创建表",children:[]},{level:2,title:"实体类",slug:"实体类",children:[]},{level:2,title:"接口",slug:"接口",children:[]},{level:2,title:".mxl文件",slug:"mxl文件",children:[]},{level:2,title:"什么是类路径？",slug:"什么是类路径",children:[]},{level:2,title:"开启打印日志",slug:"开启打印日志",children:[]},{level:2,title:"其他问题",slug:"其他问题",children:[]},{level:2,title:"简单类型",slug:"简单类型",children:[]},{level:2,title:"方式一",slug:"方式一",children:[]},{level:2,title:"传入多个参数",slug:"传入多个参数",children:[]},{level:2,title:"定义自定义别名",slug:"定义自定义别名",children:[]},{level:2,title:"对象属性名和数据库列名不同解决",slug:"对象属性名和数据库列名不同解决",children:[{level:3,title:"方式一",slug:"方式一-1",children:[]},{level:3,title:"方式二",slug:"方式二-1",children:[]}]},{level:2,title:"简单判断",slug:"简单判断",children:[]},{level:2,title:"where动态sql",slug:"where动态sql",children:[]},{level:2,title:"foreach",slug:"foreach",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},36320:(n,s,a)=>{a.r(s),a.d(s,{default:()=>T});var p=a(66252);const t=(0,p.uE)('<h1 id="简单案例" tabindex="-1"><a class="header-anchor" href="#简单案例" aria-hidden="true">#</a> 简单案例</h1><ol><li>在数据库中创建表</li><li>创建实体类，但是这个类的属性最好和表中的字段相对应，因为每一条记录代表着一个实体对象</li><li>创建接口dao</li><li>在当前dao所在的包中，创建一个与dao接口名相同的<code>.xml</code>文件，在该xml文件中使用sql映射，以后执行数据库操作的语句，都是在这个<code>.xml</code>文件中进行写，这个文件的约束在mybatis的官网中可以找到</li></ol><h2 id="创建表" tabindex="-1"><a class="header-anchor" href="#创建表" aria-hidden="true">#</a> 创建表</h2>',3),e=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210412204442569.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),o=(0,p.uE)('<h2 id="实体类" tabindex="-1"><a class="header-anchor" href="#实体类" aria-hidden="true">#</a> 实体类</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>vipblogs<span class="token punctuation">.</span>domain</span><span class="token punctuation">;</span>\n\n\n<span class="token doc-comment comment">/**\n * <span class="token keyword">@author</span> 青衫烟雨客 程钦义\n * <span class="token keyword">@date</span> 2021/04/12 20:18\n **/</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Integer</span> getId <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> setId <span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> getName <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> setName <span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> getEmail <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> email<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> setEmail <span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Integer</span> getAge <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> setAge <span class="token punctuation">(</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> toString <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Student{&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;id=&quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot;, name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span> <span class="token string">&quot;, email=&#39;&quot;</span> <span class="token operator">+</span> email <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span> <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>vipblogs<span class="token punctuation">.</span>dao</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>vipblogs<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Student</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentDao</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">//返回一个student对象</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="mxl文件" tabindex="-1"><a class="header-anchor" href="#mxl文件" aria-hidden="true">#</a> .mxl文件</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace=&quot;cn.vipblogs.dao.StudentDao&quot;&gt;\n    &lt;select id=&quot;selectAll&quot; resultType=&quot;cn.vipblogs.domain.Student&quot;&gt;\n        select * from student\n    &lt;/select&gt;\n\n&lt;/mapper&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这个文件是sql的映射文件，也就是说，对于操作数据库中的记录的语句，都是在这个文件中进行编写的，mybatis能够识别出里面的语句</p><p>但是需要准守其约束文件，不然mybatis不会认识</p><p><code>&lt;mapper namespace=&quot;cn.vipblogs.dao.StudentDao&quot;&gt;</code>是根目录，<code>namespace</code>这里面需要写dao接口类的全限定名称，就是类的名称，需要包含包，也就是上面定义的接口<code>public interface StudentDao </code>的全限定名称</p><p><code>&lt;select id=&quot;selectAll&quot; resultType=&quot;cn.vipblogs.domain.Student&quot;&gt;&lt;/select&gt;</code></p><p>在跟中，可以定义操作数据库的语句，包括<code>&lt;select&gt;&lt;/select&gt;,&lt;insert&gt;&lt;/insert&gt;,&lt;update&gt;&lt;/update&gt;,&lt;delete&gt;&lt;/delete&gt;</code>等等</p><p>其中，<code>id=&quot;selectAll&quot;</code>这个id就像是id选择器一样，需要唯一，能够通过这个id找到这个sql语句，</p><p>这个id的值可以是任意的，但是为了规范和方便操作，强力规定使用<code>dao</code>接口中的对应的方法名(<code>操作数据库的sql语句</code>)，<code>resultType</code>的值规定执行这个sql语句，对返回的结果集的数据做什么处理，可以是将其转换成<code>List</code>，也可以是<code>Student</code>对象</p><h1 id="配置mysql连接信息" tabindex="-1"><a class="header-anchor" href="#配置mysql连接信息" aria-hidden="true">#</a> 配置mysql连接信息</h1><p>如果没有使用mybatis的话，那么我们会使用代码进行mysql的连接处理，包括用户名，密码等等</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE configuration\n        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;\n&lt;!--这个根标签--&gt;\n&lt;configuration&gt;\n&lt;!--  使用哪个数据库配置信息，可以进行其额度三\n 通过设置default的值，这个值对应&lt;environment id=&quot;development&quot;&gt;中的id值，也是需要唯一，\n 如果&lt;environment id=&quot;development&quot;&gt;有多个标签的话，那么我们在使用云数据库的时候，\n 就可以使用云数据库的&lt;environment id=&quot;development&quot;&gt;的id进行切断\n\n --&gt;\n    &lt;environments default=&quot;dev&quot;&gt;\n\n&lt;!--    配置连接数据库的信息  id是唯一的  --&gt;\n        &lt;environment id=&quot;dev&quot;&gt;\n            &lt;!--mysql的事务类型，type只有两个值，如果是JDBC，则表示使用mysql自带的commit事务，回滚事务--&gt;\n            &lt;transactionManager type=&quot;JDBC&quot;/&gt;\n\n            &lt;!--这里就是配置数据库连接信息--&gt;\n            &lt;dataSource type=&quot;POOLED&quot;&gt;\n                &lt;!--type：表示数据源的类型， POOLED表示使用连接池--&gt;\n                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;\n                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis&quot;/&gt;\n                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;\n                &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;\n            &lt;/dataSource&gt;\n        &lt;/environment&gt;\n\n        &lt;!--云数据库的配置--&gt;\n        &lt;environment id=&quot;online&quot;&gt;\n            &lt;transactionManager type=&quot;JDBC&quot;/&gt;\n            &lt;dataSource type=&quot;POOLED&quot;&gt;\n                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;\n                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis&quot;/&gt;\n                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;\n                &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;\n            &lt;/dataSource&gt;\n        &lt;/environment&gt;\n\n    &lt;/environments&gt;\n\n    &lt;!--这里是配置sql映射文件，mappers是根标签--&gt;\n    &lt;mappers&gt;\n        &lt;!--每一个sql映射文件对应一个mapper，可以有多个--&gt;\n        &lt;!--resource表示sql映射文件的类路径，也就是从target，classes后面的该文件的路径--&gt;\n        &lt;mapper resource=&quot;cn/vipblogs/dao/StudentDao.xml&quot;/&gt;\n    &lt;/mappers&gt;\n&lt;/configuration&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><h2 id="什么是类路径" tabindex="-1"><a class="header-anchor" href="#什么是类路径" aria-hidden="true">#</a> 什么是类路径？</h2><p>类路径就是在使用maven进行编译之后，在<code>target/classes...</code>后面的文件的路径，就是类路径，</p><p>就比如说，<code>cn/vipblogs/dao/StudentDao.xml</code></p><p>但是默认情况下，如果一个<code>.xml</code>文件，不是在resources文件夹中，在使用maven进行编译的时候，是不会将这个文件编译保留的，需要使用插件</p><p>在<code>pom.xml</code>文件中插入下面标签，需要在<code>&lt;build&gt;&lt;/build&gt;</code>标签下</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--所在的目录--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这样之后，尽管一个其他类型的文件，不在resources文件夹下，也会被保留</p><h1 id="执行sql" tabindex="-1"><a class="header-anchor" href="#执行sql" aria-hidden="true">#</a> 执行sql</h1><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//连接数据库信息 从classes文件开始，也就是配置文件的所在目录</span>\n<span class="token comment">//String config = &quot;cn/vipblogs/dao/main/mybatis.xml&quot;;</span>\n<span class="token class-name">String</span> config <span class="token operator">=</span> <span class="token string">&quot;mybatis.xml&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">//读取配置文件</span>\n<span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//创建SqlSessionFactoryBuilder</span>\n<span class="token class-name">SqlSessionFactoryBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//创建SqlSessionFactory对象</span>\n<span class="token class-name">SqlSessionFactory</span> factory <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//创建SqlSession</span>\n<span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//指定要执行sql语句的标识，通过全限定类名.id 进行选择执行哪句sql</span>\n<span class="token class-name">String</span> sqlId <span class="token operator">=</span> <span class="token string">&quot;cn.vipblogs.dao.StudentDao&quot;</span><span class="token operator">+</span><span class="token string">&quot;.&quot;</span><span class="token operator">+</span><span class="token string">&quot;selectAll&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">//执行sql</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>sqlId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//也可以 使用下面方式进行数据的处理</span>\n list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>student <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p><code>String config = &quot;cn/vipblogs/dao/main/mybatis.xml&quot;;</code>需要写从<code>classes</code>目录开始的路径</p><p>指定执行的sql语句的时候，通过全限定类名加上<code>.</code>加上<code>&lt;select id=&#39;&#39;&gt;&lt;/select&gt;</code>假设查询操作的id，这样，mybatis就可以知道我们需要执行的是哪一个sql语句</p><p><code>String sqlId = &quot;cn.vipblogs.dao.StudentDao&quot;+&quot;.&quot;+&quot;selectAll&quot;;</code></p>',28),c=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210412220018784.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),l=(0,p.uE)('<h1 id="执行插入语句" tabindex="-1"><a class="header-anchor" href="#执行插入语句" aria-hidden="true">#</a> 执行插入语句</h1><ol><li>在dao中定义一个方法，执行插入操作</li><li>在<code>.xml</code>文件中写insert语句<code>&lt;insert id=&quot;&quot;&gt;&lt;/insert&gt;</code></li><li>创建一个对象</li><li>执行语句</li><li>提交事务</li></ol><p><code>int insertStudent(Student student);</code></p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertStudent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    insert into student value(#{id},#{name},#{email},#{age})\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这里的value不能写成一个固定的值，应该使用<code>#{字段}</code>来动态的获取，但是中括号里面的字段的名字应该是student对象中的字段</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> config <span class="token operator">=</span> <span class="token string">&quot;mybatis.xml&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SqlSessionFactoryBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SqlSessionFactory</span> factory <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> sqlId <span class="token operator">=</span> <span class="token string">&quot;cn.vipblogs.dao.StudentDao&quot;</span><span class="token operator">+</span><span class="token string">&quot;.&quot;</span><span class="token operator">+</span><span class="token string">&quot;insertStudent&quot;</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&quot;李五&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2291@qq.com&quot;</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>sqlId<span class="token punctuation">,</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nsqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>打印执行插入数据的过程</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Logging</span> initialized using &#39;<span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span></span>StdOutImpl</span>&#39; <span class="token class-name"><span class="token namespace">adapter<span class="token punctuation">.</span></span>\nPooledDataSource</span> forcefully closed<span class="token operator">/</span>removed all <span class="token class-name"><span class="token namespace">connections<span class="token punctuation">.</span></span>\nPooledDataSource</span> forcefully closed<span class="token operator">/</span>removed all <span class="token class-name"><span class="token namespace">connections<span class="token punctuation">.</span></span>\nPooledDataSource</span> forcefully closed<span class="token operator">/</span>removed all <span class="token class-name"><span class="token namespace">connections<span class="token punctuation">.</span></span>\nPooledDataSource</span> forcefully closed<span class="token operator">/</span>removed all <span class="token class-name"><span class="token namespace">connections<span class="token punctuation">.</span></span>\nOpening</span> JDBC <span class="token class-name">Connection</span>\n\n<span class="token class-name">Created</span> connection <span class="token number">1621002296.</span>\n<span class="token class-name">Setting</span> autocommit <span class="token keyword">to</span> <span class="token namespace">false</span> on JDBC <span class="token class-name">Connection</span> <span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>JDBC4Connection</span><span class="token annotation punctuation">@609e8838</span><span class="token punctuation">]</span>\n<span class="token operator">==</span><span class="token operator">&gt;</span>  <span class="token class-name">Preparing</span><span class="token operator">:</span> insert into student <span class="token function">value</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">)</span> \n<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token function">6</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 李五<span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">21</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>    <span class="token class-name">Updates</span><span class="token operator">:</span> <span class="token number">1</span>\n<span class="token class-name">Committing</span> JDBC <span class="token class-name">Connection</span> <span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>JDBC4Connection</span><span class="token annotation punctuation">@609e8838</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>因为mybatis使用的是连接池，所以首先会先拿到一个连接进行操作</p><p>但是<code>Setting autocommit to false on JDBC Connection </code>会将事务设置自动提交为<code>false</code>，所以我们如果执行插入，或者是更新操作的时候，需要提交事务，否则数据不会被插入</p><p>执行完毕之后，应该关闭连接，因为如果不<code>close()</code>的话，其不会自动关闭</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>调用关闭方法之后的执行过程</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Created</span> connection <span class="token number">1621002296.</span>\n<span class="token class-name">Setting</span> autocommit <span class="token keyword">to</span> <span class="token namespace">false</span> on JDBC <span class="token class-name">Connection</span> <span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>JDBC4Connection</span><span class="token annotation punctuation">@609e8838</span><span class="token punctuation">]</span>\n<span class="token operator">==</span><span class="token operator">&gt;</span>  <span class="token class-name">Preparing</span><span class="token operator">:</span> insert into student <span class="token function">value</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">)</span> \n<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token function">7</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">liubei</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">21</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>    <span class="token class-name">Updates</span><span class="token operator">:</span> <span class="token number">1</span>\n<span class="token class-name">Committing</span> JDBC <span class="token class-name">Connection</span> <span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>JDBC4Connection</span><span class="token annotation punctuation">@609e8838</span><span class="token punctuation">]</span>\n<span class="token class-name">Resetting</span> autocommit <span class="token keyword">to</span> <span class="token namespace">true</span> on JDBC <span class="token class-name">Connection</span> <span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>JDBC4Connection</span><span class="token annotation punctuation">@609e8838</span><span class="token punctuation">]</span>\n<span class="token class-name">Closing</span> JDBC <span class="token class-name">Connection</span> <span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>JDBC4Connection</span><span class="token annotation punctuation">@609e8838</span><span class="token punctuation">]</span>\n<span class="token class-name">Returned</span> connection <span class="token number">1621002296</span> <span class="token keyword">to</span> <span class="token namespace">pool<span class="token punctuation">.</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@609e8838]</code>可以看到，其关闭了这个连接</p><h2 id="开启打印日志" tabindex="-1"><a class="header-anchor" href="#开启打印日志" aria-hidden="true">#</a> 开启打印日志</h2><p>默认情况下，我们的执行过程，mybatis不会打印，在控制台上，我们需要在配置文件中开启</p><p>在配置文件中，插入下面标签就可以开启日志输出</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;configuration&gt;\n    &lt;settings&gt;\n        &lt;!--设置mybatis输出日志--&gt;\n        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt;\n    &lt;/settings&gt;\n    &lt;environments default=&quot;dev&quot;&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;settings&gt;\n    &lt;!--设置mybatis输出日志--&gt;\n    &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt;\n&lt;/settings&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="其他问题" tabindex="-1"><a class="header-anchor" href="#其他问题" aria-hidden="true">#</a> 其他问题</h2>',21),u=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210413164249169.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),i=(0,p.uE)('<p>如果执行插入的时候，输入的字段只有三个，那么就会报错，就像下面这种情况</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertStudent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    insert into student values(#{name},#{email},#{age})\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>student表中，一共有4个字段，但是这里只写三个字段，那么就会报错，所以在执行插入的时候，必须将表所有的字段都写出，尽管id为自增</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertStudent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    insert into student values(#{id},#{name},#{email},#{age},#{w})\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>报错信息</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span>PersistenceException</span><span class="token operator">:</span> \n### <span class="token class-name">Error</span> updating <span class="token class-name"><span class="token namespace">database<span class="token punctuation">.</span></span>  Cause</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>SQLException</span><span class="token operator">:</span> <span class="token class-name">Column</span> count doesn&#39;t match value count at row <span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>同时，如果表中的字段只要4个，但是在<code>xml</code>文件中，插入5个字段，也是不可以成功的</p><p>如果插入的字段中，在这个表的实体类中，没有对应的<code>get</code>方法，同样也会报错，所以在写实体类的时候，一定要写上<code>get</code>方法</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>w字段没有设置get方法\n&lt;insert id=&quot;insertStudent&quot;&gt;\n    insert into student values(#{id},#{name},#{email},#{age},#{w})\n&lt;/insert&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span>PersistenceException</span><span class="token operator">:</span> \n### <span class="token class-name">Error</span> updating <span class="token class-name"><span class="token namespace">database<span class="token punctuation">.</span></span>  Cause</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span></span>ReflectionException</span><span class="token operator">:</span> <span class="token class-name">There</span> is no getter <span class="token keyword">for</span> property named <span class="token char">&#39;w&#39;</span> in &#39;<span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>vipblogs<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span>Student</span>&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h1 id="主要类说明" tabindex="-1"><a class="header-anchor" href="#主要类说明" aria-hidden="true">#</a> 主要类说明</h1><ol><li>Resources： mybatis中的一个类， 负责读取主配置文件</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>SqlSessionFactoryBuilder : 创建SqlSessionFactory对象，</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">SqlSessionFactoryBuilder</span> builder  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//创建SqlSessionFactory对象</span>\n<span class="token class-name">SqlSessionFactory</span> factory <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="3"><li>SqlSessionFactory ： 重量级对象， 程序创建一个对象耗时比较长，使用资源比较多。 在整个项目中，有一个就够用了。</li></ol><p>SqlSessionFactory:接口 ， 接口实现类： DefaultSqlSessionFactory SqlSessionFactory作用： 获取SqlSession对象。</p><p><code>SqlSession sqlSession = factory.openSession();</code></p><p>openSession()方法说明：</p><ul><li><p><code>openSession() </code>：无参数的， 获取是非自动提交事务的SqlSession对象</p></li><li><p><code>openSession(boolean)</code>: openSession(true) 获取自动提交事务的SqlSession. openSession(false) 非自动提交事务的SqlSession对象</p></li></ul><ol start="4"><li>SqlSession: SqlSession接口 ：定义了操作数据的方法 例如 selectOne() ,selectList() ,insert(),update(), delete(), commit(), rollback() SqlSession接口的实现类DefaultSqlSession。</li></ol><p><code>使用要求： SqlSession对象不是线程安全的，需要在方法内部使用， 在执行sql语句之前，使用openSession()获取SqlSession对象。 在执行完sql语句后，需要关闭它，执行SqlSession.close(). 这样能保证他的使用是线程安全的。</code></p><p>因为其是线程不安全的，所以我们在使用它的时候，必须要在方法体中进行，因为方法体中的变量是不能被共享的</p><p><code>SqlSessionFactory</code>这个对象是一个可以被共享的变量对象，所以我们不用每次使用的时候，都进行创建，可以使用一个工具类，使用静态方法进行加载</p><p>如果使用<code>factory.openSession(true)</code>对象的时候，我们执行插入操作的时候，就没有必要在使用<code>commit()</code>方法</p><h1 id="mybatis的动态代理" tabindex="-1"><a class="header-anchor" href="#mybatis的动态代理" aria-hidden="true">#</a> mybatis的动态代理</h1><p>对于正常情况下，我们定义了一个接口dao，那么如果我们需要使用的话，就必须定义一个类，实现这个接口，然后在这个实现类的方法中，使用mybatis的方式进行数据的操作，代码也就是下面这个</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StudentDao</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> selectAll <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> sqlId <span class="token operator">=</span> <span class="token string">&quot;cn.vipblogs.dao.StudentDao.selectAll&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>sqlId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> list<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> insertStudent <span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>但是这种方式的话，代码量其实并没有减少多少</p><p>我们在使用mybatis方式进行操作的时候，命名空间就是这个dao接口的全限定名称，而且<code>&lt;select id=&quot;selectAll&quot; resultType=&quot;cn.vipblogs.domain.Student&quot;&gt;</code>查询，插入等等定义的id值，我们也可以通过dao的<code>class</code>进行获取，这个id就是方法名，<code>resultType</code>就是方法的返回值类型，也可以这样理解，因为对于插入操作而言，返回值为int类型，update的返回值也是int类型，但是对于查询操作，如果我们在dao的实现类中进行定义，那么如果返回的是<code>List</code>，我们通过执行这个方法，就可以知道其返回值类型，同样mybatis也可以通过dao方法中的返回值的类型，可以看到用户想要执行的操作是查询还是更新操作，根据返回值的类型</p><p>但是这些东西，mybatis已经帮助我们做了，这个就叫做mybatis的动态代理</p><p>使用动态代理过程</p><ol><li>获取SqlSession对象</li><li>定义一个dao对象，这个对象的引用可以通过SqlSession.getMapper()方法获取</li><li>调用dao中的方法进行执行</li><li>处理结果集</li></ol><p>那么现在，我们就可以减少很多的代码，直接连dao的实现类，都可以不用了，而且对于这种方式，如果我们在之后的项目中，如果已经定义了接口，那么我们还需要继续添加其他方法的话，我们就可以直接在接口中进行添加，可以不用再去其实现类中进行重写方法，特别方便</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">StudentDao</span> dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>运行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Student</span><span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;初尘&#39;</span><span class="token punctuation">,</span> email<span class="token operator">=</span>&#39;<span class="token number">2291308094</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">}</span>\n<span class="token class-name">Student</span><span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;qsyyke&#39;</span><span class="token punctuation">,</span> email<span class="token operator">=</span>&#39;<span class="token number">2347634</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">}</span>\n<span class="token class-name">Student</span><span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;张飞&#39;</span><span class="token punctuation">,</span> email<span class="token operator">=</span>&#39;<span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">}</span>\n<span class="token class-name">Student</span><span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;李四&#39;</span><span class="token punctuation">,</span> email<span class="token operator">=</span>&#39;<span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">}</span>\n<span class="token class-name">Student</span><span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;李五&#39;</span><span class="token punctuation">,</span> email<span class="token operator">=</span>&#39;<span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">}</span>\n<span class="token class-name">Student</span><span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;liubei&#39;</span><span class="token punctuation">,</span> email<span class="token operator">=</span>&#39;<span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">}</span>\n<span class="token class-name">Student</span><span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;诸葛亮&#39;</span><span class="token punctuation">,</span> email<span class="token operator">=</span>&#39;<span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">}</span>\n<span class="token class-name">Student</span><span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;猪八戒&#39;</span><span class="token punctuation">,</span> email<span class="token operator">=</span>&#39;<span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">}</span>\n<span class="token class-name">Student</span><span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;猪八戒23&#39;</span><span class="token punctuation">,</span> email<span class="token operator">=</span>&#39;<span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>同样对于执行操作，也是一样的</p><p>返回一个map List集合</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">StudentDao</span> dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectAllMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>执行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>初尘\nqsyyke\n张飞\n李四\n李五\nliubei\n诸葛亮\n猪八戒\n猪八戒<span class="token number">23</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h1 id="执行查询语句" tabindex="-1"><a class="header-anchor" href="#执行查询语句" aria-hidden="true">#</a> 执行查询语句</h1><p>如果想要使用where进行查询的话，那么就可以使用下面的方式进行</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;selectById&quot;</span>  resultType<span class="token operator">=</span><span class="token string">&quot;cn.vipblogs.domain.Student&quot;</span><span class="token operator">&gt;</span>\n    select <span class="token operator">*</span> from student where  id <span class="token operator">=</span> #<span class="token punctuation">{</span>id<span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>\n    \n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">StudentDao</span> dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>执行过程</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token operator">==</span><span class="token operator">&gt;</span>  <span class="token class-name">Preparing</span><span class="token operator">:</span> select <span class="token operator">*</span> from student where id <span class="token operator">=</span> <span class="token operator">?</span> \n<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token function">4</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>    <span class="token class-name">Columns</span><span class="token operator">:</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> age\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> 张飞<span class="token punctuation">,</span> <span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> <span class="token number">21</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>      <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">1</span>\n<span class="token class-name">Student</span><span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;张飞&#39;</span><span class="token punctuation">,</span> email<span class="token operator">=</span>&#39;<span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在使用条件查询，需要加上参数的时候，我们可以在xml的语句上，指明参数的类型</p><p><code>&lt;select id=&quot;selectById&quot; parameterType=&quot;java.lang.Integer&quot; resultType=&quot;cn.vipblogs.domain.Student&quot;&gt;</code></p><p>请注意了，这个<code>parameterType</code>可以写成简短的形式，就像<code>int</code>，但是这里的参数类型，并不是java中的参数类型，这里的是mybatis自己内定的</p><p>我们推荐使用全限定名称进行，这样方便看，但是也可以不用写上参数类型，因为mybatis通过使用映射，<code>getMapper()</code>就可以知道参数的类型</p><p>mybatis中支持的简短的别名，<code>这个不是java中的别名，比如int，两者是不同的概念</code></p>',52),r=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210413232928168.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),k=(0,p.uE)('<h1 id="mybatis参数问题" tabindex="-1"><a class="header-anchor" href="#mybatis参数问题" aria-hidden="true">#</a> mybatis参数问题</h1><h2 id="简单类型" tabindex="-1"><a class="header-anchor" href="#简单类型" aria-hidden="true">#</a> 简单类型</h2><ul><li>mybatis把java的基本数据类型和String都叫简单类型。</li></ul><h2 id="方式一" tabindex="-1"><a class="header-anchor" href="#方式一" aria-hidden="true">#</a> 方式一</h2><p>在<code>mapper</code>文件中，在sql语句中使用<code>#{字段名}</code>，在调用这个方法的时候，传入一个参数就可以，那么在调用方法时传入的那个参数将被传入到<code>#{字段名中}</code></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//dao方法</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mapper\n&lt;select id=&quot;selectById&quot;  parameterType=&quot;java.lang.Integer&quot; resultType=&quot;cn.vipblogs.domain.Student&quot;&gt;\n    select * from student where  id = #{idd}\n&lt;/select&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>调用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">StudentDao</span> dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>可以从调用实例中看到，</p>',10),m=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210414085243928.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),d=(0,p.uE)('<p>方法实参最终会被传入到<code>#{idd}</code>中，<code>如果在dao方法中的形式参数并不是一个对象，是一个基本的数据类型，那么在这里select * from student where id = #{idd}</code>的<code>#{字段名}</code>字段名可以写任意字符，都可以，在执行的时候，都会被方法的实际参数给替换</p><p><code>但是如果dao方法的形式参数是一个对象的话，那么就必须保证#{字段名}中的字段名在方法形式参数的对象中拥有get方法，否则会报错</code></p><p>比如下面例子</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//dao传入对象</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectById<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.lang.Integer<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * from student where  id = #{idd}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//调用测试</span>\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">StudentDao</span> dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student1 <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>这个对象的id有get方法，但是在mapper文件中，使用的是<code>#{idd}</code>，如果执行的话，会收到下面报错信息</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span>PersistenceException</span><span class="token operator">:</span> \n### <span class="token class-name">Error</span> querying <span class="token class-name"><span class="token namespace">database<span class="token punctuation">.</span></span>  Cause</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span></span>ReflectionException</span><span class="token operator">:</span> <span class="token class-name">There</span> is no getter <span class="token keyword">for</span> property named <span class="token char">&#39;idd&#39;</span> in &#39;<span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>vipblogs<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span>Student</span>&#39;\n### <span class="token class-name">Cause</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span></span>ReflectionException</span><span class="token operator">:</span> <span class="token class-name">There</span> is no getter <span class="token keyword">for</span> property named <span class="token char">&#39;idd&#39;</span> in &#39;<span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>vipblogs<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span>Student</span>&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>here is no getter for property named &#39;idd&#39; in &#39;class cn.vipblogs.domain.Student&#39;</code>没有getIdd()方法，所以就会出错，所以<code>如果形势参数是一个对象的话，就必须保证此对象中有#{字段名} get字段名()这个方法，但是不一定对象中有 &quot;字段名&quot;这个属性，只要有get字段名()方法就行</code></p><p>但是如果方法的形式参数中有多个值，而且在mapper文件中，也是使用多个<code>#{字段名}</code>，那么这种情况下，将会操作，字段名不能找到</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectById<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.lang.Integer<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * from student where  id = #{id} or name=#{name}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">StudentDao</span> dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;张飞&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>尽管mapper中的<code>#{字段名}</code>已经和方法中的形式参数名相同，但是也不能进行匹配，所以如果想使用多个参数的情况下，不能使用这种方式进行</p><p>报错信息</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span>PersistenceException</span><span class="token operator">:</span> \n### <span class="token class-name">Error</span> querying <span class="token class-name"><span class="token namespace">database<span class="token punctuation">.</span></span>  Cause</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>binding<span class="token punctuation">.</span></span>BindingException</span><span class="token operator">:</span> <span class="token class-name">Parameter</span> <span class="token char">&#39;id&#39;</span> not <span class="token class-name"><span class="token namespace">found<span class="token punctuation">.</span></span> Available</span> parameters are <span class="token punctuation">[</span>arg1<span class="token punctuation">,</span> arg0<span class="token punctuation">,</span> param1<span class="token punctuation">,</span> param2<span class="token punctuation">]</span>\n### <span class="token class-name">Cause</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>binding<span class="token punctuation">.</span></span>BindingException</span><span class="token operator">:</span> <span class="token class-name">Parameter</span> <span class="token char">&#39;id&#39;</span> not <span class="token class-name"><span class="token namespace">found<span class="token punctuation">.</span></span> Available</span> parameters are <span class="token punctuation">[</span>arg1<span class="token punctuation">,</span> arg0<span class="token punctuation">,</span> param1<span class="token punctuation">,</span> param2<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="传入多个参数" tabindex="-1"><a class="header-anchor" href="#传入多个参数" aria-hidden="true">#</a> 传入多个参数</h2><p>如果mapper中想要传入多个参数的话，就可以使用注解的方式</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectMulitParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;myname&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;myage&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>但是如果使用这种方式的话，在mapper文件中，<code>#{字段名}</code>就必须和注解里面的<code>@Param(&quot;名称&quot;)</code>相同</p><p>如果mapper文件中使用的<code>#{字段名}</code>字段名和注解中的不一样的话，就会出现报错情况</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectMultiId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;myid&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectMultiId<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\nselect * from student where id = #{myidd}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>报错</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>### <span class="token class-name">Error</span> querying <span class="token class-name"><span class="token namespace">database<span class="token punctuation">.</span></span>  Cause</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>binding<span class="token punctuation">.</span></span>BindingException</span><span class="token operator">:</span> <span class="token class-name">Parameter</span> <span class="token char">&#39;myidd&#39;</span> not <span class="token class-name"><span class="token namespace">found<span class="token punctuation">.</span></span> Available</span> parameters are <span class="token punctuation">[</span>myid<span class="token punctuation">,</span> param1<span class="token punctuation">]</span>\n### <span class="token class-name">Cause</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>binding<span class="token punctuation">.</span></span>BindingException</span><span class="token operator">:</span> <span class="token class-name">Parameter</span> <span class="token char">&#39;myidd&#39;</span> not <span class="token class-name"><span class="token namespace">found<span class="token punctuation">.</span></span> Available</span> parameters are <span class="token punctuation">[</span>myid<span class="token punctuation">,</span> param1<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>例子测试</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectMulti</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;myId&quot;</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;myName&quot;</span><span class="token punctuation">)</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectMulti<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * from student where  id =#{myId} and name = #{myName}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//test</span>\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">StudentDao</span> dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectMulti</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;张飞&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>运行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Created</span> connection <span class="token number">116734858.</span>\n<span class="token class-name">Setting</span> autocommit <span class="token keyword">to</span> <span class="token namespace">false</span> on JDBC <span class="token class-name">Connection</span> <span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>JDBC4Connection</span><span class="token annotation punctuation">@6f53b8a</span><span class="token punctuation">]</span>\n<span class="token operator">==</span><span class="token operator">&gt;</span>  <span class="token class-name">Preparing</span><span class="token operator">:</span> select <span class="token operator">*</span> from student where id <span class="token operator">=</span><span class="token operator">?</span> and name <span class="token operator">=</span> <span class="token operator">?</span> \n<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token function">4</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 张飞<span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>    <span class="token class-name">Columns</span><span class="token operator">:</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> age\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> 张飞<span class="token punctuation">,</span> <span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> <span class="token number">21</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>      <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">1</span>\n<span class="token class-name">Student</span><span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;张飞&#39;</span><span class="token punctuation">,</span> email<span class="token operator">=</span>&#39;<span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="方式二" tabindex="-1"><a class="header-anchor" href="#方式二" aria-hidden="true">#</a> 方式二</h4><p>多个参数-简单类型的，按位置传值， * mybatis.3.4之前，使用 #{0} ，#{1} * mybatis。3.4之后 ，使用 #{arg0} ,#{arg1}</p><p>例子：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectMultiParam</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> id<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectMultiParam<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * from student where id = #{arg1} or name=#{arg0}  or age=#{arg2}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//test</span>\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test10</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">StudentDao</span> dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectMultiParam</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>使用这种方式比较麻烦，如果更改了参数的位置，那么就需要对mapper文件进行更改</p><p>不推荐使用这种方式进行书写</p><h4 id="通过使用map对象进行传值" tabindex="-1"><a class="header-anchor" href="#通过使用map对象进行传值" aria-hidden="true">#</a> 通过使用map对象进行传值</h4><p>这种方式通过传入一个map对象，并且在mapper文件中，<code>#{map的key值}</code></p><p>但是这种方式不推荐使用，阿里巴巴，如果更改了key值，就需要对mapper文件进行更改</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectMultiByMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectMultiByMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * from student where id = #{mId} or name=#{mName}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test11</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">StudentDao</span> dao <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;mId&quot;</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;mName&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectMultiByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',45),b=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210414185648576.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),g=(0,p.uE)('<h1 id="和-的区别" tabindex="-1"><a class="header-anchor" href="#和-的区别" aria-hidden="true">#</a> #和$的区别</h1><p><code>#</code>的作用是占位符的作用，也就是相当于</p><ol><li><code>#</code>使用 ？在sql语句中做占位的， 使用PreparedStatement执行sql，效率高</li><li><code>#</code>能够避免sql注入，更安全。</li><li><code>$</code>不使用占位符，是字符串连接方式，使用Statement对象执行sql，效率低</li><li><code>$</code>有sql注入的风险，缺乏安全性。</li><li><code>$</code>:可以替换表名或者列名</li></ol><p><code>$</code>就相当于是字符串的连接</p><p>有一个方法，这个方法的参数就是name，那么最后就是</p><p><code>select * from student where name=name</code></p><p><code>select * from student where name=&#39;name&#39;</code></p><p>使用<code>$</code>的话，会存在sql注入的风险</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> selectMultiBy$<span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectMultiBy$<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * from student where name=${name}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//test</span>\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test12</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">StudentDao</span> dao <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> dao<span class="token punctuation">.</span>selectMultiBy$<span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>运行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Setting</span> autocommit <span class="token keyword">to</span> <span class="token namespace">false</span> on JDBC <span class="token class-name">Connection</span> <span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>JDBC4Connection</span><span class="token annotation punctuation">@58e1d9d</span><span class="token punctuation">]</span>\n<span class="token operator">==</span><span class="token operator">&gt;</span>  <span class="token class-name">Preparing</span><span class="token operator">:</span> select <span class="token operator">*</span> from student where name<span class="token operator">=</span>李四 \n<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> \n\n<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span>PersistenceException</span><span class="token operator">:</span> \n### <span class="token class-name">Error</span> querying <span class="token class-name"><span class="token namespace">database<span class="token punctuation">.</span></span>  Cause</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>jdbc4<span class="token punctuation">.</span></span>MySQLSyntaxErrorException</span><span class="token operator">:</span> <span class="token class-name">Unknown</span> column <span class="token char">&#39;李四&#39;</span> in &#39;where clause&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>报错，因为<code>$</code>是一个字符串的连接，而且在mysql中，name字段是一个<code>varchar</code>类型，所以sql语句就出错，因为没有引号</p><p><code>select * from student where name=李四 </code></p><p>需要这样传入参数</p><p><code>List&lt;Student&gt; list = dao.selectMultiBy$(&quot;&#39;李四&#39;&quot;);</code></p><p>最后运行的sql语句</p><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>select * from student where name=&#39;李四&#39; \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h1 id="resultype" tabindex="-1"><a class="header-anchor" href="#resultype" aria-hidden="true">#</a> resulType</h1><p>这个是mybatis执行sql之后，指定返回的对象类型，这个返回的类型应该和dao方法中的对应方法返回值一致，这个和<code>resultMap</code>只能存在一个</p><h2 id="定义自定义别名" tabindex="-1"><a class="header-anchor" href="#定义自定义别名" aria-hidden="true">#</a> 定义自定义别名</h2><p>在有的时候，使用全限定名称会变得特别的麻烦，这个时候，我们就可以使用全限定名称就行<code>resultType</code>的书写</p><p>自定义<code>resulyType</code>需要在配置文件中进行书写</p><ul><li>方式一</li></ul><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.bjpowernode.domain.Student<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stu<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.bjpowernode.vo.ViewStudent<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vstu<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>type:自定义类型的全限定名称</li><li>alias:别名（短小，容易记忆的）</li></ul><p>这个时候，我们就可以在mapper文件中使用自定义的别名</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectMultiByMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stu<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * from student where id = #{mId} or name=#{mName}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>如果需要为多个类使用自定义的别名，那么就需要写多个&lt;typeAlias&gt;标签</code>，这种方式有点麻烦</p><ul><li>方式二</li></ul><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>同样也是在<code>&lt;typeAliases&gt;</code>标签下，<code>package</code>写包名，使用这种方式的话，就为package包中的所有的类定义了别名，别名就是类的名称，这种方式是通用的，推荐使用</p><p><code>但是如果使用package，在两个包中出现类名相同的情况，这个时候，就不能对这两个相同的类使用package，可以使用全限定名称或者是&lt;typeAlias type=&quot;com.bjpowernode.domain.Student&quot; alias=&quot;stu&quot; /&gt;的方式</code></p><p>使用</p>',35),v=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210414202435558.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),q=(0,p.uE)('<div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectMultiBy$<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * from student where name=${name}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//test</span>\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test12</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">StudentDao</span> dao <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> dao<span class="token punctuation">.</span>selectMultiBy$<span class="token punctuation">(</span><span class="token string">&quot;&#39;李四&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>自定义别名一定要在&lt;settings&gt;</code>标签下面定义，否则就会爆红</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;settings&gt;\n    &lt;!--设置mybatis输出日志--&gt;\n    &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt;\n&lt;/settings&gt;\n\n&lt;typeAliases&gt;\n    &lt;package name=&quot;cn.vipblogs.domain&quot;/&gt;\n&lt;/typeAliases&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h1 id="resultmap" tabindex="-1"><a class="header-anchor" href="#resultmap" aria-hidden="true">#</a> resultMap</h1><p>使用这个可以将数据库中查询出来的某个字段映射到某个对象中的某个属性中</p><p>使用方法</p><ol><li>定义一个<code>&lt;resultMap id=&quot;studentMap&quot; type=&quot;cn.vipblogs.domain.Student&quot;&gt;&lt;/resultMap&gt;</code></li><li>在此标签中定义<code>&lt;result /&gt;&lt;id /&gt;</code></li><li>在<code>&lt;select resultMap=&quot;&quot; id=&quot;&quot;&gt;</code>中使用</li></ol><p>定义<code>&lt;resultMap&gt;</code>标签</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>studentMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>id</code>: 字段是唯一，用于在<code>&lt;select resultMap=&quot;&quot; id=&quot;&quot;&gt;</code>中的resultMap中使用</li><li><code>type</code>:类的完全限定名，此标签下面的<code>&lt;result column=&quot;name&quot; property=&quot;&quot; /&gt; property=&quot;&quot;值指向此type中的属性字段名</code></li></ul><p>定义子标签</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>studentMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token comment">&lt;!--&lt;result column=&quot;age&quot; property=&quot;id&quot; /&gt;--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><p><code>id</code>: 这个和<code>result</code>差不多</p><p>id和result元素都将一个列的值映射到一个简单数据类型（String, int, double, Date 等）的属性或字段。</p><p>这两者之间的唯一不同是，<em>id</em> 元素对应的属性会被标记为对象的标识符，在比较对象实例时使用。 这样可以提高整体的性能，尤其是进行缓存和嵌套结果映射（也就是连接映射）的时候。</p></li><li><p><code>column</code>:数据库中的列名，或者是列的别名。一般情况下，这和传递给<code>resultSet.getString(columnName)</code> 方法的参数一样。</p></li><li><p><code>property</code>:</p><p>映射到列结果的字段或属性。如果 JavaBean 有这个名字的属性（property），会先使用该属性。否则 MyBatis 将会寻找给定名称的字段（field）。 无论是哪一种情形，你都可以使用常见的点式分隔形式进行复杂属性导航。 比如，你可以这样映射一些简单的东西：“username”，或者映射到一些复杂的东西上：“address.street.number”。</p></li></ul><p><code>需要注意的是，id必须要写在result标签的前面</code></p><p>简单例子</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//dao</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectResultMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//student属性</span>\n<span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>\n<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n<span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>\n<span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;resultMap id=&quot;studentMap&quot; type=&quot;cn.vipblogs.domain.Student&quot;&gt;\n    &lt;id column=&quot;age&quot; property=&quot;id&quot; /&gt;\n    &lt;result column=&quot;name&quot; property=&quot;email&quot; /&gt;\n    &lt;result column=&quot;email&quot; property=&quot;name&quot; /&gt;\n    &lt;!--&lt;result column=&quot;age&quot; property=&quot;id&quot; /&gt;--&gt;\n&lt;/resultMap&gt;\n\n&lt;select resultMap=&quot;studentMap&quot; id=&quot;selectResultMap&quot;&gt;\n    select name,email,age from student where id &gt;8\n&lt;/select&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>测试程序</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test13</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">StudentDao</span> dao <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectResultMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',21),y=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210414221242827.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),S=(0,p.uE)('<p>数据库中的name字段会被映射到student对象中的email，数据库中的email的值会被赋值student对象中的name</p><p>运行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token operator">&lt;=</span><span class="token operator">=</span>    <span class="token class-name">Columns</span><span class="token operator">:</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> age\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> 猪八戒<span class="token punctuation">,</span> <span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> <span class="token number">21</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> 猪八戒<span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> <span class="token number">21</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>      <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">2</span>\n<span class="token class-name">Student</span><span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">,</span> name<span class="token operator">=</span>&#39;<span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token char">&#39;猪八戒&#39;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">}</span>\n<span class="token class-name">Student</span><span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">,</span> name<span class="token operator">=</span>&#39;<span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token char">&#39;猪八戒23&#39;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>同一个resultMap我们可以在多个<code>&lt;select&gt;</code>中进行使用，直接输入resultMap的id就行</p>',4),h=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210414221641004.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),f=(0,p.uE)('<p>使用resultMap的情况，在很多时候，对于对象中的字段名和数据库中列名不相同的时候，但是我们又是必须要使用数据库中的某个值多个对象中的属性值时，我们就可以使用这种方式，使用到的情况还是很常见的</p><h2 id="对象属性名和数据库列名不同解决" tabindex="-1"><a class="header-anchor" href="#对象属性名和数据库列名不同解决" aria-hidden="true">#</a> 对象属性名和数据库列名不同解决</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//MyStudent</span>\n<span class="token keyword">private</span> <span class="token keyword">int</span> myId<span class="token punctuation">;</span>\n<span class="token keyword">private</span> <span class="token class-name">String</span> myName<span class="token punctuation">;</span>\n<span class="token keyword">private</span> <span class="token class-name">String</span> myEmail<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果直接使用这种方式的话</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectMyStudent<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.MyStudent<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>\n    select id,name,email,age from student\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>运行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">null</span>\n<span class="token keyword">null</span>\n<span class="token keyword">null</span>\n<span class="token keyword">null</span>\n<span class="token keyword">null</span>\n<span class="token keyword">null</span>\n<span class="token keyword">null</span>\n<span class="token keyword">null</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>因为数据库中的列名是name，而MyStudent中的是myName，所以全部都是null</p><h3 id="方式一-1" tabindex="-1"><a class="header-anchor" href="#方式一-1" aria-hidden="true">#</a> 方式一</h3><p>使用<code>resultMap</code>映射方式</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;resultMap id=&quot;myStudent&quot; type=&quot;cn.vipblogs.domain.MyStudent&quot;&gt;\n    &lt;id column=&quot;id&quot; property=&quot;myId&quot; /&gt;\n    &lt;result column=&quot;name&quot; property=&quot;myName&quot; /&gt;\n    &lt;result column=&quot;email&quot; property=&quot;myEmail&quot; /&gt;\n&lt;/resultMap&gt;\n\n&lt;select id=&quot;selectMyStudent&quot; resultMap=&quot;myStudent&quot; &gt;\n    select id,name,email,age from student\n&lt;/select&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>运行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">MyStudent</span><span class="token punctuation">{</span>myId<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> myName<span class="token operator">=</span><span class="token char">&#39;liubei&#39;</span><span class="token punctuation">,</span> myEmail<span class="token operator">=</span>&#39;<span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">}</span>\n<span class="token class-name">MyStudent</span><span class="token punctuation">{</span>myId<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> myName<span class="token operator">=</span><span class="token char">&#39;诸葛亮&#39;</span><span class="token punctuation">,</span> myEmail<span class="token operator">=</span>&#39;<span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">}</span>\n<span class="token class-name">MyStudent</span><span class="token punctuation">{</span>myId<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> myName<span class="token operator">=</span><span class="token char">&#39;猪八戒&#39;</span><span class="token punctuation">,</span> myEmail<span class="token operator">=</span>&#39;<span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">}</span>\n<span class="token class-name">MyStudent</span><span class="token punctuation">{</span>myId<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> myName<span class="token operator">=</span><span class="token char">&#39;猪八戒23&#39;</span><span class="token punctuation">,</span> myEmail<span class="token operator">=</span>&#39;<span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="方式二-1" tabindex="-1"><a class="header-anchor" href="#方式二-1" aria-hidden="true">#</a> 方式二</h3><p>方式二不使用<code>resultMap</code>我们也可以解决，但是在使用的时候，我们应该知道<code>resultType</code>的执行过程</p><p><code>resultType</code>默认会将数据库中查询出来的列的值，赋值给<code>resultType</code>对应对象相同名字的属性</p><p>所以不使用<code>resultMap</code>的情况下，想要解决，解需要使查询出来的列名和对象中的属性名相同，所以我们可以为数据库中的查询类添加<code>别名</code>的方式</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectMyStudent<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.MyStudent<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>\nselect id myId,name myName,email myEmail,age myAge from student\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h1 id="动态sql" tabindex="-1"><a class="header-anchor" href="#动态sql" aria-hidden="true">#</a> 动态sql</h1><h2 id="简单判断" tabindex="-1"><a class="header-anchor" href="#简单判断" aria-hidden="true">#</a> 简单判断</h2><p>使用<code>&lt;if test=&quot;&quot;&gt; &lt;/if&gt;</code>可以进行简单动态sql的if语句判断</p><p><code>test</code>：为if的条件</p><p>例子</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectIf</span><span class="token punctuation">(</span><span class="token class-name">Student</span> studnet<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//test</span>\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">StudentDao</span> dao <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectIf</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student1 <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectIf<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select name,id,email,age from student where\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name != null<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        name=#{name}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id&gt;3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        and id = #{id}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>原始的sql语句为<code>select name,id,email,age from student where</code></p><p>使用if判断，但是这里，需要注意一些，如果第一个不满足，第二个满足的话，那么这里就会出现报错情况</p><p>就比如</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;selectIf&quot;</span> resultType<span class="token operator">=</span><span class="token string">&quot;cn.vipblogs.domain.Student&quot;</span><span class="token operator">&gt;</span>\n    select name<span class="token punctuation">,</span>id<span class="token punctuation">,</span>email<span class="token punctuation">,</span>age from student where\n    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;name != null&quot;</span><span class="token operator">&gt;</span>\n        name<span class="token operator">=</span>#<span class="token punctuation">{</span>name<span class="token punctuation">}</span>\n\t<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;id&gt;3&quot;</span><span class="token operator">&gt;</span>\n        and id <span class="token operator">=</span> #<span class="token punctuation">{</span>id<span class="token punctuation">}</span>\n\t<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>\n        \n<span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nstudent<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectIf</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>那么执行的sql语句为：</p><p><code>Preparing: select name,id,email,age from student where and id = ? </code></p><p><code>where and </code>不报错才怪</p><p>但是可以使用下面这个解决这个问题，让进行判断的语句都是使用<code>and</code>进行连接，在where处使用<code>where 1=1</code></p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectIf<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select name,id,email,age from student where 1 = 1\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name != null<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        and name=#{name}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id&gt;3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        and id = #{id}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="where动态sql" tabindex="-1"><a class="header-anchor" href="#where动态sql" aria-hidden="true">#</a> where动态sql</h2><p>语法</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectWhere<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select email,name,age,id from student\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name != null<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            name = #{name}\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id &gt;= 7<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            or id &gt; #{id}\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在一个where中可以嵌套一个或者多个if</p><p>如果if中，有一个满足的时候，就会添加where，但是使用where if的话，我们就不能在sql语句的后面添加上where</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectWhere<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select email,name,age,id from student where\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果想上面这个select标签的话，运行结果为</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Preparing</span><span class="token operator">:</span> select email<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>id from student where <span class="token class-name">WHERE</span> name <span class="token operator">=</span> <span class="token operator">?</span> or id <span class="token operator">&gt;</span> <span class="token operator">?</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>出现两个where，语法错误</p><p><code>mybatis会自动进行检测，如果有 一个满足，就会自动在sql后面添加上where</code></p><p>但是下面这种情况，mybatis就不会自动设置</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name != null<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        name = #{name}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id &gt;= 7<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        id &gt; #{id}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>如果两个if都是满足的，那么运行情况近会变成</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Preparing</span><span class="token operator">:</span> select email<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>id from student <span class="token class-name">WHERE</span> name <span class="token operator">=</span> <span class="token operator">?</span> id <span class="token operator">&gt;</span> <span class="token operator">?</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>mybatis不会自动添加or</code></p><p>但是这种情况</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectWhere<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select email,name,age,id from student\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name != null<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            name = #{name}\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id &gt;= 7<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            or id &gt; #{id}\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">StudentDao</span> dao <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//student.setName(&quot;李四&quot;);</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>name值为null，所以第一个不满足，但是对于这种情况，按照之前的情况会出现报错情况，理想中的sql语句为<code>.... where or id &gt;7</code></p><p>但是mybatis会自动取到or</p><p>运行时的sql语句为</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Preparing</span><span class="token operator">:</span> select email<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>id from student WHERE id <span class="token operator">&gt;</span> <span class="token operator">?</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>所以，进行比较</p>',58),x=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210415221439454.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),w=(0,p.uE)('<p><code>所以，在使用where if的时候，我们可以在if语句的标签中写上and 或者是or，这样能够防止条件只出现一个的话，sql语句错误</code></p><p><code>where标签中也可以一个if也不写，这种情况不会出现报错情况，那么就会查询所有的记录</code></p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectWhere<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select email,name,age,id from student\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name != null<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            name = #{name}\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id &gt;= 7<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            or id &gt; #{id}\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach" aria-hidden="true">#</a> foreach</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>collection</td><td>表示迭代集合的名称，可以使用@Param注解指定，如下图所示<img src="https://img-blog.csdn.net/20180706202903393?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d0X2JldHRlcg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"> 该参数为必选</td></tr><tr><td>item</td><td>表示本次迭代获取的元素，若collection为List、Set或者数组，则表示其中的元素；若collection为map，则代表key-value的value，该参数为必选</td></tr><tr><td>open</td><td>表示该语句以什么开始，最常用的是左括弧’(’，注意:mybatis会将该字符拼接到整体的sql语句之前，并且只拼接一次，该参数为可选项</td></tr><tr><td>close</td><td>表示该语句以什么结束，最常用的是右括弧’)’，注意:mybatis会将该字符拼接到整体的sql语句之后，该参数为可选项</td></tr><tr><td>separator</td><td>mybatis会在每次迭代后给sql语句append上separator属性指定的字符，该参数为可选项</td></tr><tr><td>index</td><td>在list、Set和数组中,index表示当前迭代的位置，在map中，index代指是元素的key，该参数是可选项。</td></tr></tbody></table><p>例子</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectForeach</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> li<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">StudentDao</span> dao <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectForeach</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> list1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectForeach<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * from student where id in\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(<span class="token punctuation">&quot;</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>,<span class="token punctuation">&quot;</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stu<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        #{stu.id}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果foreach的对象是一个数组的话，那么<code>collection</code>便是array，如果是一个List的话，便写list，这个list便代表此foreach遍历的对象是一个<code>List</code>集合</p><p>mybatis不会自动为遍历的元素添加括号什么的，需要自己设置，使用<code>open</code>设置遍历元素的前开头</p><p><code>item</code>需要写一个临时变量，<code>list.add(new Student(5))</code>，那么每遍历的这个item就是Student对象</p><p>在<code>&lt;foreach&gt;</code>标签中就可以使用这个item，但是这个item是一个Student，那么我们想要得到id，就需要使用<code>.</code>运算符<code>#{stu.id}</code></p><p>运行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Preparing</span><span class="token operator">:</span> select <span class="token operator">*</span> from student where id in <span class="token punctuation">(</span> <span class="token operator">?</span> <span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token punctuation">)</span> \n<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token function">5</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">6</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">7</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>    <span class="token class-name">Columns</span><span class="token operator">:</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> age\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> 李四<span class="token punctuation">,</span> <span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> <span class="token number">21</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> 李五<span class="token punctuation">,</span> <span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> <span class="token number">21</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> liubei<span class="token punctuation">,</span> <span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> <span class="token number">21</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>      <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>如果是这样进行遍历</li></ul><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>,<span class="token punctuation">&quot;</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stu<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    (#{stu.id})\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>运行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Preparing</span><span class="token operator">:</span> select <span class="token operator">*</span> from student where id in <span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">)</span> \n<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token function">5</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">6</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">7</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这种方式适用于<code>insert into 表 values(),(),()</code>的情况</p><p>但是不能这样使用</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>,<span class="token punctuation">&quot;</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stu<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    (&#39;#{stu.id}&#39;)\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>使用引号想把获取到的id引起来，不能这样，这样不会获取到id</p>',23),j=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210416133706923.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),M=(0,p.uE)('<p>没有下文</p><ul><li>还可以这样</li></ul><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectForeach<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * from student where id in\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>,<span class="token punctuation">&quot;</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stu<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        (#{stu.id})\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>\n    order by id desc\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>运行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token operator">==</span><span class="token operator">&gt;</span>  <span class="token class-name">Preparing</span><span class="token operator">:</span> select <span class="token operator">*</span> from student where id in <span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">)</span> order by id desc \n<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token function">5</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">6</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">7</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h1 id="代码片段" tabindex="-1"><a class="header-anchor" href="#代码片段" aria-hidden="true">#</a> 代码片段</h1><p>在有的时候，可能会存在重复的代码片段，我们可以只需要写一个就行</p><p>mybatis的代码片段就可以解决这个问题</p><p>使用步骤</p><ol><li>定义一个<code>sql</code>标签</li><li>在<code>select update delete</code>等标签中，使用<code>&lt;include&gt;</code>标签使用</li></ol><ul><li>sql标签</li></ul><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectAll<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * from student\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>id</code>是一个必须值</p><ul><li>include标签</li></ul><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectRe<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.vipblogs.domain.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectAll<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>\n    where id &gt; #{id}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>refid</code>的值也就是我们需要使用的定义了的<code>&lt;sql&gt;</code>中的id值</p><p>如果还需要其他的条件的话，可以在<code>&lt;include&gt;</code>后面进行添加</p><h1 id="数据库属性配置文件" tabindex="-1"><a class="header-anchor" href="#数据库属性配置文件" aria-hidden="true">#</a> 数据库属性配置文件</h1><p>在mybatis的主配置文件xml中，我们可以配置数据库的连接信息，但是这样做的话，可能看起来会比较乱，所以我们可以考虑使用<code>properties</code>配置文件作为数据库的信息配置</p><p>使用步骤</p><ol><li>定义一个properties文件，并记录数据库的连接信息</li><li>在mybatis中使用<code>&lt;properties resource=&quot;&quot; /&gt;</code>引入这个属性配置文件</li><li>在需要使用连接配置的地方使用<code>${properties key值}</code></li></ol><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">jdbc.driver</span> <span class="token punctuation">=</span> <span class="token attr-value">com.mysql.jdbc.Driver</span>\n<span class="token attr-name">jdbc.url</span> <span class="token punctuation">=</span> <span class="token attr-value">jdbc:mysql://localhost:3306/mybatis</span>\n<span class="token attr-name">jdbc.user</span> <span class="token punctuation">=</span> <span class="token attr-value">root</span>\n<span class="token attr-name">jdbc.pwd</span> <span class="token punctuation">=</span> <span class="token attr-value">123456</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>mybatis主配置文件</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//引入properties文件\n&lt;properties resource=&quot;jdbc.properties&quot; /&gt;\n\n\n//配置连接信息\n&lt;dataSource type=&quot;POOLED&quot;&gt;\n    &lt;!--type：表示数据源的类型， POOLED表示使用连接池--&gt;\n    &lt;property name=&quot;driver&quot; value=&quot;${jdbc.driver}&quot;/&gt;\n    &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot;/&gt;\n    &lt;property name=&quot;username&quot; value=&quot;${jdbc.user}&quot;/&gt;\n    &lt;property name=&quot;password&quot; value=&quot;${jdbc.pwd}&quot;/&gt;\n&lt;/dataSource&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>resource=&quot;&quot;是properties文件的类路径，从classes目录开始写</code></p>',25),I=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210416174757014.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),D=(0,p.uE)('<p><code>注意需要打上双引号</code></p><p>properties文件中的key值书写推荐使用<code>xxx.xxx</code>的形式，这样一个类别的，在逗号前面相同，推荐使用这种方式</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">jdbc.driver</span> <span class="token punctuation">=</span> <span class="token attr-value">com.mysql.jdbc.Driver</span>\n<span class="token attr-name">jdbc.url</span> <span class="token punctuation">=</span> <span class="token attr-value">jdbc:mysql://localhost:3306/mybatis</span>\n<span class="token attr-name">jdbc.user</span> <span class="token punctuation">=</span> <span class="token attr-value">root</span>\n<span class="token attr-name">jdbc.pwd</span> <span class="token punctuation">=</span> <span class="token attr-value">123456</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h1 id="pagehelper工具的使用" tabindex="-1"><a class="header-anchor" href="#pagehelper工具的使用" aria-hidden="true">#</a> PageHelper工具的使用</h1><p>在进行分页的时候，使用这个工具我们可以很快的就能完成分页的查询，<code>PageHelper</code>并不是mybatis官方的，不是他们写的</p><p>使用步骤</p><ol><li>添加依赖</li><li>在mybatis环境连接环境配置上方添加此插件</li><li>在需要进行查询分页的地方，调用<code>PageHelper.startPage(2,3)</code>方法即可</li></ol><ul><li>添加依赖</li></ul><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>主配置文件添加插件</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;plugins&gt;\n    &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;&lt;/plugin&gt;\n&lt;/plugins&gt;\n\n&lt;!--一定要在此标签前面--&gt;\n&lt;environments default=&quot;dev&quot;&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>interceptor</code>全限定名称</p><p>使用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token comment">//PageHelper.startPage(2,3);</span>\n    <span class="token class-name">StudentDao</span> dao <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectAllPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>不使用情况测试</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token operator">==</span><span class="token operator">&gt;</span>  <span class="token class-name">Preparing</span><span class="token operator">:</span> select <span class="token operator">*</span> from student \n<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> \n<span class="token operator">&lt;=</span><span class="token operator">=</span>    <span class="token class-name">Columns</span><span class="token operator">:</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> age\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 初尘<span class="token punctuation">,</span> <span class="token number">2291308094</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> <span class="token number">21</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> qsyyke<span class="token punctuation">,</span> <span class="token number">2347634</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> <span class="token number">20</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> 张飞<span class="token punctuation">,</span> <span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> <span class="token number">21</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> 李四<span class="token punctuation">,</span> <span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> <span class="token number">21</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> 李五<span class="token punctuation">,</span> <span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> <span class="token number">21</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> liubei<span class="token punctuation">,</span> <span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> <span class="token number">21</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span> 诸葛亮<span class="token punctuation">,</span> <span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> <span class="token number">21</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span> 猪八戒<span class="token punctuation">,</span> <span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> <span class="token number">21</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> 猪八戒<span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> <span class="token number">21</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>      <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">9</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>注意<code>select * from student </code></p><ul><li>使用</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">StudentDao</span> dao <span class="token operator">=</span> <span class="token class-name">MybatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">StudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectAllPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">//打印结果</span>\n<span class="token operator">==</span><span class="token operator">&gt;</span>  <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token class-name">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token class-name">FROM</span> student \n<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> \n<span class="token operator">&lt;=</span><span class="token operator">=</span>    <span class="token class-name">Columns</span><span class="token operator">:</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> <span class="token number">9</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>      <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">1</span>\n<span class="token operator">==</span><span class="token operator">&gt;</span>  <span class="token class-name">Preparing</span><span class="token operator">:</span> select <span class="token operator">*</span> from student LIMIT <span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span> \n<span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token function">3</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">3</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>    <span class="token class-name">Columns</span><span class="token operator">:</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> age\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> 李四<span class="token punctuation">,</span> <span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> <span class="token number">21</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> 李五<span class="token punctuation">,</span> <span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> <span class="token number">21</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> liubei<span class="token punctuation">,</span> <span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> <span class="token number">21</span>\n<span class="token operator">&lt;=</span><span class="token operator">=</span>      <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">3</span>\n<span class="token class-name">Student</span><span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;李四&#39;</span><span class="token punctuation">,</span> email<span class="token operator">=</span>&#39;<span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">}</span>\n<span class="token class-name">Student</span><span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;李五&#39;</span><span class="token punctuation">,</span> email<span class="token operator">=</span>&#39;<span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">}</span>\n<span class="token class-name">Student</span><span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;liubei&#39;</span><span class="token punctuation">,</span> email<span class="token operator">=</span>&#39;<span class="token number">2291</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p><code>如果使用这个工具的话，会在sql语句后面加上limit select * from student LIMIT ?, ? </code></p><p>在执行开始之前，会先计算总共有多少条数据，然后在进行分页</p><p><code>==&gt; Preparing: SELECT count(0) FROM student </code></p><ul><li>参数</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>第一个参数是第几页，第二个参数是，显示多少条数据</p><p>在执行的时候，首先调用<code>==&gt; Preparing: SELECT count(0) FROM student </code>计算总共有多少条数据，然后在根据参数，显示多少条，计算分成多少页，所以第二个参数直接决定总的页数</p>',26),P={},T=(0,a(83744).Z)(P,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,o,c,l,u,i,r,k,m,d,b,g,v,q,y,S,h,f,x,w,j,M,I,D],64)}]])}}]);