"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4615],{84786:(n,a,s)=>{s.r(a),s.d(a,{data:()=>p});const p={key:"v-1bbcc3ba",path:"/idea/%E6%A8%A1%E6%9D%BF.html",title:"类模板",lang:"en-US",frontmatter:{},excerpt:"",headers:[],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},77934:(n,a,s)=>{s.r(a),s.d(a,{default:()=>t});const p=(0,s(66252).uE)('<h1 id="类模板" tabindex="-1"><a class="header-anchor" href="#类模板" aria-hidden="true">#</a> 类模板</h1><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>#<span class="token keyword">if</span> <span class="token punctuation">(</span>$<span class="token punctuation">{</span>PACKAGE_NAME<span class="token punctuation">}</span> <span class="token operator">&amp;&amp;</span> $<span class="token punctuation">{</span>PACKAGE_NAME<span class="token punctuation">}</span> <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token keyword">package</span> $<span class="token punctuation">{</span>PACKAGE_NAME<span class="token punctuation">}</span><span class="token punctuation">;</span>#end\n#<span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;File Header.java&quot;</span><span class="token punctuation">)</span>\n\n这里必须要有空行\n\n<span class="token doc-comment comment">/**\n * $<span class="token punctuation">{</span>description<span class="token punctuation">}</span>\n * <span class="token keyword">@author</span> $<span class="token punctuation">{</span>USER<span class="token punctuation">}</span> 程钦义\n * <span class="token keyword">@date</span> $<span class="token punctuation">{</span>YEAR<span class="token punctuation">}</span>/$<span class="token punctuation">{</span>MONTH<span class="token punctuation">}</span>/$<span class="token punctuation">{</span>DAY<span class="token punctuation">}</span> $<span class="token punctuation">{</span>HOUR<span class="token punctuation">}</span>:$<span class="token punctuation">{</span>MINUTE<span class="token punctuation">}</span>\n **/</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> $<span class="token punctuation">{</span>NAME<span class="token punctuation">}</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>这样设置之后，当我们新建一个类的时候，会提示输入类描述</p><h1 id="方法模板" tabindex="-1"><a class="header-anchor" href="#方法模板" aria-hidden="true">#</a> 方法模板</h1><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token operator">*</span><span class="token operator">*</span>\n <span class="token operator">*</span> \n <span class="token operator">*</span> <span class="token annotation punctuation">@author</span> chuchen\n <span class="token operator">*</span> <span class="token annotation punctuation">@date</span> $date$ $time$$param$ \n <span class="token operator">*</span> <span class="token annotation punctuation">@return</span> $<span class="token keyword">return</span>$\n <span class="token operator">*</span><span class="token operator">/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>顶上不能有<code>/</code></p><p>参数</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token function">groovyScript</span><span class="token punctuation">(</span><span class="token string">&quot;def result=&#39; \\\\n&#39;; def params=\\&quot;${_1}\\&quot;.replaceAll(&#39;[\\\\\\\\[|\\\\\\\\]|\\\\\\\\s]&#39;, &#39;&#39;).split(&#39;,&#39;).toList(); for(i = 0; i &lt; params.size(); i++) {if(params[i] == &#39;&#39;) return &#39; &#39;; result+=&#39; * @param &#39; + params[i] + &#39; &#39; + params[i] + ((i &lt; params.size() - 1) ? &#39; \\\\n&#39; : &#39; &#39;)}; return result&quot;</span><span class="token punctuation">,</span> <span class="token function">methodParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>返回值</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token function">groovyScript</span><span class="token punctuation">(</span><span class="token string">&quot;def result=&#39;&#39;; def params=\\&quot;${_1}\\&quot;.replaceAll(&#39;[\\\\\\\\[|\\\\\\\\]|\\\\\\\\s]&#39;, &#39;&#39;).split(&#39;&lt;&#39;).toList(); for(i = 0; i &lt; params.size(); i++) {if(i!=0){result+=&#39;&lt;&#39;;};  def p1=params[i].split(&#39;,&#39;).toList();  for(i2 = 0; i2 &lt; p1.size(); i2++) { def p2=p1[i2].split(&#39;\\\\\\\\.&#39;).toList();  result+=p2[p2.size()-1]; if(i2!=p1.size()-1){result+=&#39;,&#39;}  } ;  };  return result&quot;</span><span class="token punctuation">,</span> <span class="token function">methodReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',10),e={},t=(0,s(83744).Z)(e,[["render",function(n,a){return p}]])}}]);