"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[307],{66131:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-0b3a42e0",path:"/issue/spring%20boot.html",title:"spring boot问题总结",lang:"en-US",frontmatter:{date:"2022/3/31"},excerpt:"",headers:[{level:2,title:"全局异常处理，没有返回json数据",slug:"全局异常处理-没有返回json数据",children:[]},{level:2,title:"自定义过滤json过滤字段",slug:"自定义过滤json过滤字段",children:[{level:3,title:"一、自定义一个json过滤器",slug:"一、自定义一个json过滤器",children:[]},{level:3,title:"二、定义一个自定义注解",slug:"二、定义一个自定义注解",children:[]},{level:3,title:"三、响应体增强",slug:"三、响应体增强",children:[]},{level:3,title:"四、测试",slug:"四、测试",children:[]}]},{level:2,title:"不同模块之间导入组件问题",slug:"不同模块之间导入组件问题",children:[]},{level:2,title:"增加自定义属性配置类，不提示问题",slug:"增加自定义属性配置类-不提示问题",children:[]},{level:2,title:"排除bean",slug:"排除bean",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},34552:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var p=a(66252);const e=(0,p.uE)('<h1 id="spring-boot问题总结" tabindex="-1"><a class="header-anchor" href="#spring-boot问题总结" aria-hidden="true">#</a> spring boot问题总结</h1><h2 id="全局异常处理-没有返回json数据" tabindex="-1"><a class="header-anchor" href="#全局异常处理-没有返回json数据" aria-hidden="true">#</a> 全局异常处理，没有返回json数据</h2><p>最开始是这样</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@ControllerAdvice</span>\n<span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@ExceptionHandler</span>\n    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">bing</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;执行了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;new File()&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>但是发生异常之后，这里也捕获了，但是就是没有返回new File()字符串，而是返回404页面</p><p>不能使用<code>@ControllerAdvice</code>注解，该注解默认返回的是页面，需要使用<code>@RestControllerAdvice</code>，或者在方法上添加<code>@ResponseBody</code>注解</p><h2 id="自定义过滤json过滤字段" tabindex="-1"><a class="header-anchor" href="#自定义过滤json过滤字段" aria-hidden="true">#</a> 自定义过滤json过滤字段</h2><h3 id="一、自定义一个json过滤器" tabindex="-1"><a class="header-anchor" href="#一、自定义一个json过滤器" aria-hidden="true">#</a> 一、自定义一个json过滤器</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldFilterSerializer</span> <span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * 想要保留的字段标识\n     */</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DYNAMIC_INCLUDE <span class="token operator">=</span> <span class="token string">&quot;DYNAMIC_INCLUDE&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * 想要过滤的字段标识\n     */</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DYNAMIC_EXCLUDE <span class="token operator">=</span> <span class="token string">&quot;DYNAMIC_EXCLUDE&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * jackson核心类 过滤属性全部由这个类完成\n     */</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@JsonFilter</span><span class="token punctuation">(</span>DYNAMIC_EXCLUDE<span class="token punctuation">)</span>\n    <span class="token keyword">interface</span> <span class="token class-name">DynamicExclude</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@JsonFilter</span><span class="token punctuation">(</span>DYNAMIC_EXCLUDE<span class="token punctuation">)</span>\n    <span class="token keyword">interface</span> <span class="token class-name">DynamicInclude</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> propertyArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SimpleBeanPropertyFilter</span> filter <span class="token operator">=</span> <span class="token class-name">SimpleBeanPropertyFilter</span><span class="token punctuation">.</span><span class="token function">serializeAllExcept</span><span class="token punctuation">(</span>propertyArray<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">SimpleFilterProvider</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleFilterProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addFilter</span><span class="token punctuation">(</span>DYNAMIC_EXCLUDE<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        mapper<span class="token punctuation">.</span><span class="token function">setFilterProvider</span><span class="token punctuation">(</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        mapper<span class="token punctuation">.</span><span class="token function">addMixIn</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token class-name">DynamicExclude</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//解决jackson2无法反序列化LocalDateTime的问题</span>\n        <span class="token comment">//这里要注意时间属性上要加入 @JsonFormat 注解 否则无法正常解析</span>\n        mapper<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JavaTimeModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//将类转换成json字符串返回</span>\n        <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><blockquote><p>这里一定要保证<code>addFilter(DYNAMIC_EXCLUDE, filter)</code>中的<code>DYNAMIC_EXCLUDE</code>是一个<code>@JsonFilter(DYNAMIC_EXCLUDE)</code>注解中的值，否则不会有效果</p><p>我们也可以将此<code>@JsonFilter(&quot;&quot;)</code>注解放在其他实体类上，但是不方便，所以这里直接定义一个内部接口，放在此接口上，也可以达到一样的效果</p></blockquote><p>这里还有一个坑，在spring boot中，如果我们直接返回<code>toJSONString()</code>的值，那么在浏览器中，看到的json会添加斜杠，这里可以这样解决</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>返回此对象就可以了</p><p>还有一个注意的项，如果我们做了统一处理，统一返回<code>R</code>对象，controller返回的是<code>User</code>对象，因为此user需要添加到r对象的data中，那么这里的<code>mapper.addMixIn(clazz, DynamicExclude.class)</code>中的<code>clazz</code>需要填<code>User.class</code>，而不是<code>R.class</code></p><p>返回的<code>mapper.writeValueAsString(object)</code>才是传入<code>R</code>对象</p><h3 id="二、定义一个自定义注解" tabindex="-1"><a class="header-anchor" href="#二、定义一个自定义注解" aria-hidden="true">#</a> 二、定义一个自定义注解</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>@Retention(RetentionPolicy.RUNTIME)\n@Target(value = {ElementType.METHOD,ElementType.TYPE})\npublic @interface FieldFilter {\n    /**\n     * 过滤哪个类\n     */\n    Class&lt;?&gt; value();\n\n    /**\n     * 需要排除的字段\n     */\n    String[] excludeFields();\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="三、响应体增强" tabindex="-1"><a class="header-anchor" href="#三、响应体增强" aria-hidden="true">#</a> 三、响应体增强</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">ResponseBodyAdvice</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ControllerAdvice</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseResultHandler</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseBodyAdvice</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converterType<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span><span class="token class-name">Object</span> responseBody<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> methodParameter<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> selectedContentType<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> selectedConverterType<span class="token punctuation">,</span> <span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//response.getHeaders().setContentType(MediaType.APPLICATION_JSON);</span>\n        <span class="token comment">//执行的方法</span>\n        <span class="token class-name">Method</span> method <span class="token operator">=</span> methodParameter<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">assert</span> method <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token comment">//判断是否存在ResponseResult注解</span>\n        <span class="token keyword">boolean</span> hasResponseResultAnnotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">ResponseResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token doc-comment comment">/**\n         * 获取方法或者异常的返回值类型\n         * 这里如果没有发生异常是通过注解进行判断，如果存在异常，因为做了全局处理，返回值是ExceptionResultEntity\n         */</span>\n        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> resultReturnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasResponseResultAnnotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 存在注解，没有发生异常，对结果封装</span>\n            <span class="token comment">// 判断返回体是不是ModifyResult类型</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>responseBody <span class="token keyword">instanceof</span> <span class="token class-name">ModifyResult</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">ModifyResult</span> modifyResult <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ModifyResult</span><span class="token punctuation">)</span> responseBody<span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>modifyResult<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> modifyResult<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>responseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token class-name">R</span> r <span class="token operator">=</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">ResponseStatusCodeEnum</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                    <span class="token class-name">ResponseStatusCodeEnum</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> responseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 需要R对象整体传入</span>\n            <span class="token keyword">return</span> <span class="token function">fieldFilter</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>responseBody <span class="token keyword">instanceof</span> <span class="token class-name">ExceptionResultEntity</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//发生了异常，对结果进行封装</span>\n            <span class="token class-name">ExceptionResultEntity</span> exceptionResultEntity <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ExceptionResultEntity</span><span class="token punctuation">)</span> responseBody<span class="token punctuation">;</span>\n\n            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> errorMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            errorMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;errorUrl&quot;</span><span class="token punctuation">,</span>exceptionResultEntity<span class="token punctuation">.</span><span class="token function">getErrorUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>exceptionResultEntity<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                errorMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;additionalData&quot;</span><span class="token punctuation">,</span>exceptionResultEntity<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span>exceptionResultEntity<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exceptionResultEntity<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>errorMap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> <span class="token function">fieldFilter</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">,</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 进行字段过滤，对于返回值是ModifyResult的对象，不做任何处理，因为没有需要过滤的字段，对于查询操作，因为返回的是一个\n     * VO层实体，会存在敏感字段，这里根据当前登录用户的权限进行判断，如果拥有查看敏感字段的权限，或者是管理员，那么不做脱敏处理\n     * 返回过滤该字段\n     * <span class="token keyword">@param</span> <span class="token parameter">responseBody</span>\n     * <span class="token keyword">@param</span> <span class="token parameter">method</span>\n     * <span class="token keyword">@return</span>\n     */</span>\n    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">fieldFilter</span><span class="token punctuation">(</span><span class="token class-name">Object</span> responseBody<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 判断是否有FieldFilter注解(判断当前登录用户是否具有查看密码的权限，动态过滤某个字段)</span>\n        <span class="token keyword">boolean</span> hasFieldFilterAnnotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">FieldFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasFieldFilterAnnotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">FieldFilter</span> fieldFilterAnnotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">FieldFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 需要排除的字段集合</span>\n            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> excludeFields <span class="token operator">=</span> fieldFilterAnnotation<span class="token punctuation">.</span><span class="token function">excludeFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 序列化的class</span>\n            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> serializerClass <span class="token operator">=</span> fieldFilterAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// 过滤字段</span>\n            <span class="token class-name">FieldFilterSerializer</span> filterSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FieldFilterSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            filterSerializer<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>serializerClass<span class="token punctuation">,</span>excludeFields<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                <span class="token class-name">String</span> json <span class="token operator">=</span> filterSerializer<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                responseBody <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;对象转json出错了:{},出错原因:{}&quot;</span><span class="token punctuation">,</span>responseBody<span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> responseBody<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br></div></div><p>这里也可以在环绕通知中，只是我这里，是对响应体进行增强，效果也一样</p><h3 id="四、测试" tabindex="-1"><a class="header-anchor" href="#四、测试" aria-hidden="true">#</a> 四、测试</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@FieldFilter</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">UserVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>excludeFields <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;uid&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;userSummary&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;nickname&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{uid}&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ResponseResult</span>\n<span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;通过uid查询用户信息&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">UserVO</span> <span class="token function">queryUserByUid</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;uid&quot;</span><span class="token punctuation">)</span> <span class="token keyword">long</span> uid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">queryByUid</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>除此以外，还有其他的方法可以过滤字段，但是并不是很好</p><p>https://juejin.cn/post/6844904061725065230</p><h2 id="不同模块之间导入组件问题" tabindex="-1"><a class="header-anchor" href="#不同模块之间导入组件问题" aria-hidden="true">#</a> 不同模块之间导入组件问题</h2><p>包结构</p>',26),t=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image-20220428194334582",originSrc:"https://picture.xcye.xyz/image-20220428194334582.png",data:"aurora"})],-1),o=(0,p.uE)('<p>如果我们想要将<code>aurora-message</code>中的某个组件，导入到<code>aurora-comment</code>，像上面这种情况，不不能自动导入的，我们可以在主启动类上，自动添加其他包路径，还可以将<code>aurora-message</code>的主启动类放在<code>xyz.xcye</code>这个包下，这样<code>aurora-comment</code>和<code>aurora-message</code>的主启动类的包结构就相同了，那么他们就能够导入</p><h2 id="增加自定义属性配置类-不提示问题" tabindex="-1"><a class="header-anchor" href="#增加自定义属性配置类-不提示问题" aria-hidden="true">#</a> 增加自定义属性配置类，不提示问题</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>\n<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token class-name">AuroraProperties</span><span class="token punctuation">.</span>AURORA_PREFIX<span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuroraProperties</span> <span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * 主题配置文件的前缀\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> AURORA_PREFIX <span class="token operator">=</span> <span class="token string">&quot;aurora&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">int</span> workerId<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>我们需要添加下面这个依赖</p><div class="language-pom ext-pom line-numbers-mode"><pre class="language-pom"><code>&lt;dependency&gt;\n&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n&lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果提示</p>',6),c=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image-20220430124409767",originSrc:"https://picture.xcye.xyz/image-20220430124409767.png",data:"aurora"})],-1),l=(0,p._)("p",null,"可以把下面这个关闭",-1),u=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image-20220430124455924",originSrc:"https://picture.xcye.xyz/image-20220430124455924.png",data:"aurora"})],-1),i=(0,p.uE)('<h2 id="排除bean" tabindex="-1"><a class="header-anchor" href="#排除bean" aria-hidden="true">#</a> 排除bean</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>REGEX<span class="token punctuation">,</span> pattern <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;xyz.xcye.aurora.exception.*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;xyz.xcye.aurora.interceptor.*&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;xyz.xcye.aurora.manager.advice.*&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@SpringBootApplication</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuroraGateWayMain</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">AuroraGateWayMain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',2),r={},k=(0,a(83744).Z)(r,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,t,o,c,l,u,i],64)}]])}}]);