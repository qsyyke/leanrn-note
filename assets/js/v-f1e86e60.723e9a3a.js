"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1748],{94821:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-f1e86e60",path:"/spring/springcloud/Eureka.html",title:"Eureka",lang:"en-US",frontmatter:{date:"2022/1/16 19:54"},excerpt:"",headers:[{level:2,title:"什么是服务注册与发现",slug:"什么是服务注册与发现",children:[]},{level:2,title:"Eureka包含两个组件：Eureka Server和Eureka Client",slug:"eureka包含两个组件-eureka-server和eureka-client",children:[]},{level:2,title:"服务端",slug:"服务端",children:[{level:3,title:"一、引入依赖",slug:"一、引入依赖",children:[]},{level:3,title:"二、修改配置文件",slug:"二、修改配置文件",children:[]},{level:3,title:"三、主启动",slug:"三、主启动",children:[]}]},{level:2,title:"客户端",slug:"客户端",children:[{level:3,title:"一、引入依赖",slug:"一、引入依赖-1",children:[]},{level:3,title:"二、修改配置文件",slug:"二、修改配置文件-1",children:[]},{level:3,title:"三、添加注解",slug:"三、添加注解",children:[]}]},{level:2,title:"搭建集群",slug:"搭建集群",children:[{level:3,title:"Eureka Server",slug:"eureka-server",children:[]},{level:3,title:"Eureka Client",slug:"eureka-client",children:[]},{level:3,title:"测试",slug:"测试",children:[]}]},{level:2,title:"主机名称和访问信息有IP信息提示",slug:"主机名称和访问信息有ip信息提示",children:[]},{level:2,title:"服务发现",slug:"服务发现",children:[]},{level:2,title:"Eureka自我保护",slug:"eureka自我保护",children:[{level:3,title:"为什么会产生Eureka自我保护机制？",slug:"为什么会产生eureka自我保护机制",children:[]},{level:3,title:"什么是自我保护模式？",slug:"什么是自我保护模式",children:[]}]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},55313:(n,a,s)=>{s.r(a),s.d(a,{default:()=>O});var e=s(66252);const p=(0,e.uE)('<h1 id="eureka" tabindex="-1"><a class="header-anchor" href="#eureka" aria-hidden="true">#</a> Eureka</h1><p>在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。</p><h2 id="什么是服务注册与发现" tabindex="-1"><a class="header-anchor" href="#什么是服务注册与发现" aria-hidden="true">#</a> 什么是服务注册与发现</h2><p>Eureka采用了CS的设计架构，<code>Eureka Server</code>作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用 Eureka的客户端连接到Eureka Server并维持心跳连接。这样系统的维护人员就可以通过<code>Eureka Server</code>来监控系统中各个微服务是否正常运行。</p><p>在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息，比如服务地址通讯地址等以别名方式注册到注册中心上。另一方（消费者|服务提供者），以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系(服务治理概念)。在任何rpc远程框架中，都会有一个注册中心(存放服务地址相关信息(接口地址))</p>',5),t=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220116195706119.png",data:"aurora"})],-1),l=(0,e.uE)('<blockquote><p>右图是<code>dubbo</code></p></blockquote><h2 id="eureka包含两个组件-eureka-server和eureka-client" tabindex="-1"><a class="header-anchor" href="#eureka包含两个组件-eureka-server和eureka-client" aria-hidden="true">#</a> Eureka包含两个组件：Eureka Server和Eureka Client</h2><ul><li><p><code>Eureka Server</code>提供服务注册服务 各个微服务节点通过配置启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。</p></li><li><p><code>Eureka Client</code>通过注册中心进行访问 它是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除（默认90秒）</p></li></ul><h2 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端" aria-hidden="true">#</a> 服务端</h2><p><code>Eureka</code>的1版本和2版本的依赖区别有点大</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!--以前的老版本（当前使用2018）--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;!--现在新版本（当前使用2020.2）--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>他们最主要的区别就是，在1版本中，客户端(<code>client</code>)和服务端(<code>server</code>)都是使用同一个jar，这样就使得客户端和服务端的依赖都是在同一个里面</p><p>但是在2版本中，服务端和客户端的依赖是分开的，看上图就知道</p></blockquote><h3 id="一、引入依赖" tabindex="-1"><a class="header-anchor" href="#一、引入依赖" aria-hidden="true">#</a> 一、引入依赖</h3><p>对于服务端，我们只需要在<code>pom.xml</code>文件种，引入服务端的依赖就行</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!--现在新版本（当前使用2020.2）--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="二、修改配置文件" tabindex="-1"><a class="header-anchor" href="#二、修改配置文件" aria-hidden="true">#</a> 二、修改配置文件</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span>\n\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">instance</span><span class="token punctuation">:</span>\n    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost <span class="token comment">#eureka服务端的实例名称</span>\n  <span class="token key atrule">client</span><span class="token punctuation">:</span>\n    <span class="token comment">#false表示不向注册中心注册自己。</span>\n    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n    <span class="token comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span>\n    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>\n    <span class="token comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。</span>\n      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>/eureka/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>我们需要在<code>application.yml</code>文件中，添加上面的配置</p><h3 id="三、主启动" tabindex="-1"><a class="header-anchor" href="#三、主启动" aria-hidden="true">#</a> 三、主启动</h3><p>除此以外，我们还需要在spring的主方法类上，添加<code>@EnableEurekaServer</code>注解</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@EnableEurekaServer</span>\n<span class="token annotation punctuation">@SpringBootApplication</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaMain7001</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaMain7001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>然后运行，我们打开<code>localhost:7001</code>便会看到下面的页面</p>',18),c=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220116201441013.png",data:"aurora"})],-1),o=(0,e.uE)('<h2 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端" aria-hidden="true">#</a> 客户端</h2><h3 id="一、引入依赖-1" tabindex="-1"><a class="header-anchor" href="#一、引入依赖-1" aria-hidden="true">#</a> 一、引入依赖</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!--eureka-client--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="二、修改配置文件-1" tabindex="-1"><a class="header-anchor" href="#二、修改配置文件-1" aria-hidden="true">#</a> 二、修改配置文件</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">client</span><span class="token punctuation">:</span>\n    <span class="token comment">#表示是否将自己注册进EurekaServer默认为true。</span>\n    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n    <span class="token comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span>\n    <span class="token key atrule">fetchRegistry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>\n      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>这里得注意<code>register-with-eureka</code>项</p></blockquote><h3 id="三、添加注解" tabindex="-1"><a class="header-anchor" href="#三、添加注解" aria-hidden="true">#</a> 三、添加注解</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>\n<span class="token annotation punctuation">@EnableEurekaClient</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentService8001</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentService8001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>服务端和客户端的注解是不同的</p></blockquote><p>当启动了之后，我们就可以在服务端看到我们刚添加的这个应用</p>',10),r=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220116201825610.png",data:"aurora"})],-1),u=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220116201908573.png",data:"aurora"})],-1),i=(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e.Uk)("为了方便，我们最好在每个应用的配置文件中，指定"),(0,e._)("code",null,"spring.application.name"),(0,e.Uk)("值")])],-1),k=(0,e._)("h2",{id:"搭建集群",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#搭建集群","aria-hidden":"true"},"#"),(0,e.Uk)(" 搭建集群")],-1),d=(0,e._)("p",null,[(0,e.Uk)("使用"),(0,e._)("code",null,"Eureka"),(0,e.Uk)("搭建集群，其原理图就是如下这种")],-1),b=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220116220327982.png",data:"aurora"})],-1),m=(0,e.uE)('<blockquote><p>在<code>Eureka</code>服务注册中心中，有多个<code>Eureka Server</code>和多个<code>Service Provider</code>，当我们使用<code>Service Consumer</code>向服务提供者发送请求的时候，因为服务提供者全部都是注册在注册中心的，所以最终服务消费者是向注册中心中的某一个服务提供者发送请求，服务提供者我们可以设置采用轮训的方式，其中的逻辑，不需要我们自己写，这些都是<code>Eureka</code>自己做的事，我们要做的就是将服务提供者注册到注册中心，便可以了</p></blockquote><p>微服务RPC远程服务调用最核心是：高可用，所以我们就需要搭建Eureka注册中心集群 ，实现负载均衡+故障容错</p><h3 id="eureka-server" tabindex="-1"><a class="header-anchor" href="#eureka-server" aria-hidden="true">#</a> Eureka Server</h3><h4 id="修改映射关系" tabindex="-1"><a class="header-anchor" href="#修改映射关系" aria-hidden="true">#</a> 修改映射关系</h4><p>因为在<code>application.yml</code>中需要填写<code>eureka.instance.hostname</code>，这里Server我们搭建两个，7001和7002，为了方便，我们将localhost分别映射为<code>eureka7001.com</code>和<code>eureka7002.com</code></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>127.0.0.1  eureka7001.com\n127.0.0.1  eureka7002.com\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>当映射之后，有时候windows会抽风，会将我们的映射关系注释掉，所以需要注意</p></blockquote><h4 id="修改配置" tabindex="-1"><a class="header-anchor" href="#修改配置" aria-hidden="true">#</a> 修改配置</h4><p>因为我们的<code>Eureka Server</code>存在多个，我们需要让他们能够相互监控着，也就是(两个举例)，7001中有7002,7002中有7001</p>',9),g=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220116222119976.png",data:"aurora"})],-1),h=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220116222153616.png",data:"aurora"})],-1),v=(0,e.uE)('<p>所以最终的配置文件就应该是</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span>\n\n\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">instance</span><span class="token punctuation">:</span>\n    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> eureka7001.com <span class="token comment">#eureka服务端的实例名称</span>\n  <span class="token key atrule">client</span><span class="token punctuation">:</span>\n    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>     <span class="token comment">#false表示不向注册中心注册自己。</span>\n    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>     <span class="token comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span>\n    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>\n      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>\n<span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7002</span>\n\n\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">instance</span><span class="token punctuation">:</span>\n    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> eureka7002.com <span class="token comment">#eureka服务端的实例名称</span>\n  <span class="token key atrule">client</span><span class="token punctuation">:</span>\n    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>     <span class="token comment">#false表示不向注册中心注册自己。</span>\n    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>     <span class="token comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span>\n    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>\n      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>如果只有一个<code>Eureka Server</code>，那么<code>defaultZone</code>就是其本身，比如只有7001，那么<code>defaultZone</code>就是<code>defaultZone: http://eureka7001.com:7001/eureka/</code></p></blockquote><h3 id="eureka-client" tabindex="-1"><a class="header-anchor" href="#eureka-client" aria-hidden="true">#</a> Eureka Client</h3><p>这里我们需要搭建两个<code>Server Provider</code>和一个<code>Consumer</code>，他们三个都需要注册到服务注册中心中（有两个）</p><p>搭建<code>Eureka Client</code>的时候，我们只需要修改<code>application.yml</code>便可以，配置如下，80(consumer)，8001(server provider)，8002(server provider)都是类似的</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>\n<span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span>\n\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service\n  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>\n    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource            <span class="token comment"># 当前数据源操作类型</span>\n    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> org.gjt.mm.mysql.Driver              <span class="token comment"># mysql驱动包</span>\n    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db2019<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-8&amp;useSSL=false</span>\n    <span class="token key atrule">username</span><span class="token punctuation">:</span> root\n    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>\n\n\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">client</span><span class="token punctuation">:</span>\n    <span class="token comment">#表示是否将自己注册进EurekaServer默认为true。</span>\n    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n    <span class="token comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span>\n    <span class="token key atrule">fetchRegistry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>\n      <span class="token comment">#defaultZone: http://localhost:7001/eureka</span>\n      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//eureka7002.com<span class="token punctuation">:</span>7002/eureka  <span class="token comment"># 集群版</span>\n\n<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>\n  <span class="token key atrule">mapperLocations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span>\n  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.atguigu.springcloud.entities    <span class="token comment"># 所有Entity别名类所在包</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><blockquote><p>注意：</p><p>服务消费者，提供者搭建集群的思想，都是使他们的<code>spring.application.name</code>名字相同，所以这里，我们需要保证两个服务提供和的<code>spring.application.name</code>相同</p><p>因为我们搭建了两个<code>Eureka Server</code>，所以这里的<code>eureka.client.service-url.defaultZone</code>需要填三个，同理，有多个<code>Eureka Server</code>，那就填多个</p><p>服务提供者单机版和集群版的区别也就是在这里</p></blockquote><h4 id="启动顺序" tabindex="-1"><a class="header-anchor" href="#启动顺序" aria-hidden="true">#</a> 启动顺序</h4><p>启动顺序也是一个讲究，在启动的时候，我们需要先启动<code>Eureka Server</code>，然后在启动服务提供者，其次才是服务消费者</p><p>最终的服务注册中心的页面如下</p>',12),y=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220116223526195.png",data:"aurora"})],-1),E=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220116223540186.png",data:"aurora"})],-1),f=(0,e._)("h3",{id:"测试",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#测试","aria-hidden":"true"},"#"),(0,e.Uk)(" 测试")],-1),_=(0,e._)("p",null,"那现在全部都搭建完成了，我们单独请求8001和8002的接口都是正常的，那么我们通过服务消费者去调服务提供者的时候，会发生什么呢",-1),x=(0,e._)("p",null,"按理说，有两个服务提供者，8001和8002，那么我们通过消费者去调用，到底最终调用的是哪一个？",-1),S=(0,e._)("ol",null,[(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)("访问"),(0,e._)("code",null,"http://localhost/consumer/payment/get/1")]),(0,e._)("p",null,"能成功，但是无论怎么刷新，都是8001的接口"),(0,e._)("p",null,[(0,e.Uk)("出现这个问题，是因为我们在80中的controller中，restTemplate的url都是写死的，也就是8001的url，这里我们需要修改成"),(0,e._)("code",null,"http://服务提供者名字")]),(0,e._)("p",null,[(0,e.Uk)("这里的服务提供者名字就是"),(0,e._)("code",null,"spring.application.name"),(0,e.Uk)("的名字，但是是大写，像这样"),(0,e._)("code",null,"http://CLOUD-PAYMENT-SERVICE")]),(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220116224030341.png",data:"aurora"})])]),(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)("修改之后，再次发送请求，出现不知道的主机"),(0,e._)("code",null,"http://CLOUD-PAYMENT-SERVICE"),(0,e.Uk)("，这是因为，注册中心中有两个服务提供者，但是消费者去请求的时候，不知道该向这两个中的哪一个发送请求，我们需要设置采用轮训的方法（默认没有），需要在注册"),(0,e._)("code",null,"RestTemplate"),(0,e.Uk)("组件上，加上"),(0,e._)("code",null,"LoadBalanced"),(0,e.Uk)("注解")]),(0,e._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,e._)("pre",{class:"language-java"},[(0,e._)("code",null,[(0,e._)("span",{class:"token annotation punctuation"},"@Bean"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token annotation punctuation"},"@LoadBalanced"),(0,e.Uk)(),(0,e._)("span",{class:"token comment"},"//使用@LoadBalanced注解赋予RestTemplate负载均衡的能力"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"RestTemplate"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"getRestTemplate"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"token keyword"},"return"),(0,e.Uk)(),(0,e._)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e._)("span",{class:"token class-name"},"RestTemplate"),(0,e._)("span",{class:"token punctuation"},"("),(0,e._)("span",{class:"token punctuation"},")"),(0,e._)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br")])])]),(0,e._)("li",null,[(0,e._)("p",null,"测试通过")])],-1),z=(0,e._)("p",null,"Ribbon和Eureka整合后Consumer可以直接调用服务而不用再关心地址和端口号，且该服务还有负载功能了。",-1),w=(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e._)("code",null,"Ribbon"),(0,e.Uk)("也就是"),(0,e._)("code",null,"RestTemplate"),(0,e.Uk)("这个类的名称")])],-1),U=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220116224738760.png",data:"aurora"})],-1),j=(0,e._)("h2",{id:"主机名称和访问信息有ip信息提示",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#主机名称和访问信息有ip信息提示","aria-hidden":"true"},"#"),(0,e.Uk)(" 主机名称和访问信息有IP信息提示")],-1),C=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220116225726564.png",data:"aurora"})],-1),I=(0,e._)("p",null,[(0,e.Uk)("我这里，没有修改前是这样的，主机名称，也就是图中红框部分，我们修改成其他的字符串，比如"),(0,e._)("code",null,"localhost:8002"),(0,e.Uk)("这种，方便以后维护，访问信息有ip提示，就是鼠标移到主机名称上去，我们可以在左下角看到ip地址")],-1),q=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220116230143261.png",data:"aurora"})],-1),R=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220116230206795.png",data:"aurora"})],-1),T=(0,e.uE)('<h2 id="服务发现" tabindex="-1"><a class="header-anchor" href="#服务发现" aria-hidden="true">#</a> 服务发现</h2><p>对于注册进<code>Eureka</code>中的微服务，我们可以通过服务发现来看到服务的信息，这个需要<code>DiscoveryClient</code>类的支持</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/discovery&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getDiscovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> services <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> service <span class="token operator">:</span> services<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;------&gt;{}&quot;</span><span class="token punctuation">,</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> instances <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span>instances<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> map<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',3),A=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220116231905634.png",data:"aurora"})],-1),N=(0,e.uE)('<blockquote><p>这个是很重要的事情</p></blockquote><p>除此之外，我们还需要在对应模块的主启动类上，加入<code>EnableDiscoveryClient</code>注解</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@EnableDiscoveryClient</span> <span class="token comment">//服务发现</span>\n<span class="token annotation punctuation">@SpringBootApplication</span>\n<span class="token annotation punctuation">@EnableEurekaClient</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentService8001</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentService8001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="eureka自我保护" tabindex="-1"><a class="header-anchor" href="#eureka自我保护" aria-hidden="true">#</a> Eureka自我保护</h2><p>保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护。一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务。</p><p>如果在Eureka Server的首页看到以下这段提示，则说明Eureka进入了保护模式： EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY&#39;RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE</p><h3 id="为什么会产生eureka自我保护机制" tabindex="-1"><a class="header-anchor" href="#为什么会产生eureka自我保护机制" aria-hidden="true">#</a> 为什么会产生Eureka自我保护机制？</h3><p>为了防止EurekaClient可以正常运行，但是与EurekaServer网络不通情况下，EurekaServer不会立刻将EurekaClient服务剔除</p><h3 id="什么是自我保护模式" tabindex="-1"><a class="header-anchor" href="#什么是自我保护模式" aria-hidden="true">#</a> 什么是自我保护模式？</h3><p>默认情况下，如果EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销该实例（默认90秒）。但是当网络分区故障发生(延时、卡顿、拥挤)时，微服务与EurekaServer之间无法正常通信，以上行为可能变得非常危险了——因为微服务本身其实是健康的，此时本不应该注销这个微服务。Eureka通过“自我保护模式”来解决这个问题——当EurekaServer节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。</p><p>在自我保护模式中，Eureka Server会保护服务注册表中的信息，不再注销任何服务实例。</p><p>综上，自我保护模式是一种应对网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留）也不盲目注销任何健康的微服务。使用自我保护模式，可以让Eureka集群更加的健壮、稳定。</p><blockquote><p>这个也就是说，当我们的某个已经在注册中心注册的客户端，宕机了，或者因为网络原因不能使用了，该客户端就不能正常的向服务端发送心跳(<code>默认是90秒</code>)，那么服务端没有收到该客户端发送的心跳，其就会进入自我保护模式，也就是不会立马从注册中心中，移除该客户端，会有一个时间，如果再该时间内，客户端还是没有上线，那么服务端才会从注册中心那里移除</p></blockquote>',13),P=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220117140040214.png",data:"aurora"})],-1),L=(0,e._)("p",null,[(0,e.Uk)("关闭或者开启自我保护模式，是通过"),(0,e._)("code",null,"eureka.server.enable-self-preservation=true"),(0,e.Uk)("，在服务端的配置文件中")],-1),D=(0,e._)("p",null,"如果我们关闭之后，那么我们在服务端，就会看到下图这样的效果",-1),Z=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220117140304749.png",data:"aurora"})],-1),B=(0,e._)("p",null,"配置项还有",-1),M=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("code",null,"eureka.instance.lease-renewal-interval-in-seconds=30")]),(0,e._)("li",null,[(0,e._)("code",null,"eureka.instance.lease-expiration-duration-in-seconds=90")])],-1),H={},O=(0,s(83744).Z)(H,[["render",function(n,a){return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,t,l,c,o,r,u,i,k,d,b,m,g,h,v,y,E,f,_,x,S,z,w,U,j,C,I,q,R,T,A,N,P,L,D,Z,B,M],64)}]])}}]);