"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[188],{66677:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-42e321d4",path:"/project/ssm%20crud.html",title:"REST风格的URL",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"什么是rest:",slug:"什么是rest",children:[]},{level:2,title:"实例",slug:"实例",children:[]},{level:2,title:"spring和springmvc",slug:"spring和springmvc",children:[{level:3,title:"use-default-filters设置作用",slug:"use-default-filters设置作用",children:[]},{level:3,title:"spring mvc",slug:"spring-mvc",children:[]}]},{level:2,title:"web.xml配置",slug:"web-xml配置",children:[]},{level:2,title:"mybatis配置",slug:"mybatis配置",children:[]},{level:2,title:"使用步骤",slug:"使用步骤",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},31883:(n,s,a)=>{a.r(s),a.d(s,{default:()=>m});var e=a(66252);const t=(0,e.uE)('<h1 id="rest风格的url" tabindex="-1"><a class="header-anchor" href="#rest风格的url" aria-hidden="true">#</a> REST风格的URL</h1><h2 id="什么是rest" tabindex="-1"><a class="header-anchor" href="#什么是rest" aria-hidden="true">#</a> 什么是rest:</h2><p>REST(英文：Representational State Transfer, 简称REST)描述了一个架构样式的网络系统，比如web应用程序，它首次出现在2000年Roy Fielding的博士论文中，他是HTTP规范的主要编写者之一。在目前主流的三种Web服务交互方案中，REST相比于SOAP（Simple Object Access protocol, 简单对象访问协议）以及XML-RPC更加简单明了，无论是对URL的处理还是Payload的编码，REST都倾向于用更加轻量的方法设计和实现。值得注意的是REST并没有一个明确的标准，而更像是一种设计的风格。</p><p>它本身并没有什么实用性，其核心价值在于如何设计出符合REST风格的网络接口</p><p>restful的优点</p><blockquote><p>它结构清晰，符合标准，易于理解，扩展方便，所以正得到越来越多网站的采用。</p></blockquote><p>restful的特性</p><blockquote><p>资源（Resources）：网络上的一个实体，或者说是网络上的一个具体信息。</p></blockquote><p>它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的存在。可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI即为每个资源的独一无二的标识符。</p><p>表现层（Representation）：把资源具体呈现出来的形式，叫做它的表现层（Representation）。</p><p>比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式。</p><p>状态转换（State Transfer）：每发出一个请求，就代表了客户端和服务器的一次交互过程。</p><p>HTTP协议，是一个无状态协议，即所有的状态都保存在鼓舞段。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生“状态转化“（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化“。具体说，就是HTTP协议里面，四个表示操作方式的动词；GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源，PUT用来更新资源，DELETE用来删除资源。</p><h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h2><ul><li><p>/account/1 HTTP GET：得到id=1的account</p></li><li><p>/account/1 HTTP DELETE：删除id=1的account</p></li><li><p>/account/1 HTTP PUT：更新id=1的account</p></li><li><p>/account HTTP POST：新增account</p></li></ul>',15),l=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210616120511740.png",data:"aurora"})],-1),p=(0,e.uE)('<h1 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h1><h2 id="spring和springmvc" tabindex="-1"><a class="header-anchor" href="#spring和springmvc" aria-hidden="true">#</a> spring和springmvc</h2><p>因为需要使用到spring的配置文件，但是在ssm项目中，spring需要设置视图解析器和bean还有mysql的数据源，连接池等等。</p><p>我们可以将他们一个spring配置文件拆分成两个，其中一个用来设置非web控制器，这样就可以使用配置文件看起来比较清晰</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>控制器部分配置\n&lt;context:component-scan base-package=&quot;vin.cco&quot; use-default-filters=&quot;false&quot;&gt;\n    &lt;!--因为这里配置的组件扫描器的包为vin.cco，会扫描所有的包，所以对这个组件扫描器进行限制--&gt;\n    &lt;!--只扫描Controller包--&gt;\n    &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;\n&lt;/context:component-scan&gt;\n\n&lt;!--配置视图解析器--&gt;\n&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; &gt;\n    &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/view&quot; /&gt;\n    &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;\n&lt;/bean&gt;\n\n&lt;!--将spring不能处理的请求交给tomcat进行处理--&gt;\n&lt;mvc:default-servlet-handler /&gt;\n\n&lt;!--驱动注册--&gt;\n&lt;mvc:annotation-driven /&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><blockquote><p><code>component-scan</code>组件扫描器，设置扫描vin.cco下的所有包</p></blockquote><h3 id="use-default-filters设置作用" tabindex="-1"><a class="header-anchor" href="#use-default-filters设置作用" aria-hidden="true">#</a> use-default-filters设置作用</h3><p>默认的 filter 会扫描所有 @Component 注解修饰的 Java 类，而 @Controller、@Service、@Repository 甚至是 @Configuration 注解都是 @Componet 的衍生注解，所以也会被扫描到。因此，最简单的注解扫描配置就是只配置包路径，而 use-default-filters 属性不需要配置，其值默认为 true，默认是开启的，也就是<code>use-default-filters=&quot;true&quot;</code>，设置<code>use-default-filters=&quot;false&quot;</code>能够将组件扫描关闭</p><h4 id="spring配置" tabindex="-1"><a class="header-anchor" href="#spring配置" aria-hidden="true">#</a> spring配置</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;!-- 配置 IoC 容器的注解扫描的包路径 --&gt;\n&lt;context:component-scan base-package=&quot;com.example&quot;&gt;\n    &lt;!-- 制定扫包规则，不扫描 @Controller 注解修饰的 Java 类，其它还是要扫描 --&gt;\n    &lt;context:exclude-filter type=&quot;annotation&quot;\n                            expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;\n&lt;/context:component-scan&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>exclude-filter</code>是不扫描某个注解修饰的java类，但是其他的注解，是需要扫描的</p><p>因为默认是开启的，也就是<code>use-default-filters=&quot;true&quot;</code>，因为spring不需要扫描<code>@Controller</code>注解，所以需要排除这个注解，最后只会扫描@Component、@Service、@Repository 和@Configuration 注解修饰的 Java 类。</p><h4 id="springmvc配置" tabindex="-1"><a class="header-anchor" href="#springmvc配置" aria-hidden="true">#</a> springmvc配置</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;!-- 配置 IoC 容器的注解扫描的包路径 --&gt;\n&lt;context:component-scan base-package=&quot;com.example&quot; use-default-filters=&quot;false&quot;&gt;\n    &lt;!-- 制定扫包规则，只扫描使用 @Controller 注解修饰的 Java 类 --&gt;\n    &lt;context:include-filter type=&quot;annotation&quot;\n                            expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;\n&lt;/context:component-scan&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>use-default-filters=&quot;false&quot;</code>关闭扫描功能，也就是不会扫描<code>@Component</code>注解及其衍生的注解，但是在<code>include-filter</code>标签有指定了，能够扫描<code>@Controller</code>直接，所以最后，只会扫描 @Controller 注解修饰的 Java 类。</p><h3 id="spring-mvc" tabindex="-1"><a class="header-anchor" href="#spring-mvc" aria-hidden="true">#</a> spring mvc</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;context:property-placeholder location=&quot;classpath:dbconfig.properties&quot; /&gt;\n\n&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot; &gt;\n    &lt;property name=&quot;jdbcUrl&quot; value=&quot;${jdbc.url}&quot; /&gt;\n    &lt;property name=&quot;user&quot; value=&quot;${jdbc.username}&quot; /&gt;\n    &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot; /&gt;\n    &lt;property name=&quot;driverClass&quot; value=&quot;${jdbc.driver}&quot; /&gt;\n&lt;/bean&gt;\n\n&lt;!--组件扫描器，因为这个并不是做web相关的，不是用来处理请求，所以，这里组件扫描器，就设置扫描除了控制器之外的所有类--&gt;\n&lt;context:component-scan base-package=&quot;vin.cco&quot; &gt;\n    &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;\n&lt;/context:component-scan&gt;\n\n&lt;!--配置sqlsession--&gt;\n&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;\n    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;\n    &lt;property name=&quot;configLocation&quot;  value=&quot;classpath:mybatis.xml&quot; /&gt;\n    &lt;!--指定所有dao的mapper文件的路径，这里将所有的mapper文件放在mapper文件中，不放在dao包中--&gt;\n    &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot; /&gt;\n&lt;/bean&gt;\n\n&lt;!--将dao接口加入到容器中--&gt;\n&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;\n    &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot; /&gt;\n    &lt;property name=&quot;basePackage&quot; value=&quot;vin.cco.dao&quot; /&gt;\n&lt;/bean&gt;\n\n&lt;!--事务控制配置--&gt;\n&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot; &gt;\n    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;\n&lt;/bean&gt;\n\n&lt;!--开启基于注解的事务，使用xml配置形成的事务--&gt;\n&lt;aop:config &gt;\n    &lt;!--设置切入点表达式 在service包及其子包中的所有方法，都是切入点--&gt;\n    &lt;aop:pointcut id=&quot;txPointcut&quot; expression=&quot;execution(* vin.cco.service..*(..))&quot;/&gt;\n    &lt;!--配置事务增强--&gt;\n    &lt;aop:advisor advice-ref=&quot;txAdvisor&quot; pointcut-ref=&quot;txPointcut&quot; /&gt;\n&lt;/aop:config&gt;\n\n&lt;!--配置事务增强，事务如何切入 事务和切入点之间的联系是通过transaction-manager进行的 --&gt;\n&lt;tx:advice id=&quot;txAdvisor&quot; transaction-manager=&quot;transactionManager&quot;&gt;\n    &lt;tx:attributes&gt;\n        &lt;!--\n             所有方法都是事务方法 这里的所有方法指的是execution(* vin.cco.service..*(..))\n             切入点表达式中的所有的方法\n             --&gt;\n        &lt;tx:method name=&quot;*&quot;/&gt;\n        &lt;!--以get开始的所有方法  --&gt;\n        &lt;tx:method name=&quot;get*&quot; read-only=&quot;true&quot;/&gt;\n    &lt;/tx:attributes&gt;\n&lt;/tx:advice&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><p>因为需要使用到事务，但是事务，我们可以使用aop来做，这个可以使用注解，也可以使用xml配置的方式，在这里，我们使用的是基于xml的aop设置</p><ul><li>设置切入点表达式</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;aop:config &gt;\n    &lt;!--设置切入点表达式 在service包及其子包中的所有方法，都是切入点--&gt;\n    &lt;aop:pointcut id=&quot;txPointcut&quot; expression=&quot;execution(* vin.cco.service..*(..))&quot;/&gt;\n    &lt;!--配置事务增强--&gt;\n    &lt;aop:advisor advice-ref=&quot;txAdvisor&quot; pointcut-ref=&quot;txPointcut&quot; /&gt;\n&lt;/aop:config&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="web-xml配置" tabindex="-1"><a class="header-anchor" href="#web-xml配置" aria-hidden="true">#</a> web.xml配置</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;!--注册中央调度器--&gt;\n&lt;servlet&gt;\n    &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;classpath:dispatcherContext.xml&lt;/param-value&gt;\n    &lt;/init-param&gt;\n&lt;/servlet&gt;\n\n&lt;servlet-mapping&gt;\n    &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;\n    &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;\n\n&lt;!--处理字符集过滤器--&gt;\n&lt;filter&gt;\n    &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;\n    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;encoding&lt;/param-name&gt;\n        &lt;param-value&gt;utf-8&lt;/param-value&gt;\n    &lt;/init-param&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;forceRequestEncoding&lt;/param-name&gt;\n        &lt;param-value&gt;true&lt;/param-value&gt;\n    &lt;/init-param&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;forceResponseEncoding&lt;/param-name&gt;\n        &lt;param-value&gt;true&lt;/param-value&gt;\n    &lt;/init-param&gt;\n&lt;/filter&gt;\n&lt;filter-mapping&gt;\n    &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;\n    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n\n&lt;!--使用rest风格的uri，使用过滤器将所有的post请求转换为put或者delete请求--&gt;\n&lt;filter&gt;\n    &lt;filter-name&gt;methodFilter&lt;/filter-name&gt;\n    &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;\n&lt;/filter&gt;\n\n&lt;filter-mapping&gt;\n    &lt;filter-name&gt;methodFilter&lt;/filter-name&gt;\n    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p>因为我们需要使用rest风格的url，所以需要使用过滤器拦截所有的请求</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;filter&gt;\n    &lt;filter-name&gt;methodFilter&lt;/filter-name&gt;\n    &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;\n&lt;/filter&gt;\n\n&lt;filter-mapping&gt;\n    &lt;filter-name&gt;methodFilter&lt;/filter-name&gt;\n    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面这个，可以将所有的post请求转换为put请求或者是delete请求</p><h2 id="mybatis配置" tabindex="-1"><a class="header-anchor" href="#mybatis配置" aria-hidden="true">#</a> mybatis配置</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;settings&gt;\n    &lt;!--设置mybatis输出日志--&gt;\n    &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;\n&lt;/settings&gt;\n\n&lt;typeAliases&gt;\n    &lt;package name=&quot;vin.cco.domain&quot;/&gt;\n&lt;/typeAliases&gt;\n下面这个是设置分页插件\n&lt;plugins&gt;\n    &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;\n        &lt;!--分页参数合理化  --&gt;\n        &lt;property name=&quot;reasonable&quot; value=&quot;true&quot;/&gt;\n    &lt;/plugin&gt;\n&lt;/plugins&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h1 id="mybatis逆向工程" tabindex="-1"><a class="header-anchor" href="#mybatis逆向工程" aria-hidden="true">#</a> mybatis逆向工程</h1><p>什么是mybatis逆向工程？</p><p>我们可以先写好表，然后通过mybatis的逆向工程就可以更具数据表完成实体类，dao接口，dao接口映射mapper的xml文件，以及sql语句的创建</p><p>使用步骤</p><ol><li>进入到mybatis generator官网，使用其xml配置文件</li><li>添加mybatis generator依赖</li><li>完成</li></ol><blockquote><p>官网 http://mybatis.org/generator/</p></blockquote><ul><li>配置</li></ul><p>可以使用下面这个配置</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE generatorConfiguration\n        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;\n&lt;generatorConfiguration&gt;\n\n    &lt;!--此文件用于配置mybatis的逆向工程配置文件--&gt;\n    &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;\n        &lt;commentGenerator&gt;\n            &lt;!--为true，表示生成不带注释的--&gt;\n            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&gt;\n        &lt;/commentGenerator&gt;\n        &lt;!-- 配置数据库连接 --&gt;\n        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;\n                        connectionURL=&quot;jdbc:mysql://localhost:3306/ssm_crud&quot; userId=&quot;root&quot;\n                        password=&quot;123456&quot;&gt;\n        &lt;/jdbcConnection&gt;\n\n        &lt;javaTypeResolver&gt;\n            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt;\n        &lt;/javaTypeResolver&gt;\n\n        &lt;!-- 指定javaBean生成的位置 --&gt;\n        &lt;javaModelGenerator targetPackage=&quot;vin.cco.domain&quot;\n                            targetProject=&quot;.\\src\\main\\java&quot;&gt;\n            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;\n            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;\n        &lt;/javaModelGenerator&gt;\n\n        &lt;!--指定sql映射文件生成的位置 --&gt;\n        &lt;sqlMapGenerator targetPackage=&quot;mapper&quot; targetProject=&quot;.\\src\\main\\resources&quot;&gt;\n            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;\n        &lt;/sqlMapGenerator&gt;\n\n        &lt;!-- 指定dao接口生成的位置，mapper接口 --&gt;\n        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot;\n                             targetPackage=&quot;vin.cco.dao&quot; targetProject=&quot;.\\src\\main\\java&quot;&gt;\n            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;\n        &lt;/javaClientGenerator&gt;\n\n\n        &lt;!-- table指定每个表的生成策略 --&gt;\n        &lt;table tableName=&quot;emp_tb&quot; domainObjectName=&quot;Employee&quot;&gt;&lt;/table&gt;\n        &lt;table tableName=&quot;dept_tb&quot; domainObjectName=&quot;Department&quot;&gt;&lt;/table&gt;\n    &lt;/context&gt;\n&lt;/generatorConfiguration&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div>',36),r=(0,e._)("blockquote",null,[(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("p",null,"需要设置数据库连接信息"),(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,'<jdbcConnection driverClass="com.mysql.jdbc.Driver"\n                connectionURL="jdbc:mysql://localhost:3306/ssm_crud" userId="root"\n                password="123456">\n</jdbcConnection>\n')]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br")])])]),(0,e._)("li",null,[(0,e._)("p",null,"设置生成实体类位置"),(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,'<javaModelGenerator targetPackage="vin.cco.domain"\n                    targetProject=".\\src\\main\\java">\n    <property name="enableSubPackages" value="true" />\n    <property name="trimStrings" value="true" />\n</javaModelGenerator>\n')]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"3"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"4"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"5"),(0,e._)("br")])]),(0,e._)("p",null,[(0,e._)("code",null,"targetProject"),(0,e.Uk)("目标工程，会在这个工程下，创建"),(0,e._)("code",null,"targetPackage"),(0,e.Uk)("包，生成的实体类就放在这个 里面")])]),(0,e._)("li",null,[(0,e._)("p",null,"设置生成策略"),(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,'<table tableName="emp_tb" domainObjectName="Employee"></table>\n<table tableName="dept_tb" domainObjectName="Department"></table>\n')]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br"),(0,e._)("span",{class:"line-number"},"2"),(0,e._)("br")])]),(0,e._)("p",null,[(0,e.Uk)("这个就是设置文件的名字等，对于mapper文件，其命名格式为"),(0,e._)("code",null,"domainObjectNameMapper.xml"),(0,e.Uk)("，dao接口为"),(0,e._)("code",null,"domainObjectNameMapper")]),(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/../image-20210616122036803.png",data:"aurora"})])])])],-1),o=(0,e.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//生成的实体类</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> deptId<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">String</span> deptName<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> deptId<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDeptId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> deptId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>deptId <span class="token operator">=</span> deptId<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDeptName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> deptName<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDeptName</span><span class="token punctuation">(</span><span class="token class-name">String</span> deptName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>deptName <span class="token operator">=</span> deptName <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> deptName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>但是除了这个，还会生成几个</p>',2),c=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210616122211793.png",data:"aurora"})],-1),u=(0,e.uE)('<h1 id="使用spring单元测试" tabindex="-1"><a class="header-anchor" href="#使用spring单元测试" aria-hidden="true">#</a> 使用spring单元测试</h1><p>推荐使用spring的单元测试，因为我们可以使用spring容器中的对象，通过自动注入的，或者其他的方式</p><p>使用步骤</p><blockquote><ol><li><p>导入spring-test依赖</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-test&lt;/artifactId&gt;\n    &lt;version&gt;5.3.6&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>@ContextConfiguration指定Spring配置文件的位置</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;classpath:applicationContext.xml&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>那么现在之后，我们就可以直接使用<code> @Autowired</code>注解进行自动注入</p></li></ol></blockquote><h1 id="jsr303字段检验" tabindex="-1"><a class="header-anchor" href="#jsr303字段检验" aria-hidden="true">#</a> JSR303字段检验</h1><p>为了增加数据的安全性，除了前端进行字段校验之外，还需要后端进行字段校验，外加数据库的索引，<code>hibernate-validator</code>提供了字段校验，可以直接使用</p><h2 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤</h2><blockquote><ul><li><p>添加依赖</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.hibernate.validator&lt;/groupId&gt;\n    &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;\n    &lt;version&gt;6.2.0.Final&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>在实体类上添加校验规则</p></li><li><p>在Controller中使用</p></li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">&quot;^[a-z0-9_-]{3,16}$&quot;</span><span class="token punctuation">,</span>message <span class="token operator">=</span> <span class="token string">&quot;用户名必须是3到16位&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">private</span> <span class="token class-name">String</span> empName<span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">&quot;^([a-z0-9_\\\\.-]+)@([\\\\da-z\\\\.-]+)\\\\.([a-z\\\\.]{2,6})$&quot;</span><span class="token punctuation">,</span>\n         message <span class="token operator">=</span> <span class="token string">&quot;邮箱格式不正确&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>@Pattern</code>注解中，可以使用正则表达式，错误消息等配置</p><blockquote><p><code>@Pattern(regexp = &quot;^[a-z0-9_-]{3,16}$&quot;,message = &quot;用户名必须是3到16位&quot;)</code></p><p>使用正则表达式<code>regexp</code>，<code>message</code>是如果校验失败，会出现的错误消息</p></blockquote><p>但是官方提供了一些普遍的校验规格，比如邮箱，可以直接使用<code>@Email</code>便可以，但是推荐使用自己的校验规格</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;/emp&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Msg</span> <span class="token function">saveEmp</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token class-name">Employee</span> employee<span class="token punctuation">,</span> <span class="token class-name">BindingResult</span> result<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">//校验失败，应该返回失败，在模态框中显示校验失败的错误信息</span>\n        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FieldError</span><span class="token punctuation">&gt;</span></span> errors <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getFieldErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FieldError</span> fieldError <span class="token operator">:</span> errors<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;错误的字段名：&quot;</span><span class="token operator">+</span>fieldError<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;错误信息：&quot;</span><span class="token operator">+</span>fieldError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>fieldError<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fieldError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token class-name">Msg</span><span class="token punctuation">.</span><span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token string">&quot;fail&quot;</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;fieldError&quot;</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n        service<span class="token punctuation">.</span><span class="token function">saveEmp</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token class-name">Msg</span><span class="token punctuation">.</span><span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token string">&quot;fail&quot;</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>如果需要使用，那么只需要在需要校验的地方，使用<code>@Valid Employee employee</code>此注解，表明将对该employee对象进行校验</p><p><code>result.hasErrors()</code>能够查看校验是否通过</p><p>上面运行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>错误的字段名：empName\n错误信息：用户名必须是<span class="token number">3</span>到<span class="token number">16</span>位\n错误的字段名：email\n错误信息：邮箱格式不正确\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',17),i=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210621210517533.png",data:"aurora"})],-1),b={},m=(0,a(83744).Z)(b,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,l,p,r,o,c,u,i],64)}]])}}]);