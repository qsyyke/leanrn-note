"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1214],{40717:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5284fbe8",path:"/javaweb/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD.html",title:"java实现文件上传下载",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"技术",slug:"技术",children:[]},{level:2,title:'表单enctype="multipart/from-data"',slug:"表单enctype-multipart-from-data",children:[]},{level:2,title:"步骤",slug:"步骤",children:[{level:3,title:"代码演示",slug:"代码演示",children:[]}]},{level:2,title:"DiskFileItemFactory类",slug:"diskfileitemfactory类",children:[]},{level:2,title:"ServletFileUpload类的使用",slug:"servletfileupload类的使用",children:[]},{level:2,title:"FileItem类",slug:"fileitem类",children:[]},{level:2,title:"多文件的上传",slug:"多文件的上传",children:[]},{level:2,title:"ie或者更低版本浏览器获取文件名的问题",slug:"ie或者更低版本浏览器获取文件名的问题",children:[]},{level:2,title:"关于上传至同一个文件夹，出现同名问题解决",slug:"关于上传至同一个文件夹-出现同名问题解决",children:[]},{level:2,title:"目录分离分析",slug:"目录分离分析",children:[{level:3,title:"目录分离",slug:"目录分离",children:[]}]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},35826:(n,s,a)=>{a.r(s),a.d(s,{default:()=>v});var p=a(66252);const t=(0,p.uE)('<h1 id="java实现文件上传下载" tabindex="-1"><a class="header-anchor" href="#java实现文件上传下载" aria-hidden="true">#</a> java实现文件上传下载</h1><h2 id="技术" tabindex="-1"><a class="header-anchor" href="#技术" aria-hidden="true">#</a> 技术</h2><p>文件上传可以使用的技术：</p><p>JSPSmartUpload：应用在jsp上的文件上传和下载的组件</p><p>FileUpload：应用在java环境上的文件的上传功能</p><p>Servlet3.0：提供文件上传的功能</p><p>Struct2：提供文件上传的功能</p><h1 id="要素" tabindex="-1"><a class="header-anchor" href="#要素" aria-hidden="true">#</a> 要素</h1><p>要将文件上传，需要满足三个要素</p><ol><li><p>表单提交的方式需要使post</p><blockquote><p><code>get请求会长度有限制，post请求长度没有限制</code></p></blockquote></li><li><p>表单中需要有</p><blockquote><p><code>&lt;input type=&quot;file&quot;&gt;</code>元素，而且还需要有<code>name</code>属性和值</p></blockquote></li><li><p>表单<code>enctype=&quot;multipart/from-data&quot;</code></p></li></ol><h1 id="文件上传原理分析" tabindex="-1"><a class="header-anchor" href="#文件上传原理分析" aria-hidden="true">#</a> 文件上传原理分析</h1>',11),e=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210227131710065.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),o=(0,p.uE)('<h2 id="表单enctype-multipart-from-data" tabindex="-1"><a class="header-anchor" href="#表单enctype-multipart-from-data" aria-hidden="true">#</a> 表单<code>enctype=&quot;multipart/from-data&quot;</code></h2><p>表单<code>enctype=&quot;multipart/from-data&quot;</code>不是这个值，默认情况下，上传文件请求体中的数据形式</p><blockquote><div class="language-jsp ext-jsp line-numbers-mode"><pre class="language-jsp"><code>&lt;form action=&quot;&quot; enctype=&quot;application/x-www-form-urlencoded&quot; method=&quot;post&quot;&gt;\n    &lt;span&gt;文件描述:&lt;/span&gt;&lt;input type=&quot;text&quot; name=&quot;file_descript&quot;&gt;&lt;br&gt;\n    &lt;span&gt;文件路径:&lt;/span&gt;&lt;input type=&quot;file&quot; name=&quot;fil&quot;&gt;&lt;br&gt;\n    &lt;button type=&quot;submit&quot;&gt;上传&lt;/button&gt;\n&lt;/form&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></blockquote><p>请求体内容</p><blockquote><p><code>file_descript=aaa&amp;file=fileupload.txt</code></p><p>如果<code>enctype=&quot;application/x-www-form-urlencoded&quot;</code>为默认，那么获取上传文件时，不能获取到文件的内容，只能获取到上传文件的名称</p></blockquote><p><code>当enctype=&quot;multipart/from-data&quot;为这个的时候，进行抓包分析</code></p><p><code>boundary后的值是分割线，在火狐的请求中可以看到数据</code></p>',7),c=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210227133723044.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),l=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210227134034828.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),u=(0,p._)("p",null,[(0,p.Uk)("请求体中的数据都是以"),(0,p._)("code",null,"boundary"),(0,p.Uk)("值作为分割开的")],-1),i=(0,p._)("h1",{id:"开始",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#开始","aria-hidden":"true"},"#"),(0,p.Uk)(" 开始")],-1),r=(0,p._)("h2",{id:"步骤",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#步骤","aria-hidden":"true"},"#"),(0,p.Uk)(" 步骤")],-1),k=(0,p._)("ol",null,[(0,p._)("li",null,[(0,p._)("p",null,"导包"),(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210227135733293.png?x-oss-process=style/pictureProcess1",data:"aurora"})])]),(0,p._)("li",null,[(0,p._)("p",null,"创建磁盘文件项工厂"),(0,p._)("p",null,[(0,p._)("code",null,"Dis")])]),(0,p._)("li",null,[(0,p._)("p",null,"利用核心类解析request，解析后得到多个部分，返回一个list集合，list集合中存储了每个部分的内容(Fileitem文件项)")]),(0,p._)("li",null,[(0,p._)("p",null,"遍历list集合，会得到代表每个部分的文件项的对象，根据文件项判断是否是文件上传项")]),(0,p._)("li",null,[(0,p._)("p",null,"写入到磁盘中")])],-1),d=(0,p.uE)('<h3 id="代码演示" tabindex="-1"><a class="header-anchor" href="#代码演示" aria-hidden="true">#</a> 代码演示</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token keyword">void</span> doPost <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token comment">//1.创建磁盘文件项工厂</span>\n            <span class="token class-name">DiskFileItemFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//2.创建核心解析类</span>\n            <span class="token class-name">ServletFileUpload</span> fileUpload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletFileUpload</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//3.利用核心解析类request，解析后得到多个部分，返回一个list集合</span>\n            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FileItem</span><span class="token punctuation">&gt;</span></span> fileItems <span class="token operator">=</span> fileUpload<span class="token punctuation">.</span><span class="token function">parseRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//4. 遍历fileitems</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FileItem</span> fileItem <span class="token operator">:</span> fileItems<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">//判断这个文件项是否是普通项还是文件上传项</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>fileItem<span class="token punctuation">.</span><span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token comment">//普通项</span>\n                    <span class="token comment">//接收普通项的值，不能使用request.getParameter()</span>\n                    <span class="token comment">//获取名称</span>\n                    <span class="token class-name">String</span> name <span class="token operator">=</span> fileItem<span class="token punctuation">.</span><span class="token function">getFieldName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token comment">//获取值  如果是中文的话，使用有参方法，参数传递编码方式</span>\n                    <span class="token class-name">String</span> value <span class="token operator">=</span> fileItem<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;普通项: &quot;</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">&quot;--&gt;&quot;</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n                    <span class="token comment">//是文件项</span>\n                    <span class="token comment">//获取文件上传项的名称</span>\n                    <span class="token class-name">String</span> name <span class="token operator">=</span> fileItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件项名称:&quot;</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token comment">//获取文件中的数据</span>\n                    <span class="token class-name">InputStream</span> is <span class="token operator">=</span> fileItem<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token comment">//读取输入流并将其写入到磁盘中</span>\n                    <span class="token comment">//获取真实路径</span>\n                    <span class="token class-name">String</span> realPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;/upload&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token class-name">FileOutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>realPath<span class="token operator">+</span><span class="token string">&quot;/&quot;</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                    <span class="token keyword">int</span> read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileUploadException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><blockquote><p><code>必须要保证在request.getServletContext().getRealPath(&quot;/upload&quot;);的upload文件夹中存在至少一个文件，如果这个文件夹中为空，那么不会自动在out目录中创建这个文件夹</code></p></blockquote><h2 id="diskfileitemfactory类" tabindex="-1"><a class="header-anchor" href="#diskfileitemfactory类" aria-hidden="true">#</a> DiskFileItemFactory类</h2><p>构造方法</p><blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">10240</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token keyword">int</span> sizeThreshold<span class="token punctuation">,</span> <span class="token class-name">File</span> repository<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>sizeThreshold <span class="token operator">=</span> <span class="token number">10240</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultCharset <span class="token operator">=</span> <span class="token string">&quot;ISO-8859-1&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>sizeThreshold <span class="token operator">=</span> sizeThreshold<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>repository <span class="token operator">=</span> repository<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>File repository</code>设置临时文件存放的位置</p><p><code>int sizeThreshold</code>是设置缓冲区的大小，默认是10kb，如果上传的文件大于10kb的话，那么就会为这个文件创建一个临时文件，存放的位置为<code>File repository</code>，</p><p>常见临时文件的好处：可以为程序提供连续写入</p></blockquote>',6),m=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210227154121810.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),b=(0,p.uE)('<p>此文件就是一个临时文件，其大小和原文件的大小一样</p><p>可以调用<code>setRepository(File repository)</code>设置临时文件的存放路径，<code>setSizeThreshold(int sizeThreshold)</code>设置缓冲区的大小</p><h2 id="servletfileupload类的使用" tabindex="-1"><a class="header-anchor" href="#servletfileupload类的使用" aria-hidden="true">#</a> ServletFileUpload类的使用</h2><p>方法介绍</p><ol><li><code>public static final boolean isMultipartContent(HttpServletRequest request)</code>静态，返回是否form表单中的是否为<code>enctype=&quot;multipart/form-data&quot;</code></li><li><code> Map&lt;String,List&lt;FileItem&gt;&gt; parseParameterMap(HttpServletRequest request)</code>解析请求体，返回一个map集合</li><li><code>List&lt;FileItem&gt; parseRequest(HttpServletRequest request)</code>解析request，返回一个list集合</li><li><code>setFileSizeMax(long fileSizeMax)</code>设置单个文件的最大，如果某个上传文件超过这个大小，那么就会报错</li><li><code>setHeaderEncoding(String encoding)</code>处理中文乱码的情况，设置字符集编码，也就是上传文件名为中文的情况</li><li><code>setSizeMax(long sizeMax)</code>设置上传文件或者文件夹总共的大小</li><li><code>setProgressListener(ProgressListener pListener)</code>设置文件的监听器，可以通过这个获取文件上传的进度</li></ol><h2 id="fileitem类" tabindex="-1"><a class="header-anchor" href="#fileitem类" aria-hidden="true">#</a> FileItem类</h2><p>这个类是<code>ServletFileUpload</code>对象调用<code>parseRequest(request)</code>获取的，没有构造方法</p><p>返回一个list集合，每一个<code>FileItem</code>对象就是<code>Boundsay</code>分隔开中的值</p>',8),g=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210227165217267.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),h=(0,p.uE)('<p>上图返回的<code>FileItem</code>对象为：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>name<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">StoreLocation</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">0</span> bytes<span class="token punctuation">,</span> isFormField<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">FieldName</span><span class="token operator">=</span>file_descript\nname<span class="token operator">=</span>fileupload<span class="token punctuation">.</span>txt<span class="token punctuation">,</span> <span class="token class-name">StoreLocation</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">18</span> bytes<span class="token punctuation">,</span> isFormField<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">FieldName</span><span class="token operator">=</span>file_path\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol><li><code>isFormField()</code>判断每一个fileitem项是不是普通项，如果是，返回true，否则返回false</li><li><code>getContentType()</code>返回此字段项的MEMI的文件类型，如果是文本<code>&lt;input type=&quot;text&quot; name=&quot;file_descript&quot;&gt;</code>返回null</li><li><code>getFieldName()</code>获取文件项或者普通项的<code>name</code>字段的名称</li><li><code>getName()</code>获取文件项的上传文件名，否则返回null</li><li><code>getString(&quot;utf-8&quot;)</code>获取文件项上传文件的内容，普通项返回空</li></ol><h2 id="多文件的上传" tabindex="-1"><a class="header-anchor" href="#多文件的上传" aria-hidden="true">#</a> 多文件的上传</h2><p>如果一次性想要上传多个文件，那么可以多创建几个<code>type=&quot;file&quot;，fileitem获取到的文件项就是添加的个数</code></p><h2 id="ie或者更低版本浏览器获取文件名的问题" tabindex="-1"><a class="header-anchor" href="#ie或者更低版本浏览器获取文件名的问题" aria-hidden="true">#</a> ie或者更低版本浏览器获取文件名的问题</h2><p>如果使用ie或者是更低的浏览器进行文件的上传，会遇到获取文件名是这种格式的<code>C:\\Users\\chuchen\\Documents\\璐﹀彿淇℃伅鏂囨。\\fileupload.txt</code>，带着路径</p><p>解决方式</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FileItem</span> fileItem <span class="token operator">:</span> fileItems<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">String</span> name <span class="token operator">=</span> fileItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">int</span> i <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//lastIndexOf返回此字符串最后一次出现时的索引,如果找不到，发挥-1</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token comment">//是低版本浏览器</span>\n                    name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="关于上传至同一个文件夹-出现同名问题解决" tabindex="-1"><a class="header-anchor" href="#关于上传至同一个文件夹-出现同名问题解决" aria-hidden="true">#</a> 关于上传至同一个文件夹，出现同名问题解决</h2><p>如果有两个用户，都上传<code>a.txt</code>都同一个文件夹中，那么后面上传的那个的文件，将会替换掉原来最开始上传的那个文件，这是不允许的，可以使用几种方式进行解决</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">UUID</span> uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          \n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>                               \n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    \n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p><code>UUID</code>类的<code>randomUUID()</code>方法可以随机的获取一个字符串形式串，唯一，可以将用户上传的文件，使用这个UUID重新命名，这样就解决了重名的情况</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>f472f687<span class="token operator">-</span>efe7<span class="token operator">-</span><span class="token number">4e3d</span><span class="token operator">-</span><span class="token number">995</span>a<span class="token operator">-</span>e922da7359d0\nf472f687<span class="token operator">-</span>efe7<span class="token operator">-</span><span class="token number">4e3d</span><span class="token operator">-</span><span class="token number">995</span>a<span class="token operator">-</span>e922da7359d0\nf472f687efe74e3d995ae922da7359d0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="目录分离分析" tabindex="-1"><a class="header-anchor" href="#目录分离分析" aria-hidden="true">#</a> 目录分离分析</h2><p>如果用户将上传的文件，全部保存在一个文件夹中，那么就会出现打开的时候，非常卡的情况（如果该目录中的文件，足够多），所以应该合理的分配文件的位置</p><h3 id="目录分离" tabindex="-1"><a class="header-anchor" href="#目录分离" aria-hidden="true">#</a> 目录分离</h3><blockquote><ol><li>按时间分离：按月，周，天，小时</li><li>按用户分离：每一个用户自己有一个文件夹</li><li>按个数分离：只要某个目录中的文件的总个数满足多少个，那么就重新自动创建一个新的目录，但是这样的话，会使程序的运行速度变低，因为每一次上传，后台都会计算当前目录中的文件的个数</li><li>按目录分离算法：这是最高级的分离方式，按照某种算法对用户上传的文件进行分离</li></ol></blockquote><p><code>算法目录分离分析</code></p><blockquote><ol><li>上传一个文件，通过UUID得到一个唯一的新文件名，使用这个<code>新文件名.hasCode()</code>得到一个hascode值，int类型是32位，</li><li>让这个hascode值<code>&amp; 0xf</code>返回的这个值作为一级目录，</li><li>然后让hascode右移4位，然后在<code>&amp; 0xf</code>的值作为二级目录</li><li>以此类推</li></ol></blockquote>',20),f=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210227182015849.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),y=(0,p.uE)('<p>程序算法</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>chu<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>UUID<span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PathUtil</span> <span class="token punctuation">{</span>\n    <span class="token comment">//此类用于返回目录分离的算法路径</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token class-name">UUID_path</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> i <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">UUID_path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//通过唯一文件名获取hascode值</span>\n        <span class="token keyword">int</span> code1 <span class="token operator">=</span> <span class="token class-name">UUID_path</span><span class="token punctuation">(</span><span class="token string">&quot;sd.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//code1 &amp; 0xf  d1为一级目录</span>\n        <span class="token keyword">int</span> d1 <span class="token operator">=</span> code1 <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">;</span>\n        <span class="token comment">//&gt;&gt;&gt;为无符号右移</span>\n        <span class="token keyword">int</span> code2 <span class="token operator">=</span> code1 <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>\n        <span class="token comment">//d2为二级目录</span>\n        <span class="token keyword">int</span> d2 <span class="token operator">=</span> code2 <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;/&quot;</span><span class="token operator">+</span>d1<span class="token operator">+</span><span class="token string">&quot;/&quot;</span><span class="token operator">+</span>d2<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>',2),q={},v=(0,a(83744).Z)(q,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,o,c,l,u,i,r,k,d,m,b,g,h,f,y],64)}]])}}]);