"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1899],{54143:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-ae3569b6",path:"/spring/springboot/%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE.html",title:"spring boot数据访问",lang:"en-US",frontmatter:{tag:["spring","mybatis","mybatis-plus","redis","starter分析","整合"]},excerpt:"",headers:[{level:2,title:"导入依赖",slug:"导入依赖",children:[]},{level:2,title:"分析starter",slug:"分析starter",children:[]},{level:2,title:"自动配置类分析",slug:"自动配置类分析",children:[{level:3,title:"1.DataSourceAutoConfiguration",slug:"_1-datasourceautoconfiguration",children:[]},{level:3,title:"2.DataSourceTransactionManagerAutoConfiguration",slug:"_2-datasourcetransactionmanagerautoconfiguration",children:[]},{level:3,title:"3.JdbcTemplateAutoConfiguration",slug:"_3-jdbctemplateautoconfiguration",children:[]},{level:3,title:"4.XADataSourceAutoConfiguration",slug:"_4-xadatasourceautoconfiguration",children:[]}]},{level:2,title:"配置statviewservlet",slug:"配置statviewservlet",children:[]},{level:2,title:"使用druid的starter",slug:"使用druid的starter",children:[{level:3,title:"依赖分析",slug:"依赖分析",children:[]}]},{level:2,title:"引入starter",slug:"引入starter",children:[]},{level:2,title:"依赖分析",slug:"依赖分析-1",children:[]},{level:2,title:"实例",slug:"实例",children:[{level:3,title:"修改驼峰命名",slug:"修改驼峰命名",children:[]}]},{level:2,title:"注解方式",slug:"注解方式",children:[]},{level:2,title:"注解，xml混合方式",slug:"注解-xml混合方式",children:[]},{level:2,title:"技巧",slug:"技巧",children:[]},{level:2,title:"依赖",slug:"依赖",children:[]},{level:2,title:"分析依赖",slug:"分析依赖",children:[]},{level:2,title:"实例使用",slug:"实例使用",children:[{level:3,title:"报错",slug:"报错",children:[]}]},{level:2,title:"基本crud",slug:"基本crud",children:[]},{level:2,title:"引入starter",slug:"引入starter-1",children:[]},{level:2,title:"分析依赖",slug:"分析依赖-1",children:[{level:3,title:"RedisAutoConfiguration",slug:"redisautoconfiguration",children:[]},{level:3,title:"RedisRepositoriesAutoConfiguration",slug:"redisrepositoriesautoconfiguration",children:[]},{level:3,title:"RedisReactiveAutoConfiguration",slug:"redisreactiveautoconfiguration",children:[]}]},{level:2,title:"操作Redis",slug:"操作redis",children:[{level:3,title:"切换连接工厂",slug:"切换连接工厂",children:[]}]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},30409:(n,s,a)=>{a.r(s),a.d(s,{default:()=>tn});var t=a(66252);const p=(0,t.uE)('<h1 id="spring-boot数据访问" tabindex="-1"><a class="header-anchor" href="#spring-boot数据访问" aria-hidden="true">#</a> spring boot数据访问</h1><h2 id="导入依赖" tabindex="-1"><a class="header-anchor" href="#导入依赖" aria-hidden="true">#</a> 导入依赖</h2><p>因为是一个数据相关的，所以我们就需要导入一个与数据访问相关的starts</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>spring-boot-starter-data-jdbc\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-data-jdbc&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="分析starter" tabindex="-1"><a class="header-anchor" href="#分析starter" aria-hidden="true">#</a> 分析starter</h2><p>此starter会导入</p>',6),e=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210708151425754.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),o=(0,t._)("blockquote",null,[(0,t._)("p",null,[(0,t._)("code",null,"我们除了导入场景以外，还需要导入驱动依赖，因为spring也不知道我们要操作哪种数据库")])],-1),c=(0,t._)("h2",{id:"自动配置类分析",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#自动配置类分析","aria-hidden":"true"},"#"),(0,t.Uk)(" 自动配置类分析")],-1),l=(0,t._)("p",null,"因为导入的是一个spring-boot-starter-data-jdbc的starter，所以我们就需要去自动配置依赖中，找jdbc的自动配置类",-1),u=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210708152648248.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),i=(0,t.uE)('<p>因为导入一个starter后，spring启动的时候，就会自动导入与此starter相关的配置</p><h3 id="_1-datasourceautoconfiguration" tabindex="-1"><a class="header-anchor" href="#_1-datasourceautoconfiguration" aria-hidden="true">#</a> 1.DataSourceAutoConfiguration</h3><p>此配置是哟和数据源相关的</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">EmbeddedDatabaseType</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token string">&quot;io.r2dbc.spi.ConnectionFactory&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">DataSourcePoolMetadataProvidersConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>\n\t\t<span class="token class-name">DataSourceInitializationConfiguration<span class="token punctuation">.</span>InitializationSpecificCredentialsDataSourceInitializationConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>\n\t\t<span class="token class-name">DataSourceInitializationConfiguration<span class="token punctuation">.</span>SharedCredentialsDataSourceInitializationConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceAutoConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>@ConditionalOnMissingBean(type = &quot;io.r2dbc.spi.ConnectionFactory&quot;)</code>是响应式编程</p><p>可以看出，其和配置文件绑定，所以修改DataSource可以在配置文件中，进行修改@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</p><p>从DataSourcePoolMetadataProvidersConfiguration配置类中，可以看出，如果导入这个starter，那么默认使用的数据源是<code>HikariDataSource</code>，因为其他的数据源都爆红，没有导入</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">HikariDataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HikariPoolDataSourceMetadataProviderConfiguration</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token class-name">DataSourcePoolMetadataProvider</span> <span class="token function">hikariPoolDataSourceMetadataProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token class-name">HikariDataSource</span> hikariDataSource <span class="token operator">=</span> <span class="token class-name">DataSourceUnwrapper</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> <span class="token class-name">HikariConfigMXBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>\n                                                                           <span class="token class-name">HikariDataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>hikariDataSource <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HikariDataSourcePoolMetadata</span><span class="token punctuation">(</span>hikariDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="_2-datasourcetransactionmanagerautoconfiguration" tabindex="-1"><a class="header-anchor" href="#_2-datasourcetransactionmanagerautoconfiguration" aria-hidden="true">#</a> 2.DataSourceTransactionManagerAutoConfiguration</h3><p>此配置是和事务相关的</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">TransactionManager</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span><span class="token class-name">Ordered</span><span class="token punctuation">.</span>LOWEST_PRECEDENCE<span class="token punctuation">)</span>\n<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceTransactionManagerAutoConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>此配置也是和@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)绑定</p><p>此配置类，会创建一个DataSourceTransactionManager的bean</p><h3 id="_3-jdbctemplateautoconfiguration" tabindex="-1"><a class="header-anchor" href="#_3-jdbctemplateautoconfiguration" aria-hidden="true">#</a> 3.JdbcTemplateAutoConfiguration</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">JdbcProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">DatabaseInitializationDependencyConfigurer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JdbcTemplateConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>\n\t\t<span class="token class-name">NamedParameterJdbcTemplateConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcTemplateAutoConfiguration</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>和配置文件@ConfigurationProperties(prefix = &quot;spring.jdbc&quot;)绑定</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token annotation punctuation">@Primary</span>\n<span class="token class-name">JdbcTemplate</span> <span class="token function">jdbcTemplate</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">,</span> <span class="token class-name">JdbcProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">JdbcTemplate</span> jdbcTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">JdbcProperties<span class="token punctuation">.</span>Template</span> template <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    jdbcTemplate<span class="token punctuation">.</span><span class="token function">setFetchSize</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">getFetchSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    jdbcTemplate<span class="token punctuation">.</span><span class="token function">setMaxRows</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">getMaxRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">getQueryTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        jdbcTemplate<span class="token punctuation">.</span><span class="token function">setQueryTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> template<span class="token punctuation">.</span><span class="token function">getQueryTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n从这里可以看出，<span class="token class-name">JdbcTemplateAutoConfiguration</span>在容器中，加入一个<span class="token class-name">JdbcTemplate</span>，所以我们可以使用自动注入的方式，并且数据源使用容器中的数据源\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_4-xadatasourceautoconfiguration" tabindex="-1"><a class="header-anchor" href="#_4-xadatasourceautoconfiguration" aria-hidden="true">#</a> 4.XADataSourceAutoConfiguration</h3><p>这是一个分布式事务配置</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@AutoConfigureBefore</span><span class="token punctuation">(</span><span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">TransactionManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">EmbeddedDatabaseType</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span><span class="token class-name">XADataSourceWrapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XADataSourceAutoConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">BeanClassLoaderAware</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>因为我们不是一个分布式项目，所以没有这里的javax.transaction.TransactionManager，所以这个不会被导入</p><h1 id="修改配置项" tabindex="-1"><a class="header-anchor" href="#修改配置项" aria-hidden="true">#</a> 修改配置项</h1><p>我们导入starter后，还需要配置数据源，不然启动会出现错误，会提示我们没有配置</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Description</span><span class="token operator">:</span>\n\n<span class="token class-name">Failed</span> <span class="token keyword">to</span> <span class="token namespace">configure</span> a <span class="token class-name">DataSource</span><span class="token operator">:</span> <span class="token char">&#39;url&#39;</span> attribute is not specified and no embedded datasource could be <span class="token class-name"><span class="token namespace">configured<span class="token punctuation">.</span></span>\n\nReason</span><span class="token operator">:</span> <span class="token class-name">Failed</span> <span class="token keyword">to</span> <span class="token namespace">determine</span> a suitable driver <span class="token keyword">class</span>\n\n\n<span class="token class-name">Action</span><span class="token operator">:</span>\n\n<span class="token class-name">Consider</span> the following<span class="token operator">:</span>\n\t<span class="token class-name">If</span> you want an embedded database <span class="token punctuation">(</span>H2<span class="token punctuation">,</span> HSQL or <span class="token class-name">Derby</span><span class="token punctuation">)</span><span class="token punctuation">,</span> please put it on the <span class="token class-name"><span class="token namespace">classpath<span class="token punctuation">.</span></span>\n\tIf</span> you have database settings <span class="token keyword">to</span> <span class="token namespace">be</span> loaded from a particular profile you may need <span class="token keyword">to</span> <span class="token namespace">activate</span> it <span class="token punctuation">(</span>no profiles are currently active<span class="token punctuation">)</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>\n    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver\n    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/springdb\n    <span class="token key atrule">username</span><span class="token punctuation">:</span> root\n    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>启动之后，我们就可以看到当前使用的数据源</p>',26),r=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210708155814899.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),k=(0,t.uE)('<h1 id="整合druid数据源" tabindex="-1"><a class="header-anchor" href="#整合druid数据源" aria-hidden="true">#</a> 整合druid数据源</h1><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">HikariDataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;spring.datasource.type&quot;</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">&quot;com.zaxxer.hikari.HikariDataSource&quot;</span><span class="token punctuation">,</span>\n                       matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Hikari</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;spring.datasource.hikari&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">HikariDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">HikariDataSource</span> dataSource <span class="token operator">=</span> <span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">,</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            dataSource<span class="token punctuation">.</span><span class="token function">setPoolName</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>因为默认使用的数据源是Hikari，但是使用有一个条件，@ConditionalOnMissingBean(DataSource.class)，所以我们可以直接在容器中，加入我们自己的DataSource，这样就可以替代原来的数据源了，从而使用druid的数据源</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConf</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">DruidDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n但是我们可以将此配置和配置文件的spring<span class="token punctuation">.</span>datasource前缀进行绑定，因为配置文件修改<span class="token class-name">DataSource</span>都和<span class="token class-name">DruidDataSource</span>对应有set方法\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',4),d=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210709083552867.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),b=(0,t._)("p",null,"那么现在我们就已经成功替换到druid的数据源了",-1),m=(0,t._)("h2",{id:"配置statviewservlet",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#配置statviewservlet","aria-hidden":"true"},"#"),(0,t.Uk)(" 配置statviewservlet")],-1),g=(0,t._)("p",null,"druid提供了一个用于监控的页面，我们可以配置之后，进行使用",-1),y=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210709090358278.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),v=(0,t.uE)('<p>详细配置看druid官方https://github.com/alibaba/druid</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConf</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;spring.datasource&quot;</span><span class="token punctuation">)</span>\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">DruidDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            dataSource<span class="token punctuation">.</span><span class="token function">setFilters</span><span class="token punctuation">(</span><span class="token string">&quot;stat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">statViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">StatViewServlet</span> viewServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">ServletRegistrationBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>viewServlet<span class="token punctuation">,</span><span class="token string">&quot;/druid/*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        bean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;loginUsername&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;chuchen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        bean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;loginPassword&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="使用druid的starter" tabindex="-1"><a class="header-anchor" href="#使用druid的starter" aria-hidden="true">#</a> 使用druid的starter</h2><p>依赖</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="依赖分析" tabindex="-1"><a class="header-anchor" href="#依赖分析" aria-hidden="true">#</a> 依赖分析</h3><p>因为这是一个starter，所以我们可以直接分析这个依赖的自动配置DruidDataSourceAutoConfigure</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">DruidDataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@AutoConfigureBefore</span><span class="token punctuation">(</span><span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">DruidStatProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DataSourceProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">DruidSpringAopConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>\n    <span class="token class-name">DruidStatViewServletConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>\n    <span class="token class-name">DruidWebStatFilterConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>\n    <span class="token class-name">DruidFilterConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidDataSourceAutoConfigure</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>需要在此@AutoConfigureBefore(DataSourceAutoConfiguration.class)加载之前，就加载此自动配置项，因为如何在DataSourceAutoConfiguration之后才加载的话，那么就会使用默认的数据源，不会使用druid的数据源</p><ol><li><p>DruidSpringAopConfiguration.class</p><p>监控springbean的配置项</p></li><li><p>DruidStatViewServletConfiguration.class</p><p>和StatView监控页面相关</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">spring.datasource.druid.stat-view-servlet.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true 开启监控页面</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">druid</span><span class="token punctuation">:</span>\n    <span class="token key atrule">stat-view-servlet</span><span class="token punctuation">:</span>\n    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启监控页面</span>\n    <span class="token key atrule">login-password</span><span class="token punctuation">:</span> admin <span class="token comment">#登录密码</span>\n    <span class="token key atrule">login-username</span><span class="token punctuation">:</span> admin <span class="token comment">#登录用户名</span>\n    <span class="token key atrule">reset-enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#启动重置按钮，true表示重置</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>DruidWebStatFilterConfiguration.class</p><p>web监控页面</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@ConditionalOnWebApplication</span>\n<span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;spring.datasource.druid.web-stat-filter.enabled&quot;</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidWebStatFilterConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>DruidFilterConfiguration.class</p><p>所有Druid自己filter的配置</p></li></ol><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>\n    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db_account\n    <span class="token key atrule">username</span><span class="token punctuation">:</span> root\n    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>\n    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver\n\n    <span class="token key atrule">druid</span><span class="token punctuation">:</span>\n      <span class="token key atrule">aop-patterns</span><span class="token punctuation">:</span> com.atguigu.admin.*  <span class="token comment">#监控SpringBean</span>\n      <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span>wall     <span class="token comment"># 底层开启功能，stat（sql监控），wall（防火墙）</span>\n\n      <span class="token key atrule">stat-view-servlet</span><span class="token punctuation">:</span>   <span class="token comment"># 配置监控页功能</span>\n        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n        <span class="token key atrule">login-username</span><span class="token punctuation">:</span> admin\n        <span class="token key atrule">login-password</span><span class="token punctuation">:</span> admin\n        <span class="token key atrule">resetEnable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n\n      <span class="token key atrule">web-stat-filter</span><span class="token punctuation">:</span>  <span class="token comment"># 监控web</span>\n        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n        <span class="token key atrule">urlPattern</span><span class="token punctuation">:</span> /*\n        <span class="token key atrule">exclusions</span><span class="token punctuation">:</span> <span class="token string">&#39;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&#39;</span>\n\n\n      <span class="token key atrule">filter</span><span class="token punctuation">:</span>\n        <span class="token key atrule">stat</span><span class="token punctuation">:</span>    <span class="token comment"># 对上面filters里面的stat的详细配置</span>\n          <span class="token key atrule">slow-sql-millis</span><span class="token punctuation">:</span> <span class="token number">1000</span>\n          <span class="token key atrule">logSlowSql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n        <span class="token key atrule">wall</span><span class="token punctuation">:</span>\n          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n          <span class="token key atrule">config</span><span class="token punctuation">:</span>\n            <span class="token key atrule">drop-table-allow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</p>',12),h=(0,t.Uk)("配置项列表"),f={href:"http://ooszy.cco.vin/img/blog-note/https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"},S=(0,t.Uk)("https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8"),w=(0,t._)("h1",{id:"整合mybatis",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#整合mybatis","aria-hidden":"true"},"#"),(0,t.Uk)(" 整合mybatis")],-1),x=(0,t._)("h2",{id:"引入starter",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#引入starter","aria-hidden":"true"},"#"),(0,t.Uk)(" 引入starter")],-1),C=(0,t._)("p",null,"https://github.com/mybatis/spring-boot-starter",-1),j=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210709102455994.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),q=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210709102523289.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),D=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210709102904600.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),A=(0,t.uE)('<div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="依赖分析-1" tabindex="-1"><a class="header-anchor" href="#依赖分析-1" aria-hidden="true">#</a> 依赖分析</h2>',2),_=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210709102956799.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),P=(0,t.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@org.springframework.context.annotation.Configuration</span>\n<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">SqlSessionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">MybatisProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MybatisLanguageDriverAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisAutoConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>使用mybatis时，我们一般都会使用SqlSessionFactory，SqlSession</p><ul><li><p>全局配置文件</p></li><li><p>SqlSessionFactory: 自动配置好了</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token annotation punctuation">@ConditionalOnMissingBean</span>\n<span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">sqlSessionFactory</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>SqlSession：自动配置了 <strong>SqlSessionTemplate 组合了SqlSession</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token annotation punctuation">@ConditionalOnMissingBean</span>\n<span class="token keyword">public</span> <span class="token class-name">SqlSessionTemplate</span> <span class="token function">sqlSessionTemplate</span><span class="token punctuation">(</span><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>@Import(<strong>AutoConfiguredMapperScannerRegistrar</strong>.<strong>class</strong>）；</p></li><li><p>Mapper： 只要我们写的操作MyBatis的接口标准了 <strong>@Mapper 就会被自动扫描进来</strong></p></li></ul><h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h2><p>我们引入mybatis的starter后，我们还需要写dao层，service层，还需要写一个mapper的映射文件</p><ul><li>dao</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentMapper</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">getStudentById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nservice\n<span class="token annotation punctuation">@Service</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentSer</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token class-name">StudentMapper</span> mapper<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">getStudentById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">getStudentById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\ncontroller<span class="token operator">:</span>\n<span class="token annotation punctuation">@RestController</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentController</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token class-name">StudentSer</span> studentSer<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/student&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Student</span> studentById <span class="token operator">=</span> studentSer<span class="token punctuation">.</span><span class="token function">getStudentById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> studentById<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><ul><li><p>mapper</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace=&quot;vin.cco.qsyyke.mapper.StudentMapper&quot;&gt;\n    &lt;select id=&quot;getStudentById&quot; resultType=&quot;vin.cco.qsyyke.entity.Student&quot; &gt;\n        select * from student where id = #{id}\n    &lt;/select&gt;\n&lt;/mapper&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul><p>我们可以只写mapper的映射文件，mybatis的主配置文件，可以不用写，因为mybatis的配置都已经配置好了，数据源，sqlsessionfactory，sqlsession等等，只需要映射文件就行</p><blockquote><p><code>但是需要在配置文件中，执行映射文件的路径</code></p></blockquote><ul><li><p>修改映射文件路径</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>\n  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/StudentMapper.xml\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h3 id="修改驼峰命名" tabindex="-1"><a class="header-anchor" href="#修改驼峰命名" aria-hidden="true">#</a> 修改驼峰命名</h3>',12),B=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210709143307146.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),E=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210709143318003.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),z=(0,t._)("p",null,"这个是因为，我们没有开启下面这项功能",-1),M=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210709143428316.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),T=(0,t.uE)('<div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>\n  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/StudentMapper.xml\n  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>\n    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="注解方式" tabindex="-1"><a class="header-anchor" href="#注解方式" aria-hidden="true">#</a> 注解方式</h2><p>我们也可以不用xml文件，可以直接使用注解的方式写sql</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">&quot;insert into student (name_id,age) values(#{nameId},#{age})&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>因为表中的字段id是一个自增，我们不用写，但是这样的话，返回给我们的id字段就是0，可以使用一个注解解决</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">&quot;insert into student (name_id,age) values(#{nameId},#{age})&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>useGeneratedKeys <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>keyProperty <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/student&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    studentSer<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> student<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>那么插入成功，返回的时候，就会将插入这条数据之后，id的值，赋值给student对象中的id字段</p>',7),R=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210709150548592.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),I=(0,t.uE)('<h2 id="注解-xml混合方式" tabindex="-1"><a class="header-anchor" href="#注解-xml混合方式" aria-hidden="true">#</a> 注解，xml混合方式</h2><p>注解，xml混合方法就是，在一个mapper接口类中，其中的部分sql执行方法我们可以使用注解的方法，另外的方法可以使用xml的方式（需要在配置文件中，指明mapper.xml文件的位置），但是推荐一直使用xml方式，这样便于维护</p><h2 id="技巧" tabindex="-1"><a class="header-anchor" href="#技巧" aria-hidden="true">#</a> 技巧</h2><p>因为我们每一个dao层中的接口类，都需要写一个<code>@Mapper</code>注解，我们可以直接在主类上，写一个注解，<code>@MapperScan(&quot;vin.cco.qsyyke&quot;)</code>，此注解值就是所有dao接口所在的包</p><h1 id="整合mybatis-plus" tabindex="-1"><a class="header-anchor" href="#整合mybatis-plus" aria-hidden="true">#</a> 整合mybatis-plus</h1><h2 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> 依赖</h2><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="分析依赖" tabindex="-1"><a class="header-anchor" href="#分析依赖" aria-hidden="true">#</a> 分析依赖</h2>',8),O=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210709153011692.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),F=(0,t.uE)('<p>后面那些灰色是，省略的，也就是和我们pom文件相冲突的包</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">MybatisPlusProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MybatisPlusLanguageDriverAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusAutoConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><p>SqlSessionFactory</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token annotation punctuation">@ConditionalOnMissingBean</span>\n<span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">sqlSessionFactory</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>SqlSession</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token annotation punctuation">@ConditionalOnMissingBean</span>\n<span class="token keyword">public</span> <span class="token class-name">SqlSessionTemplate</span> <span class="token function">sqlSessionTemplate</span><span class="token punctuation">(</span><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><p>自动配置其实和mybatis一样</p><ul><li><p>配置文件</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mapperLocations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;classpath*:/mapper/**/*.xml&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Locations of MyBatis mapper files.</p><p>也就是默认的mapper的映射文件是在，静态路径下的mapper下的所有文件夹中的xml问价都是mapper的映射路径</p></li></ul><h2 id="实例使用" tabindex="-1"><a class="header-anchor" href="#实例使用" aria-hidden="true">#</a> 实例使用</h2>',6),U=(0,t.Uk)("官方文档"),J={href:"http://ooszy.cco.vin/img/blog-note/https://baomidou.com/guide/quick-start.html#%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8",target:"_blank",rel:"noopener noreferrer"},H=(0,t.Uk)("快速开始 | MyBatis-Plus (baomidou.com)"),L=(0,t.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在<code>BaseMapper&lt;T&gt;</code>接口中，定义许多基础的增删改查操作，我们可以不用自己写</p>',2),V=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210709160844456.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),W=(0,t.uE)('<p><code>因为我们没有写过sql，实例都是使用baseMapper，其规定，使用的数据表的表名就是和实体类名一样</code>，但是如果后期对数据表更新更改表名，需要使用<code>@TableName(&quot;user&quot;)</code>该注解，指明该实体类对应的表名</p><h3 id="报错" tabindex="-1"><a class="header-anchor" href="#报错" aria-hidden="true">#</a> 报错</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>BadSqlGrammarException</span><span class="token operator">:</span> \n### <span class="token class-name">Error</span> querying <span class="token class-name"><span class="token namespace">database<span class="token punctuation">.</span></span>  Cause</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>SQLSyntaxErrorException</span><span class="token operator">:</span> <span class="token class-name">Unknown</span> column &#39;username<span class="token char">&#39; in &#39;</span>field list&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>出现这个原因是因为，这两个字段在数据库中不存在造成的</p>',4),N=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210709160449226.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),Q=(0,t.uE)('<p>使用mybatis-plus必须要保证实体类中的字段在对应数据表中，存在，但是可以使用解决</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>\n\n<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>\n<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n<span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>\n<span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>@TableField(exist = false)加上此注解，就表明该字段在对应表中，不存在，就可以解决这个问题</p><p>解决之后，成功输出结果</p><h2 id="基本crud" tabindex="-1"><a class="header-anchor" href="#基本crud" aria-hidden="true">#</a> 基本crud</h2>',5),X=(0,t.Uk)("基本的使用，查看官网"),G={href:"http://ooszy.cco.vin/img/blog-note/https://baomidou.com/guide/crud-interface.html#service-crud-%E6%8E%A5%E5%8F%A3",target:"_blank",rel:"noopener noreferrer"},Y=(0,t.Uk)("CRUD 接口 | MyBatis-Plus (baomidou.com)"),K=(0,t.uE)('<h1 id="整合redis" tabindex="-1"><a class="header-anchor" href="#整合redis" aria-hidden="true">#</a> 整合Redis</h1><h2 id="引入starter-1" tabindex="-1"><a class="header-anchor" href="#引入starter-1" aria-hidden="true">#</a> 引入starter</h2><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="分析依赖-1" tabindex="-1"><a class="header-anchor" href="#分析依赖-1" aria-hidden="true">#</a> 分析依赖</h2>',4),Z=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210709220136681.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),$=(0,t._)("p",null,[(0,t._)("code",null,"如何使官方整合的starter，那么他的配置包，都是在下")],-1),nn=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210709220604151.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),sn=(0,t.uE)('<h3 id="redisautoconfiguration" tabindex="-1"><a class="header-anchor" href="#redisautoconfiguration" aria-hidden="true">#</a> RedisAutoConfiguration</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">RedisOperations</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">RedisProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">LettuceConnectionConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JedisConnectionConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisAutoConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class是两个连接工厂，但是通过配置文件可以发现，默认是使用的是Lettuce</p><p>需要配置</p><p>@ConditionalOnProperty(name = &quot;spring.redis.client-type&quot;, havingValue = &quot;lettuce&quot;, matchIfMissing = true)</p></blockquote><ul><li>LettuceConnectionConfiguration添加的bean <ol><li>DefaultClientResources</li><li>LettuceConnectionFactory</li></ol></li></ul><h3 id="redisrepositoriesautoconfiguration" tabindex="-1"><a class="header-anchor" href="#redisrepositoriesautoconfiguration" aria-hidden="true">#</a> RedisRepositoriesAutoConfiguration</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">EnableRedisRepositories</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;spring.data.redis.repositories&quot;</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">&quot;enabled&quot;</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span>\n\t\tmatchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">RedisRepositoryFactoryBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">RedisRepositoriesRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token class-name">RedisAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisRepositoriesAutoConfiguration</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>启动此配置需要配置<code>spring.data.redis.repositories.enabled=true</code></p><h3 id="redisreactiveautoconfiguration" tabindex="-1"><a class="header-anchor" href="#redisreactiveautoconfiguration" aria-hidden="true">#</a> RedisReactiveAutoConfiguration</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">ReactiveRedisConnectionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ReactiveRedisTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token class-name">RedisAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisReactiveAutoConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在数据访问中，以<code>xxTemplate</code>形式的对象，都是执行sql语句，比如JdbcTemplate，ReactiveRedisTemplate，ReactiveStringRedisTemplate</p><p>导入bean</p><ul><li><p>ReactiveRedisTemplate&lt;Object, Object&gt;</p><p>因为Redis中，都是以key和vlue的形式存储，此template执行都是object类型</p></li><li><p>ReactiveStringRedisTemplate</p><p>键和值都是String类型的数据</p></li></ul><h2 id="操作redis" tabindex="-1"><a class="header-anchor" href="#操作redis" aria-hidden="true">#</a> 操作Redis</h2><p>在操作Redis之前，应该配置Redis的连接(这里使用阿里云的Redis)</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span> \n  <span class="token key atrule">redis</span><span class="token punctuation">:</span>\n    <span class="token key atrule">host</span><span class="token punctuation">:</span> redis1202.redis.rds.aliyuncs.com\n    <span class="token key atrule">username</span><span class="token punctuation">:</span> qsyyke\n    <span class="token key atrule">password</span><span class="token punctuation">:</span> qsyyke<span class="token punctuation">:</span>Cqy19981202\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>因为下面两个组件都已经在容器中，所以我们可以直接从容器中拿到</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>\n<span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@Autowired</span>\n<span class="token class-name">ReactiveRedisTemplate</span> reactiveRedisTemplate<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>可以使用下面的方式操作Redis</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ops <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nops<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;chuchen&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;chuchen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="切换连接工厂" tabindex="-1"><a class="header-anchor" href="#切换连接工厂" aria-hidden="true">#</a> 切换连接工厂</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Type</span> of client <span class="token keyword">to</span> <span class="token namespace">use<span class="token punctuation">.</span></span> <span class="token class-name">By</span> <span class="token keyword">default</span><span class="token punctuation">,</span> auto<span class="token operator">-</span>detected according <span class="token keyword">to</span> <span class="token namespace">the</span> classpath<span class="token punctuation">.</span>\n<span class="token keyword">private</span> <span class="token class-name">ClientType</span> clientType<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>从上面可以看出，Redis的默认连接工厂是根据环境变的，也就是如果只提供了lettuce依赖，那么就使用它，如果只提供了Jedis，那么就使用它，但是如果两个都提供，那么我们可以在配置文件中，进行选择，导入spring的redis-stadter，就会导入有lettuce，所以可以默认使用的是lettuce</p><p>jedis依赖</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',24),an={},tn=(0,a(83744).Z)(an,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,e,o,c,l,u,i,r,k,d,b,m,g,y,v,(0,t._)("p",null,[h,(0,t._)("a",f,[S,(0,t.Wm)(a)])]),w,x,C,j,q,D,A,_,P,B,E,z,M,T,R,I,O,F,(0,t._)("p",null,[U,(0,t._)("a",J,[H,(0,t.Wm)(a)])]),L,V,W,N,Q,(0,t._)("p",null,[X,(0,t._)("a",G,[Y,(0,t.Wm)(a)])]),K,Z,$,nn,sn],64)}]])}}]);