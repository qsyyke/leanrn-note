"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1740],{9427:(s,n,e)=>{e.r(n),e.d(n,{data:()=>a});const a={key:"v-1f875f88",path:"/git/commit-standard.html",title:"关于commit message 和change log的编写规范",lang:"en-US",frontmatter:{date:"2021/10/14 21:19",keyword:"git,commit规范,git提交规范,git生成日志,Commit message,Commitizen,validate-commit-msg,conventional-changelog",description:"规范的使用git进行commit提交，并且搭配Commitizen完成提交检验，使用conventional-changelog工具生成提交日志"},excerpt:"",headers:[{level:2,title:"Commit message 的格式",slug:"commit-message-的格式",children:[]},{level:2,title:"Header",slug:"header",children:[{level:3,title:"type",slug:"type",children:[]},{level:3,title:"scope",slug:"scope",children:[]},{level:3,title:"subject",slug:"subject",children:[]}]},{level:2,title:"Body",slug:"body",children:[]},{level:2,title:"Footer",slug:"footer",children:[{level:3,title:"不兼容变动",slug:"不兼容变动",children:[]},{level:3,title:"关闭 Issue",slug:"关闭-issue",children:[]}]},{level:2,title:"Revert",slug:"revert",children:[]},{level:2,title:"Commitizen",slug:"commitizen",children:[{level:3,title:"安装",slug:"安装",children:[]}]},{level:2,title:"validate-commit-msg",slug:"validate-commit-msg",children:[]},{level:2,title:"生成 Change log",slug:"生成-change-log",children:[{level:3,title:"安装",slug:"安装-1",children:[]}]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},39990:(s,n,e)=>{e.r(n),e.d(n,{default:()=>U});var a=e(66252);const t=(0,a.uE)('<h1 id="关于commit-message-和change-log的编写规范" tabindex="-1"><a class="header-anchor" href="#关于commit-message-和change-log的编写规范" aria-hidden="true">#</a> 关于commit message 和change log的编写规范</h1><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>这篇文章是关于如何规范化的编写commit message，以及生成Change log文件的过程，此篇文章是我看<a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank">阮一峰的网络日志</a>之后总结的学习笔记</p></div><p>这几天都在更改主题的bug，其中提交到git是必须的，就查找了git提交的规范，看完我才知道，原来我以前的<code>commit message</code>啥都不是，以前就是随便写commit message，对于一个开发者来说，无论是写代码，还是做其他有关开发的事，一定要遵循规范，这个规范可以是你公司自己的，也可以是其他大家都需要遵循的，如果你写Java，那么你就要遵守阿里巴巴开发规范，其能够让我们养成一种习惯，下面是我学习的笔记，如果有不对的地方，欢迎大家留言指出，一起学习。</p><h2 id="commit-message-的格式" tabindex="-1"><a class="header-anchor" href="#commit-message-的格式" aria-hidden="true">#</a> Commit message 的格式</h2><p>每一次提交，commit message都必须是</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt; // header\n// 空一行\n&lt;body&gt;\n// 空一行\n&lt;footer&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>其中，header是必需的，body和footer可以省略</p></div><h2 id="header" tabindex="-1"><a class="header-anchor" href="#header" aria-hidden="true">#</a> Header</h2><h3 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> type</h3><p><code>type</code>用于说明 commit 的类别</p><p>目前，我使用<code>Commitizen</code>的<code>git cz</code>，可以看到，这个值有11个</p><table><thead><tr><th>type</th><th>description</th></tr></thead><tbody><tr><td>feat</td><td>A new feature(<code>新功能</code>)</td></tr><tr><td>fix</td><td>A bug fix(<code>bug修复</code>)</td></tr><tr><td>style</td><td>Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)(<code>格式，不影响代码运行的变动</code>)</td></tr><tr><td>refactor</td><td>A code change that neither fixes a bug nor adds a feature(<code>代码重构，不是新增功能，也不是修改bug的代码变动</code>)</td></tr><tr><td>perf</td><td>A code change that improves performance(<code>提高代码性能的改变</code>)</td></tr><tr><td>test</td><td>Adding missing tests or correcting existing tests(<code>增加测试</code>)</td></tr><tr><td>build</td><td>Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)(<code>影响构建系统或外部依赖项的更改</code>)</td></tr><tr><td>ci</td><td>Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)(<code>例如脚本的改变</code>)</td></tr><tr><td>chore</td><td>Other changes that don&#39;t modify src or test files(<code>其他修改, 比如构建流程, 依赖管理.</code>)</td></tr><tr><td>revert</td><td>Reverts a previous commit(<code>恢复之前的提交</code>)</td></tr><tr><td>docs</td><td>Documentation only changes(<code>仅仅是文档的更改</code>)</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>如果<code>type</code>为<code>feat</code>和<code>fix</code>，则该 commit 将肯定出现在 Change log 之中。其他情况（<code>docs</code>、<code>chore</code>、<code>style</code>、<code>refactor</code>、<code>test</code>）由你决定，要不要放入 Change log，建议是不要。</p></div><h3 id="scope" tabindex="-1"><a class="header-anchor" href="#scope" aria-hidden="true">#</a> scope</h3><p><code>scope</code>用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><h3 id="subject" tabindex="-1"><a class="header-anchor" href="#subject" aria-hidden="true">#</a> subject</h3><p><code>subject</code>是 commit 目的的简短描述，不超过50个字符。</p><p>关于subject需要遵循以下原则</p><ul><li>以动词开头，使用第一人称现在时，比如<code>change</code>，而不是<code>changed</code>或<code>changes</code></li><li>第一个字母小写</li><li>结尾不加句号（<code>.</code>）</li></ul><p>如果不使用``git cz`，手动写commit message，那么header需要像下面一样(例如一个新功能的增加,影响到view层)</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>feat<span class="token punctuation">(</span>view<span class="token punctuation">)</span>:add a new feature\n\n<span class="token comment">#没有scope</span>\nfeat:add a new feature\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="body" tabindex="-1"><a class="header-anchor" href="#body" aria-hidden="true">#</a> Body</h2><p>Body 部分是对本次 commit 的详细描述，可以分成多行，例如</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>feat<span class="token punctuation">(</span>view<span class="token punctuation">)</span>:add a new feature <span class="token comment">#header</span>\n\nFurther paragraphs come after blank lines. <span class="token comment">#body</span>\n<span class="token comment">#请注意，如果你想要在change log中以li展示body，这里需要空一行</span>\n- Bullet points are okay, too\n- Use a hanging indent\n\nFurther paragraphs come after blank lines. \n\n- Bullet points are okay, too\n- Use a hanging indent\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>有两个注意点。</p><p>（1）使用第一人称现在时，比如使用<code>change</code>而不是<code>changed</code>或<code>changes</code>。</p><p>（2）应该说明代码变动的动机，以及与以前行为的对比。</p></div><p>上面这个在<code>change log</code>文件中，会展示成下图效果</p>',26),o=(0,a._)("details",{class:"custom-container details"},[(0,a._)("summary",null,"点击查看"),(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211014220109861.png?x-oss-process=style/pictureProcess1",data:"aurora"})])],-1),c=(0,a.uE)('<h2 id="footer" tabindex="-1"><a class="header-anchor" href="#footer" aria-hidden="true">#</a> Footer</h2><p>Footer 部分只用于两种情况</p><ul><li><strong>不兼容变动</strong>(<code>BREAKING CHANGE</code>)</li><li><strong>关闭 Issue</strong>(<code>eg Closes #234</code>)</li></ul><h3 id="不兼容变动" tabindex="-1"><a class="header-anchor" href="#不兼容变动" aria-hidden="true">#</a> <strong>不兼容变动</strong></h3><p>如果当前代码与上一个版本不兼容，则 Footer 部分以<code>BREAKING CHANGE</code>开头，后面是对变动的描述、以及变动理由和迁移方法</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>BREAKING CHANGE: isolate scope bindings definition has changed.\n\n    To migrate the code follow the example below:\n\n    Before:\n\n    scope: <span class="token punctuation">{</span>\n      myAttr: <span class="token string">&#39;attribute&#39;</span>,\n    <span class="token punctuation">}</span>\n\n    After:\n\n    scope: <span class="token punctuation">{</span>\n      myAttr: <span class="token string">&#39;@&#39;</span>,\n    <span class="token punctuation">}</span>\n\n    The removed <span class="token variable"><span class="token variable">`</span>inject<span class="token variable">`</span></span> wasn&#39;t generaly useful <span class="token keyword">for</span> directives so there should be no code using it.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="关闭-issue" tabindex="-1"><a class="header-anchor" href="#关闭-issue" aria-hidden="true">#</a> <strong>关闭 Issue</strong></h3><p>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Closes <span class="token comment">#234</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>也支持同时关闭多个issue</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Closes <span class="token comment">#123, #245, #992</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="revert" tabindex="-1"><a class="header-anchor" href="#revert" aria-hidden="true">#</a> Revert</h2><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以<code>revert:</code>开头，后面跟着被撤销 Commit 的 Header。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>revert: feat<span class="token punctuation">(</span>pencil<span class="token punctuation">)</span>: <span class="token function">add</span> <span class="token string">&#39;graphiteWidth&#39;</span> option\n\nThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Body部分的格式是固定的，必须写成<code>This reverts commit &lt;hash&gt;.</code>，其中的<code>hash</code>是被撤销 commit 的 SHA 标识符。</p><p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的<code>Reverts</code>小标题下面。</p><p>上面使用<code>git cz</code>的操作打印结果为</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>feat<span class="token punctuation">(</span>view<span class="token punctuation">)</span>: <span class="token function">add</span> a new featur <span class="token comment">#header</span>\n\n<span class="token function">add</span> user login <span class="token comment">#body</span>\n\n<span class="token comment">#footer</span>\nBREAKING CHANGE: The removed <span class="token variable"><span class="token variable">`</span>inject<span class="token variable">`</span></span> wasn&#39;t generaly useful <span class="token keyword">for</span> directives so there should be no \ncode using it\n<span class="token comment">#footer ---&gt; 关闭#2</span>\n<span class="token comment">#2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="commitizen" tabindex="-1"><a class="header-anchor" href="#commitizen" aria-hidden="true">#</a> Commitizen</h2>',19),p={href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer"},l=(0,a.Uk)("Commitizen"),r=(0,a.Uk)("是一个撰写合格 Commit message 的工具。"),i=(0,a._)("p",null,"其操作界面如下",-1),d=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211014222107313.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),u=(0,a.uE)('<h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> -g commitizen\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>commitizen init cz-conventional-changelog --save --save-exact\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>以后，凡是用到<code>git commit</code>命令，一律改为使用<code>git cz</code>。这时，就会出现选项，用来生成符合格式的 Commit message。</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>如果你使用<code>Git Bash</code>，那么你不能使用键盘上下键进行选择，所以不能使用<code>Git Bash</code>，windows的话，可以使用cmd</p></div><h2 id="validate-commit-msg" tabindex="-1"><a class="header-anchor" href="#validate-commit-msg" aria-hidden="true">#</a> validate-commit-msg</h2>',7),m={href:"https://github.com/kentcdodds/validate-commit-msg",target:"_blank",rel:"noopener noreferrer"},g=(0,a.Uk)("validate-commit-msg"),b=(0,a.Uk)(" 用于检查 Node 项目的 Commit message 是否符合格式。"),h=(0,a.Uk)("它的安装是手动的。首先，拷贝下面这个"),k={href:"https://github.com/kentcdodds/validate-commit-msg/blob/master/index.js",target:"_blank",rel:"noopener noreferrer"},v=(0,a.Uk)("JS文件"),f=(0,a.Uk)("，放入你的代码库。文件名可以取为"),q=(0,a._)("code",null,"validate-commit-msg.js",-1),y=(0,a.Uk)("。"),x=(0,a.Uk)("接着，把这个脚本加入 Git 的 hook。下面是在"),C=(0,a._)("code",null,"package.json",-1),w=(0,a.Uk)("里面使用 "),j={href:"http://npm.im/ghooks",target:"_blank",rel:"noopener noreferrer"},_=(0,a.Uk)("ghooks"),z=(0,a.Uk)("，把这个脚本加为"),A=(0,a._)("code",null,"commit-msg",-1),G=(0,a.Uk)("时运行。"),N=(0,a.uE)('<div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;ghooks&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;commit-msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./validate-commit-msg.js&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>然后，每次<code>git commit</code>的时候，这个脚本就会自动检查 Commit message 是否合格。如果不合格，就会报错。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>INVALID COMMIT MSG: does not match &quot;&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&quot; ! was: edit markdown\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="生成-change-log" tabindex="-1"><a class="header-anchor" href="#生成-change-log" aria-hidden="true">#</a> 生成 Change log</h2><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成</p><p>生成的文档包括以下三个部分</p><ul><li>New features</li><li>Bug fixes</li><li>Breaking changes.</li></ul>',7),E=(0,a._)("details",{class:"custom-container details"},[(0,a._)("summary",null,"view"),(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211014222556607.png?x-oss-process=style/pictureProcess1",data:"aurora"})])],-1),I=(0,a.uE)('<h3 id="安装-1" tabindex="-1"><a class="header-anchor" href="#安装-1" aria-hidden="true">#</a> 安装</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> -g conventional-changelog\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果运行上面命令完成之后，运行</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>conventional-changelog -p angular -i CHANGELOG.md -w\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>报下面错误</p><p>::: danget</p><p>&#39;conventional-changelog&#39; 不是内部或外部命令，也不是可运行的程序 或批处理文件。</p><p>:::</p><p>那么你可以使用下面命令</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> -g conventional-changelog-cli\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>为了方便操作，你可以将以下脚本写在<code>package.json</code>中</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;changelog&quot;</span><span class="token operator">:</span> <span class="token string">&quot;conventional-changelog -p angular -i CHANGELOG.md -s -r 0 &amp;&amp; git add CHANGELOG.md&quot;</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>然后以后，直接运行<code>npm run changelog</code>便可以了</p><p><code>package.json</code>的所有内容如下</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commit&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;conventional-changelog -p angular -i CHANGELOG.md -s -r 0 &amp;&amp; git add CHANGELOG.md&quot;</span><span class="token punctuation">,</span>\n\t<span class="token property">&quot;changelog&quot;</span><span class="token operator">:</span> <span class="token string">&quot;conventional-changelog -p angular -i CHANGELOG.md -w -r 0&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;conventional-changelog&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.1.24&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;cz-conventional-changelog&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.3.0&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;validate-commit-msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.14.0&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;commitizen&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./node_modules/cz-conventional-changelog&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;ghooks&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;commit-msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./validate-commit-msg.js&quot;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>',15),B={},U=(0,e(83744).Z)(B,[["render",function(s,n){const e=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)(a.HY,null,[t,o,c,(0,a._)("p",null,[(0,a._)("a",p,[l,(0,a.Wm)(e)]),r]),i,d,u,(0,a._)("p",null,[(0,a._)("a",m,[g,(0,a.Wm)(e)]),b]),(0,a._)("p",null,[h,(0,a._)("a",k,[v,(0,a.Wm)(e)]),f,q,y]),(0,a._)("p",null,[x,C,w,(0,a._)("a",j,[_,(0,a.Wm)(e)]),z,A,G]),N,E,I],64)}]])}}]);