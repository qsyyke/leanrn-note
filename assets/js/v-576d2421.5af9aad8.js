"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2104],{22330:(n,e,a)=>{a.r(e),a.d(e,{data:()=>c});const c={key:"v-576d2421",path:"/nginx/nginx%E5%AE%9E%E4%BE%8B%E4%B9%8B%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.html",title:"Nginx实战之设置反向代理",lang:"en-US",frontmatter:{date:"2022/1/7 18:40",title:"Nginx实战之设置反向代理"},excerpt:"",headers:[{level:2,title:"反向代理实例一",slug:"反向代理实例一",children:[{level:3,title:"Linux中启动tomcat",slug:"linux中启动tomcat",children:[]},{level:3,title:"修改nginx.conf",slug:"修改nginx-conf",children:[]}]},{level:2,title:"反向代理实例二",slug:"反向代理实例二",children:[{level:3,title:"初始化tomcat",slug:"初始化tomcat",children:[]},{level:3,title:"修改nginx.conf",slug:"修改nginx-conf-1",children:[]}]},{level:2,title:"location 指令说明",slug:"location-指令说明",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},61124:(n,e,a)=>{a.r(e),a.d(e,{default:()=>z});var c=a(66252);const i=(0,c._)("h2",{id:"反向代理实例一",tabindex:"-1"},[(0,c._)("a",{class:"header-anchor",href:"#反向代理实例一","aria-hidden":"true"},"#"),(0,c.Uk)(" 反向代理实例一")],-1),o=(0,c._)("p",null,"最终实现的效果就是如下图这样",-1),l=(0,c._)("p",null,[(0,c._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220107185228644.png",data:"aurora"})],-1),t=(0,c._)("blockquote",null,[(0,c._)("p",null,[(0,c.Uk)("我们直接在浏览器中输入"),(0,c._)("code",null,"www.123.com"),(0,c.Uk)("，那么通过配置nginx反向代理，直接访问Linux中的Tomcat首页，Tomcat的端口为8080")])],-1),s=(0,c._)("h3",{id:"linux中启动tomcat",tabindex:"-1"},[(0,c._)("a",{class:"header-anchor",href:"#linux中启动tomcat","aria-hidden":"true"},"#"),(0,c.Uk)(" Linux中启动tomcat")],-1),r=(0,c._)("p",null,[(0,c._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220107191508755.png",data:"aurora"})],-1),d=(0,c._)("h3",{id:"修改nginx-conf",tabindex:"-1"},[(0,c._)("a",{class:"header-anchor",href:"#修改nginx-conf","aria-hidden":"true"},"#"),(0,c.Uk)(" 修改nginx.conf")],-1),p=(0,c._)("p",null,[(0,c._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220107191553118.png",data:"aurora"})],-1),u=(0,c.uE)('<p>我们可以修改默认的server模块，也可以自己增加一个，这里的<code>server_name</code>自定义名称，在<code>location</code>中，增加<code>proxy_pass http://127.0.0.1:8080</code>，这个<code>proxy_pass</code>就是配置代理转发，也就是nginx监听的是80端口，但是我们配置了将其转发到<code>8080</code>端口</p><p>我们也可以将其转发到百度或者是我们自己的博客网页</p><div class="language-conf ext-conf line-numbers-mode"><pre class="language-conf"><code>location / {\n\troot   html;\n\tproxy_pass http://www.baidu.com;\n\tindex  index.html index.htm;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>但是这里，我将其转发到<code>https</code>时，需要额外设置ssl</p></blockquote><h2 id="反向代理实例二" tabindex="-1"><a class="header-anchor" href="#反向代理实例二" aria-hidden="true">#</a> 反向代理实例二</h2><p>最终实现的效果如下</p>',6),g=(0,c._)("p",null,[(0,c._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220107202733674.png",data:"aurora"})],-1),m=(0,c.uE)('<p>这个也就是我们同时访问<code>9001</code>端口，但是nginx根据访问路径的不同，自动给我们转发到对应的页面</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>这里有一个注意点，比如我们访问<code>192.168.86.142:9001/edu/a.html</code>，转发路径为<code>http://127.0.0.1:8080</code>(<code>127.0.0.1</code>是Linux本机的ip)，那么最终的访问路径为<code>192.168.86.142:8080/edu/a.html</code>，访问<code>192.168.86.142:9001/edu/b.html</code>，最终的访问路径为<code>192.168.86.142:8080/edu/b.html</code>，转发他其实是自动将<code>/edu/a.html</code>自动添加到<code>proxy_pass</code>的最终路径上</p></div><h3 id="初始化tomcat" tabindex="-1"><a class="header-anchor" href="#初始化tomcat" aria-hidden="true">#</a> 初始化tomcat</h3><p>这里需要用到两个tomcat，一个tomcat的端口为<code>8080</code>，另一个tomcat的端口为<code>8081</code></p><h3 id="修改nginx-conf-1" tabindex="-1"><a class="header-anchor" href="#修改nginx-conf-1" aria-hidden="true">#</a> 修改nginx.conf</h3><div class="language-conf ext-conf line-numbers-mode"><pre class="language-conf"><code>server {\n        listen       9001;\n        server_name  192.168.86.142:9001;\n\n        location ~ /edu/ {\n            proxy_pass http://127.0.0.1:8080;\n        }\n\n\n        location ~ /vod/ {\n            proxy_pass http://127.0.0.1:8081;\n        }\n    }\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>location ~ /deu/</code>中的<code>~</code>表示按照正则表达式进行匹配，这里也就是对于所有的，路径中含有<code>/edu/</code>，一定要仔细的写这个匹配的值</p></div>',7),h=(0,c._)("p",null,[(0,c._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220107204140025.png",data:"aurora"})],-1),b=(0,c._)("p",null,[(0,c._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220107204213693.png",data:"aurora"})],-1),x=(0,c._)("h2",{id:"location-指令说明",tabindex:"-1"},[(0,c._)("a",{class:"header-anchor",href:"#location-指令说明","aria-hidden":"true"},"#"),(0,c.Uk)(),(0,c._)("strong",null,"location 指令说明")],-1),_=(0,c._)("p",null,"该指令用于匹配URL。",-1),f=(0,c._)("p",null,[(0,c._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220107204543973.png",data:"aurora"})],-1),v=(0,c.uE)("<ol><li><p><code>=</code>：用于不含正则表达式的uri前，要求请求字符串与uri严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求。</p></li><li><p><code>~</code>：用于表示 uri 包含正则表达式，并且区分大小写。</p></li><li><p><code>~*</code>：用于表示 uri 包含正则表达式，并且不区分大小写。</p></li><li><p><code>^~</code>：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location块中的正则 uri 和请求字符串做匹配。</p></li></ol><p>注意：如果 uri 包含正则表达式，则必须要有<code>~</code>或者<code>~*</code>标识。</p>",2),y={},z=(0,a(83744).Z)(y,[["render",function(n,e){return(0,c.wg)(),(0,c.iD)(c.HY,null,[i,o,l,t,s,r,d,p,u,g,m,h,b,x,_,f,v],64)}]])}}]);