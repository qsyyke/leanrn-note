"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5350],{32323:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-5a82c594",path:"/spring/spring5/mybatis%E5%92%8Cspring%E6%95%B4%E5%90%88.html",title:"mybatis和spring整合开发",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"maven依赖",slug:"maven依赖",children:[]},{level:2,title:"新建配置文件",slug:"新建配置文件",children:[{level:3,title:"spring配置",slug:"spring配置",children:[]}]},{level:2,title:"创建SqlSessionFactory对象",slug:"创建sqlsessionfactory对象",children:[{level:3,title:"测试",slug:"测试",children:[]}]},{level:2,title:"创建dao对象",slug:"创建dao对象",children:[{level:3,title:"大致过程",slug:"大致过程",children:[]},{level:3,title:"测试sql插入",slug:"测试sql插入",children:[]}]},{level:2,title:"通过service执行dao方法",slug:"通过service执行dao方法",children:[]},{level:2,title:"集合properties配置文件一起使用",slug:"集合properties配置文件一起使用",children:[]},{level:2,title:"为何要使用spring的事务控制",slug:"为何要使用spring的事务控制",children:[]},{level:2,title:"spring事务管理",slug:"spring事务管理",children:[]},{level:2,title:"事务管理器",slug:"事务管理器",children:[{level:3,title:"回滚",slug:"回滚",children:[]}]},{level:2,title:"事务定义接口",slug:"事务定义接口",children:[{level:3,title:"五个隔离级别",slug:"五个隔离级别",children:[]},{level:3,title:"七个传播行为",slug:"七个传播行为",children:[]},{level:3,title:"定义了默认事务超时时限",slug:"定义了默认事务超时时限",children:[]}]},{level:2,title:"声明事务管理器对象",slug:"声明事务管理器对象",children:[]},{level:2,title:"使用注解事务",slug:"使用注解事务",children:[]},{level:2,title:"执行的原理",slug:"执行的原理",children:[{level:3,title:"是如何根据rollbackFor异常判断的？",slug:"是如何根据rollbackfor异常判断的",children:[]}]},{level:2,title:"步骤",slug:"步骤",children:[]},{level:2,title:"使用 Spring 的监听器 ContextLoaderListener",slug:"使用-spring-的监听器-contextloaderlistener",children:[]},{level:2,title:"步骤",slug:"步骤-1",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},80978:(n,s,a)=>{a.r(s),a.d(s,{default:()=>A});var t=a(66252);const p=(0,t.uE)('<h1 id="mybatis和spring整合开发" tabindex="-1"><a class="header-anchor" href="#mybatis和spring整合开发" aria-hidden="true">#</a> mybatis和spring整合开发</h1><p>将 MyBatis 与 Spring 进行整合，主要解决的问题就是将 SqlSessionFactory 对象交由 Spring</p><p>来管理。所以，该整合，只需要将 SqlSessionFactory 的对象生成器 SqlSessionFactoryBean 注</p><p>册在 Spring 容器中，再将其注入给 Dao 的实现类即可完成整合。</p><p>实现 Spring 与 MyBatis 的整合常用的方式：扫描的 Mapper 动态代理</p><p>Spring 像插线板一样，mybatis 框架是插头，可以容易的组合到一起。插线板 spring 插</p><p>上 mybatis，两个框架就是一个整体。</p><h2 id="maven依赖" tabindex="-1"><a class="header-anchor" href="#maven依赖" aria-hidden="true">#</a> maven依赖</h2><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token comment">&lt;!--spring依赖--&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token comment">&lt;!--spring事务依赖--&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token comment">&lt;!--mybatis和spring集成的依赖--&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token comment">&lt;!--阿里公司的数据库连接池--&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><p>因为是spring和mybatis的整合，所以我们使用ioc容器进行对象的管理</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这个依赖是mybatis提供的，就是用于spring创建sqlsession等对象使用</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;\n    &lt;version&gt;5.2.5.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;\n    &lt;version&gt;5.2.5.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这两个依赖，是用于执行事务的时候，使用的依赖</p><p>因为mybatis的<code>.xml</code>文件，不是在resource包中，所以还需要一个包含插件，用于能够解析到xml文件</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--所在的目录--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="新建配置文件" tabindex="-1"><a class="header-anchor" href="#新建配置文件" aria-hidden="true">#</a> 新建配置文件</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE configuration\n        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;\n&lt;configuration&gt;\n    &lt;settings&gt;\n        &lt;!--设置mybatis输出日志--&gt;\n        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;\n    &lt;/settings&gt;\n\n    &lt;mappers&gt;\n        &lt;package name=&quot;vin.cco.dao&quot;/&gt;\n    &lt;/mappers&gt;\n&lt;/configuration&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>因为使用到spring和mybatis的整合，所以我们创建配置文件的时候，就不用像mybatis的主配置文件那样复杂</p><p>只需要在配置文件中指明dao的<code>xml</code>文件位置就可以了</p><p><code>&lt;package name=&quot;vin.cco.dao&quot;/&gt;</code>这种写法，就相当于是包含了dao包下的所有的<code>.xml</code>配置文件</p><h1 id="druid的spring配置文档" tabindex="-1"><a class="header-anchor" href="#druid的spring配置文档" aria-hidden="true">#</a> druid的spring配置文档</h1><p>官方配置文档</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>init<span class="token punctuation">&quot;</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>close<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> \n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${jdbc_url}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${jdbc_user}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${jdbc_password}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>filters<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stat<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>maxActive<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>initialSize<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>maxWait<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>6000<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>minIdle<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>timeBetweenEvictionRunsMillis<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>60000<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>minEvictableIdleTimeMillis<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>300000<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>testWhileIdle<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>testOnBorrow<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>testOnReturn<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>poolPreparedStatements<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>maxOpenPreparedStatements<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>asyncInit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p><code>init-method=&quot;init&quot; destroy-method=&quot;close&quot;</code>这个是spring自动会调用的，也就是当spring容器创建这个对象的时候，spring就会自动调用<code>init</code>方法执行初始化，当关闭这个对象的时候，spring就会调用<code>close</code>方法关闭，其实也就是使用连接和使用完连接的时候，因为只有使用druid的时候，就是使用mysql连接，也就是创建对象</p><p><code>&lt;property name=&quot;url&quot; value=&quot;${jdbc_url}&quot; /&gt;</code>这种写法，就相当于是初始化这个对象中的url的属性值，其中value的值，就是这个对象对应属性的值</p><blockquote><ul><li>在上面的配置中，通常你需要配置url、username、password，maxActive这三项。</li><li>Druid会自动跟url识别驱动类名，如果连接的数据库非常见数据库，配置属性driverClassName</li><li>asyncInit是1.1.4中新增加的配置，如果有initialSize数量较多时，打开会加快应用启动时间</li></ul></blockquote><p>所以我们在使用的时候，就可以直接复制三项就可以了，也就是</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>init<span class="token punctuation">&quot;</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>close<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> \n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${jdbc_url}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${jdbc_user}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${jdbc_password}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>需要使用到<code>&lt;property&gt;</code>标签，因为我们使用的是<code>set</code>注入的方式，也就是<code>&lt;property name=&quot;url&quot; value=&quot;${jdbc_url}&quot; /&gt;</code>对应对象中的<code>setUrl()</code>方法</p><h3 id="spring配置" tabindex="-1"><a class="header-anchor" href="#spring配置" aria-hidden="true">#</a> spring配置</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">&quot;</span></span>\n      <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>init<span class="token punctuation">&quot;</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>close<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://localhost:3306/mybatis<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>123456<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>maxActive<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>当我们在配置的时候，idea都会进行提示</p>',33),e=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210522103958880.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),o=(0,t.uE)('<p>当点击<code>name=&quot;url&quot;</code>就可以进入到源码中</p><p>在源码中，其对应的方法为</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token class-name">String</span> jdbcUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>jdbcUrl<span class="token punctuation">,</span> jdbcUrl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inited<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>jdbcUrl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                jdbcUrl <span class="token operator">=</span> jdbcUrl<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">this</span><span class="token punctuation">.</span>jdbcUrl <span class="token operator">=</span> jdbcUrl<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>这个就是使用spring配置druid的过程，也就是使用配置文件管理druid对象的过程</p><h2 id="创建sqlsessionfactory对象" tabindex="-1"><a class="header-anchor" href="#创建sqlsessionfactory对象" aria-hidden="true">#</a> 创建SqlSessionFactory对象</h2><p>因为使用SQLSession对象的话，需要使用<code>SqlSessionFactory</code>对象进行创建</p><p>原生方法创建这个对象是</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SqlSessionFactoryBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SqlSessionFactory</span> factory  <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>但是我们是使用spring和mybatis进行整合，所以此对象的创建，交给ioc进行管理</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>创建SqlSessionFactory对象\n&lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;\n    &lt;property name=&quot;dataSource&quot; ref=&quot;myDataSource&quot; /&gt;\n    &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis.xml&quot; /&gt;\n&lt;/bean&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>因为创建这个<code>SqlSessionFactory</code>对象需要使用到数据库的一些链接信息，而且我们没有在mybatis的主配置文件中写出，因为我们将这个过程交给spring来做</p><p><code>&lt;property name=&quot;dataSource&quot; ref=&quot;myDataSource&quot; /&gt;</code>就可以使用<code>ref</code>使用我们已经配置的连接池的信息</p><p><code>&lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis.xml&quot; /&gt;</code>主配置文件的位置，这个<code>configLocation</code>属性，需要传入一个<code>Resource</code>对象，所以我们需要使用到<code>classpath:</code>后面接的就是mybatis主配置文件的位置</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConfigLocation</span><span class="token punctuation">(</span><span class="token class-name">Resource</span> configLocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>configLocation <span class="token operator">=</span> configLocation<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>现在这个SqlSessionFactory对象就已经创建成功了，spring和mybatis的整合文件模板，基本上都是这个固定形式，只是配置文件的位置的不同，以后可以直接使用</p><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">&quot;applicationContext.xml&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> context<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; ---&gt; &quot;</span><span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>myDataSource <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span>DruidDataSource</span>\nsqlSession <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span></span>DefaultSqlSessionFactory</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>可以看到，成功创建了这两个对象，SqlSessionFactory这个对象是我们获取SQLSession对象需要使用到的，mybatis的创建就是使用这个对象进行获取</p><p>这个配置就是spring和mybatis的一个整合</p><h2 id="创建dao对象" tabindex="-1"><a class="header-anchor" href="#创建dao对象" aria-hidden="true">#</a> 创建dao对象</h2><p>如果要执行sql语句的话，那么就需要使用到一个SQLSession对象，通过这个对象的<code>getMappper()</code>方法可以创建一个dao对象</p><p>原生方法创建SQLSession对象</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SqlSessionFactoryBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SqlSessionFactory</span> factory  <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span>  factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><p>使用spring的方式</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sqlSessionFactoryBeanName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sqlSessionFactory<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>basePackage<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vin.cco.dao<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><p>创建这个对象的作用:</p><blockquote><p>MapperScannerConfigurer:在内部调用getMapper()生成每个dao接口的代理对象。</p></blockquote><p>创建这个对象的过程中，我们需要将创建的<code>SqlSessionFactory</code>对象传入<code>&lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot; /&gt;</code>，在这个对象创建的内部，就已经创建了这个SqlSession对象，需要看源码</p><p>这个<code>MapperScannerConfigurer</code>对象的作用，就是<code>在内部调用getMapper()生成每个dao接口的代理对象</code>，并且<code>&lt;property name=&quot;basePackage&quot; value=&quot;vin.cco.dao&quot; /&gt;</code>标签就是指明这些dao类的位置，然后这个<code>MapperScannerConfigurer</code>对象就会把这个包中的所有的<code>接口</code>都执行一遍，也就是<code>getMapper(***.class)</code>创建这个接口的对象，然后将这些创建的对象存在在容器中</p><p>所以测试</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">&quot;applicationContext.xml&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--------------\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> context<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; ---&gt; &quot;</span><span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>现在dao包中，就只有一个接口</p>',32),c=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210522125843934.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),l=(0,t.uE)('<p>运行结果</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>myDataSource <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span>DruidDataSource</span>\nsqlSessionFactory <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span></span>DefaultSqlSessionFactory</span>\n<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span>MapperScannerConfigurer</span>#<span class="token number">0</span> <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span>MapperScannerConfigurer</span>\nstudentDao <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token keyword">class</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>$<span class="token class-name">Proxy9</span>\n    \n<span class="token comment">//下面的是spring的对象</span>\norg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>internalConfigurationAnnotationProcessor <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>ConfigurationClassPostProcessor</span>\norg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>internalAutowiredAnnotationProcessor <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>AutowiredAnnotationBeanPostProcessor</span>\norg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>internalEventListenerProcessor <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span>EventListenerMethodProcessor</span>\norg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>internalEventListenerFactory <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span>DefaultEventListenerFactory</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>studentDao ---&gt; class com.sun.proxy.$Proxy9</code>这个对象就是<code>dao</code>包中的<code>StudentDao</code>接口的对象，对象的名字不是我们自己定义的，这个是spring自己定义的名字，并且对象的名字就是接口名首字母小写得到的，这是一个代理对象<code>class com.sun.proxy.$Proxy9</code>，并且使用的是jdk的动态代理</p><p>假如我们又新建了一个接口</p>',4),u=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210522130250936.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),i=(0,t.uE)('<p>那么现在执行测试，不用改动spring的配置</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>myDataSource <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span>DruidDataSource</span>\nsqlSessionFactory <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span></span>DefaultSqlSessionFactory</span>\n<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span>MapperScannerConfigurer</span>#<span class="token number">0</span> <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span>MapperScannerConfigurer</span>\norderDao <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token keyword">class</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>$<span class="token class-name">Proxy9</span>\nstudentDao <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token keyword">class</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>$<span class="token class-name">Proxy10</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>自动创建这个dao对象</p><h3 id="大致过程" tabindex="-1"><a class="header-anchor" href="#大致过程" aria-hidden="true">#</a> 大致过程</h3><p>所以，创建dao对象的大致过程就是</p><ol><li>创建数据源</li><li>创建Factory</li><li>获取dao</li></ol><h3 id="测试sql插入" tabindex="-1"><a class="header-anchor" href="#测试sql插入" aria-hidden="true">#</a> 测试sql插入</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">&quot;applicationContext.xml&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">StudentDao</span> dao <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StudentDao</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;studentDao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;chuchen&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2202@qq.com&quot;</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">insertStudentDao</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>成功插入</p><p>需要注意的就是<code>StudentDao dao = (StudentDao) context.getBean(&quot;studentDao&quot;)</code>参数中的bean名字就是接口首字母小写的名字</p><h2 id="通过service执行dao方法" tabindex="-1"><a class="header-anchor" href="#通过service执行dao方法" aria-hidden="true">#</a> 通过service执行dao方法</h2><p>上面过程中，是直接使用dao中的方法执行的，但是我们一般都是通过service进行dao的调用</p><p>那么使用这种方式的时候，就需要创建service对象，这个也是在spring中进行管理的</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vin.cco.service.impl.StudentServiceImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>studentDao<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>因为在执行spring配置文件中的时候，就已经创建了StudentDao对象，所以在这里，我们可以直接引用，通过<code>&lt;property name=&quot;dao&quot; ref=&quot;studentDao&quot; /&gt;</code>的ref</p>',15),r=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210522133313990.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),k=(0,t.uE)('<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">&quot;applicationContext.xml&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">StudentService</span> service <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StudentService</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;myService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">selectAllSer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Student</span><span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span>&#39;chuchen&#39;<span class="token punctuation">,</span> email<span class="token operator">=</span>&#39;<span class="token number">2202</span><span class="token annotation punctuation">@qq.com</span>&#39;<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="集合properties配置文件一起使用" tabindex="-1"><a class="header-anchor" href="#集合properties配置文件一起使用" aria-hidden="true">#</a> 集合properties配置文件一起使用</h2><p>因为在配置数据库连接池的时候，数据库的一些信息都是写在spring配置文件中的，这样会是项目变得难维护，所以可以将他们分开，也就是数据库的信息，单独写在一个配置文件中</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">jdbc.url</span> <span class="token punctuation">=</span> <span class="token attr-value">jdbc:mysql://localhost:3306/mybatis</span>\n<span class="token attr-name">jdbc.username</span> <span class="token punctuation">=</span> <span class="token attr-value">root</span>\n<span class="token attr-name">jdbc.pwd</span> <span class="token punctuation">=</span> <span class="token attr-value">123456</span>\n<span class="token attr-name">jdbc.maxActive</span> <span class="token punctuation">=</span> <span class="token attr-value">20</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;!--引入properties文件--&gt;\n&lt;context:property-placeholder location=&quot;jdbc.properties&quot; /&gt;\n\n&lt;bean id=&quot;myDataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;\n      init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt;\n    &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot; /&gt;\n    &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot; /&gt;\n    &lt;property name=&quot;password&quot; value=&quot;${jdbc.pwd}&quot; /&gt;\n    &lt;property name=&quot;maxActive&quot; value=&quot;${jdbc.maxActive}&quot; /&gt;\n&lt;/bean&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>现在如果需要切换数据库的连接信息，就可以直接在properties文件中进行更改就行</p><h1 id="事务控制" tabindex="-1"><a class="header-anchor" href="#事务控制" aria-hidden="true">#</a> 事务控制</h1><p>spring给我们提供了事务控制的相关类，我们只需要使用就可以了</p><h2 id="为何要使用spring的事务控制" tabindex="-1"><a class="header-anchor" href="#为何要使用spring的事务控制" aria-hidden="true">#</a> 为何要使用spring的事务控制</h2><p>因为如果我们使用的是jdbc，那么我们需要去熟悉这个类的使用过程，还有对于事务的使用过程，如果使用的是mybatis，那么就需要去学习其相关的事务控制类</p><p>这样会让我们学习的成本大大加大，spring已经给我们提供了事务控制的相关类，我们只需要去使用就可以了</p><p>比如我们使用的是mybatis，那么就只需要声明是mybatis就可以，如果使用的是hibernate，那么就只需要声明我们使用的连接数据库使用的是这个就行</p><p>声明之后，我们无论使用什么工具进行事务，都使用spring的事务管理器相关的方法就可以了</p><h2 id="spring事务管理" tabindex="-1"><a class="header-anchor" href="#spring事务管理" aria-hidden="true">#</a> spring事务管理</h2><p>事务原本是数据库中的概念，在 Dao 层。但一般情况下，需要将事务提升到业务层，</p><p>即 Service 层。这样做是为了能够使用事务的特性来管理具体的业务。</p><p>在 Spring 中通常可以通过以下两种方式来实现对事务的管理：</p><blockquote><p>（1）使用 Spring 的事务注解管理事务</p><p>（2）使用 AspectJ 的 AOP 配置管理事务</p></blockquote><h2 id="事务管理器" tabindex="-1"><a class="header-anchor" href="#事务管理器" aria-hidden="true">#</a> 事务管理器</h2><p>事务管理器是 PlatformTransactionManager 接口对象。其主要用于完成事务的提交、回</p><p>滚，及获取事务的状态信息。</p>',22),g=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210522163611212.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),m=(0,t.uE)('<p>PlatformTransactionManager 接口有两个常用的实现类：</p><p>➢ DataSourceTransactionManager：使用 JDBC 或 MyBatis 进行数据库操作时使用。</p><p>➢ HibernateTransactionManager：使用 Hibernate 进行持久化数据时使用。</p><h3 id="回滚" tabindex="-1"><a class="header-anchor" href="#回滚" aria-hidden="true">#</a> 回滚</h3><p>Spring 事务的默认回滚方式是：发生运行时异常和 error 时回滚，发生受查(编译)异常时</p><p>提交。不过，对于受查异常，程序员也可以手工设置其回滚方式。</p><h4 id="回滚时机" tabindex="-1"><a class="header-anchor" href="#回滚时机" aria-hidden="true">#</a> 回滚时机</h4><ul><li>当你的业务方法，执行成功，没有异常抛出，当方法执行完毕，spring在方法执行后提交事务。事务管理器commit</li><li>当你的业务方法抛出运行时异常或ERROR， spring执行回滚，调用事务管理器的rollback 运行时异常的定义： RuntimeException 和他的子类都是运行时异常， 例如NullPointException , NumberFormatException</li><li>当你的业务方法抛出非运行时异常， 主要是受查异常时，提交事务，受查异常：在你写代码中，必须处理的异常。例如IOException, SQLException</li></ul><p>为何发生受查异常还会提交事务</p><h2 id="事务定义接口" tabindex="-1"><a class="header-anchor" href="#事务定义接口" aria-hidden="true">#</a> 事务定义接口</h2><p>事务定义接口 TransactionDefinition 中定义了事务描述相关的三类常量：事务隔离级别、</p><p>事务传播行为、事务默认超时时限，及对它们的操作</p><h3 id="五个隔离级别" tabindex="-1"><a class="header-anchor" href="#五个隔离级别" aria-hidden="true">#</a> 五个隔离级别</h3><p>这些常量均是以 ISOLATION_开头。即形如 ISOLATION_XXX。</p><p>➢ DEFAULT：采用 DB 默认的事务隔离级别。MySql 的默认为 REPEATABLE_READ； Oracle</p><p>默认为 READ_COMMITTED。</p><p>➢ READ_UNCOMMITTED：读未提交。未解决任何并发问题。</p><p>➢ READ_COMMITTED：读已提交。解决脏读，存在不可重复读与幻读。</p><p>➢ REPEATABLE_READ：可重复读。解决脏读、不可重复读，存在幻读</p><p>➢ SERIALIZABLE：串行化。不存在并发问题</p><h3 id="七个传播行为" tabindex="-1"><a class="header-anchor" href="#七个传播行为" aria-hidden="true">#</a> 七个传播行为</h3><p>所谓事务传播行为是指，处于不同事务中的方法在相互调用时，执行期间事务的维护情</p><p>况。如，A 事务中的方法 doSome()调用 B 事务中的方法 doOther()，在调用执行期间事务的</p><p>维护情况，就称为事务传播行为。事务传播行为是加在方法上的。</p><p>事务传播行为常量都是以 PROPAGATION_ 开头，形如 PROPAGATION_XXX。</p><blockquote><p><code>**PROPAGATION_REQUIRED**</code></p><p><code>**PROPAGATION_REQUIRES_NEW**</code></p><p><code>**PROPAGATION_SUPPORTS**</code></p><p>PROPAGATION_MANDATORY</p><p>PROPAGATION_NESTED</p><p>PROPAGATION_NEVER</p><p>PROPAGATION_NOT_SUPPORTED</p></blockquote><p>标红的三个传播行为是项目中经常需要使用到的</p><h4 id="propagation-required" tabindex="-1"><a class="header-anchor" href="#propagation-required" aria-hidden="true">#</a> <strong>PROPAGATION_REQUIRED</strong></h4><p>指定的方法必须在事务内执行。若当前存在事务，就加入到当前事务中；若当前没有事</p><p>务，则创建一个新事务。这种传播行为是最常见的选择，也是 Spring 默认的事务传播行为。</p><p>如该传播行为加在 doOther()方法上。若 doSome()方法在调用 doOther()方法时就是在事</p><p>务内运行的，则 doOther()方法的执行也加入到该事务内执行。若 doSome()方法在调用</p><p>doOther()方法时没有在事务内执行，则 doOther()方法会创建一个事务，并在其中执行。</p>',33),d=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210522164141529.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),b=(0,t._)("h4",{id:"propagation-supports",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#propagation-supports","aria-hidden":"true"},"#"),(0,t.Uk)(),(0,t._)("strong",null,"PROPAGATION_SUPPORTS")],-1),q=(0,t._)("p",null,"指定的方法支持当前事务，但若当前没有事务，也可以以非事务方式执行。",-1),v=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210522164209329.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),y=(0,t._)("h4",{id:"propagation-requires-new",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#propagation-requires-new","aria-hidden":"true"},"#"),(0,t.Uk)(),(0,t._)("strong",null,"PROPAGATION_REQUIRES_NEW")],-1),x=(0,t._)("p",null,"总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕。",-1),h=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210522164236276.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),S=(0,t.uE)('<h3 id="定义了默认事务超时时限" tabindex="-1"><a class="header-anchor" href="#定义了默认事务超时时限" aria-hidden="true">#</a> <strong>定义了默认事务超时时限</strong></h3><p>常量 TIMEOUT_DEFAULT 定义了事务底层默认的超时时限，sql 语句的执行时长。</p><p>注意，事务的超时时限起作用的条件比较多，且超时的时间计算点较复杂。所以，该</p><p>值一般就使用默认值即可。</p><h1 id="spring开启事务" tabindex="-1"><a class="header-anchor" href="#spring开启事务" aria-hidden="true">#</a> spring开启事务</h1><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaleBuySerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SaleBuySer</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">SaleDao</span> saleDao<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">GoodsDao</span> goodsDao<span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     *\n     * <span class="token keyword">@author</span> chuchen\n     * <span class="token keyword">@date</span> 2021/5/22 19:49\n     * <span class="token keyword">@param</span> <span class="token parameter">gid</span> gid 购买商品的id\n     * <span class="token keyword">@param</span> <span class="token parameter">nums</span> nums 购买商品的数量\n     * <span class="token keyword">@return</span> int\n     */</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> insertSaleDao <span class="token punctuation">(</span><span class="token keyword">int</span> gid<span class="token punctuation">,</span> <span class="token keyword">int</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Sale</span> sale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sale</span><span class="token punctuation">(</span>gid<span class="token punctuation">,</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        saleDao<span class="token punctuation">.</span><span class="token function">insertSaleDao</span><span class="token punctuation">(</span>sale<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Goods</span> goods <span class="token operator">=</span> goodsDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>gid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>goods <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">&quot;编号为: &quot;</span><span class="token operator">+</span>gid<span class="token operator">+</span><span class="token string">&quot; 不存在商品&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>goods<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">&quot;编号为: &quot;</span><span class="token operator">+</span>gid<span class="token operator">+</span><span class="token string">&quot; 库存不足&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token class-name">Goods</span> buyGoods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        buyGoods<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>gid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        buyGoods<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        goodsDao<span class="token punctuation">.</span><span class="token function">updateGoodsDao</span><span class="token punctuation">(</span>buyGoods<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> setSaleDao <span class="token punctuation">(</span><span class="token class-name">SaleDao</span> saleDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>saleDao <span class="token operator">=</span> saleDao<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> setGoodsDao <span class="token punctuation">(</span><span class="token class-name">GoodsDao</span> goodsDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>goodsDao <span class="token operator">=</span> goodsDao<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">&quot;applicationContext.xml&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">SaleBuySer</span> ser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SaleBuySer</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;myService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ser<span class="token punctuation">.</span><span class="token function">insertSaleDao</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3420</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="声明事务管理器对象" tabindex="-1"><a class="header-anchor" href="#声明事务管理器对象" aria-hidden="true">#</a> 声明事务管理器对象</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;bean id=&quot;transactionManager&quot;\n      class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot; &gt;\n    &lt;property name=&quot;dataSource&quot; ref=&quot;myDataSource&quot; /&gt;\n&lt;/bean&gt;\n&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot; /&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>&lt;bean id=&quot;transactionManager&quot;&gt;</code>声明一个事务管理器，这里需要使用到数据库的一些链接信息，因为需要声明使用的是哪种数据库，这里直接引用链接池的信息</p><p><code>&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot; /&gt;</code>开启事务注解驱动，只有声明这个之后，我们才可以成功使用注解事务，<code>transaction-manager</code>值就是事务管理器的id，声明这个很容器出错，因为<code>tx:annotation-driven</code>存在好几个相同的标签，使用的时候，一定需要直接，约束文件后面有一个tx</p>',11),f=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210522211356816.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),_=(0,t.uE)('<p>使用最后一个就没有错</p><h2 id="使用注解事务" tabindex="-1"><a class="header-anchor" href="#使用注解事务" aria-hidden="true">#</a> 使用注解事务</h2><p>通过@Transactional 注解方式，可将事务织入到相应 public 方法中，实现事务管理。</p><p>@Transactional 的所有可选属性如下所示：</p><p>➢ propagation：用于设置事务传播属性。该属性类型为 Propagation 枚举，默认值为Propagation.REQUIRED。</p><p>➢ isolation：用于设置事务的隔离级别。该属性类型为 Isolation 枚举，默认值为</p><p>Isolation.DEFAULT。</p><p>➢ readOnly：用于设置该方法对数据库的操作是否是只读的。该属性为 boolean，默认值</p><p>为 false。</p><p>➢ timeout：用于设置本操作与数据库连接的超时时限。单位为秒，类型为 int，默认值为</p><p>-1，即没有时限。</p><p>➢ rollbackFor：指定需要回滚的异常类。类型为 Class[]，默认值为空数组。当然，若只有</p><p>一个异常类时，可以不使用数组。</p><p>➢ rollbackForClassName：指定需要回滚的异常类类名。类型为 String[]，默认值为空数组。</p><p>当然，若只有一个异常类时，可以不使用数组。</p><p>➢ noRollbackFor：指定不需要回滚的异常类。类型为 Class[]，默认值为空数组。当然，若</p><p>只有一个异常类时，可以不使用数组。</p><p>➢ noRollbackForClassName：指定不需要回滚的异常类类名。类型为 String[]，默认值为空</p><p>数组。当然，若只有一个异常类时，可以不使用数组。</p><blockquote><p>需要注意的是，@Transactional 若用在方法上，只能用于 public 方法上。对于其他非 public</p><p>方法，如果加上了注解@Transactional，虽然 Spring 不会报错，但不会将指定事务织入到该</p><p>方法中。因为 Spring 会忽略掉所有非 public 方法上的@Transaction 注解。</p><p>若@Transaction 注解在类上，则表示该类上所有的方法均将在执行时织入事务</p></blockquote><p><strong>实现注解的事务步骤：</strong></p><p><strong>复制</strong> <strong>trans_sale</strong> <strong>项目，新项目</strong> <strong>trans_sale_annotation</strong></p><p>使用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>\n    propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span>\n    isolation <span class="token operator">=</span> <span class="token class-name">Isolation</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">,</span>\n    rollbackFor <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">MyException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">NotFoundException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Override</span>\n<span class="token keyword">public</span> <span class="token keyword">int</span> insertSaleDao <span class="token punctuation">(</span><span class="token keyword">int</span> gid<span class="token punctuation">,</span> <span class="token keyword">int</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Sale</span> sale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sale</span><span class="token punctuation">(</span>gid<span class="token punctuation">,</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    saleDao<span class="token punctuation">.</span><span class="token function">insertSaleDao</span><span class="token punctuation">(</span>sale<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这个就是事务注解</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>\n    propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span>\n    isolation <span class="token operator">=</span> <span class="token class-name">Isolation</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">,</span>\n    rollbackFor <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">MyException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">NotFoundException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>propagation = Propagation.REQUIRED</code>声明传播行为</p><p><code>isolation = Isolation.DEFAULT</code>声明事务类型</p><p><code>rollbackFor = {NullPointerException.class,MyException.class, NotFoundException.class}</code>声明哪些异常触发回滚，可以看上面</p><p>因为上面的这个注解使用的就是默认值，所以我们可以直接写这个注解就可以了</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>\n    propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span>\n    isolation <span class="token operator">=</span> <span class="token class-name">Isolation</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">,</span>\n    rollbackFor <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">MyException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">NotFoundException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Override</span>\n<span class="token keyword">public</span> <span class="token keyword">int</span> insertSaleDao <span class="token punctuation">(</span><span class="token keyword">int</span> gid<span class="token punctuation">,</span> <span class="token keyword">int</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Sale</span> sale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sale</span><span class="token punctuation">(</span>gid<span class="token punctuation">,</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    saleDao<span class="token punctuation">.</span><span class="token function">insertSaleDao</span><span class="token punctuation">(</span>sale<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Goods</span> goods <span class="token operator">=</span> goodsDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>gid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>goods <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">&quot;编号为: &quot;</span><span class="token operator">+</span>gid<span class="token operator">+</span><span class="token string">&quot; 不存在商品&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>goods<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">&quot;编号为: &quot;</span><span class="token operator">+</span>gid<span class="token operator">+</span><span class="token string">&quot; 库存不足&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token class-name">Goods</span> buyGoods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    buyGoods<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>gid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    buyGoods<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    goodsDao<span class="token punctuation">.</span><span class="token function">updateGoodsDao</span><span class="token punctuation">(</span>buyGoods<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>',31),w=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210522211932994.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),E=(0,t.uE)('<p>如果这里发生了异常，那么尽管已经插入了数据，那么也会触发回滚操作</p><h2 id="执行的原理" tabindex="-1"><a class="header-anchor" href="#执行的原理" aria-hidden="true">#</a> 执行的原理</h2><p>其原理就使用到了切面通知中的环绕通知，其代码可以理解成下面这种</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token comment">//需要执行的代码</span>\n        <span class="token function">comit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//异常</span>\n        <span class="token function">roolback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>只是这个过程是spring在内部就帮我们实现了</p><h3 id="是如何根据rollbackfor异常判断的" tabindex="-1"><a class="header-anchor" href="#是如何根据rollbackfor异常判断的" aria-hidden="true">#</a> 是如何根据rollbackFor异常判断的？</h3><p>首先，如果发生了异常，那么就会检查这个异常是否在<code>rollbackFor</code>数组中（不管这个异常是什么异常，受检异常还是运行时异常），如果这个异常在这个数组中，那么就会执行回滚</p><p>如果这个发生的异常，没有在这个数组中，那么会检查这个异常的类型，如果这个异常是一个运行时异常，那么就执行回滚，如果不是，那么就忽略</p><h1 id="使用aspectj开启事务" tabindex="-1"><a class="header-anchor" href="#使用aspectj开启事务" aria-hidden="true">#</a> 使用aspectj开启事务</h1><p>对于大型的项目，我们不可能为每一个方法都添加一个注解，这样会变得特别笨拙，而且还会使修改非常麻烦，因为如果我们想要修改的话，就必须找到需要修改的注解所在的方法和类，这并不是一件容易的事情，所以，将他们分离开来，修改的时候，将是一件容易的事情，我们只需要在配置文件中，找到那个方法就可以了</p><h2 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤" aria-hidden="true">#</a> 步骤</h2><ol><li><p>要使用的是aspectj框架，需要加入依赖</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>声明事务管理器对象</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>transactionManager<span class="token punctuation">&quot;</span></span>\n<span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myDataSource<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ol><p>声明方法需要的事务类型（配置方法的事务属性【隔离级别，传播行为，超时】）</p><p>这个是使用<code>&lt;tx:advice&gt;</code>标签</p><ol><li><p><code>&lt;tx:advice&gt;</code></p><ul><li>id:自定义名称，表示<code>&lt;tx:advice&gt;</code> 和 <code>&lt;/tx:advice&gt;</code>之间的配置内容的</li><li>transaction-manager:事务管理器对象的id</li></ul></li><li><p><code>&lt;tx:attributes&gt;</code></p><p>tx:attributes：配置事务属性</p></li></ol><p>在这个<code>tx:attributes</code>中，可以指明哪些方法使用事务，<code> &lt;tx:method name=&quot;insertSaleDao&quot;&gt;</code>配置方法</p><ol start="3"><li><code> &lt;tx:method name=&quot;insertSaleDao&quot;&gt;</code><ul><li>``name`就是方法名，不用加括号</li><li><code>isolation</code>隔离级别</li><li><code>rollback-for</code>哪些异常回滚，如果是运行时异常，一定回滚，多个使用逗号分隔开</li><li><code>propagation</code>传播行为</li></ul></li></ol><p>方法名，可以使用通配符，但是如果想要使用通配符的话，就必须命名规范，有一定的格式</p><p><code>&lt;tx:method name=&quot;add*&quot; propagation=&quot;REQUIRES_NEW&quot; /&gt;</code>表示所有的以<code>add</code>开头的方法</p><p><code>&lt;tx:method name=&quot;*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot; /&gt;</code>所有方法（配置的包中，类中）</p><p>级别：</p><ul><li><code> &lt;tx:method name=&quot;insertSaleDao&quot;&gt;</code>级别最高，指定确切方法名</li><li><code>&lt;tx:method name=&quot;add*&quot; /&gt;</code>这个通配符的等级比上一个低</li><li><code> &lt;tx:method name=&quot;*&quot; /&gt;</code>最低</li></ul><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myAdvice<span class="token punctuation">&quot;</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>transactionManager<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertSaleDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">isolation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>DEFAULT<span class="token punctuation">&quot;</span></span>\n                   <span class="token attr-name">rollback-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.lang.NullPointerException,vin.cco.excep.MyException<span class="token punctuation">&quot;</span></span>\n                   <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>REQUIRED<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>add*<span class="token punctuation">&quot;</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>REQUIRES_NEW<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n        <span class="token comment">&lt;!--指定修改方法--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>modify*<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n        <span class="token comment">&lt;!--删除方法--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>remove*<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n        <span class="token comment">&lt;!--查询方法，query，search，find--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>*<span class="token punctuation">&quot;</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SUPPORTS<span class="token punctuation">&quot;</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>​</p><ol start="4"><li><p>配置aop：指定哪些哪类要创建代理。</p><p>因为上一步，就指定了哪些方法添加事务，但是还不知道是哪些包，哪些类中的方法，这一步就是为这些方法绑定类</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myPoint<span class="token punctuation">&quot;</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>execution(* *..service..*.*(..))<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myAdvice<span class="token punctuation">&quot;</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myPoint<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>使用<code>&lt;aop:config&gt;</code>标签，配置切入点表达式：指定哪些包中类，要使用事务</p><ul><li>id:切入点表达式的名称，唯一值</li><li>expression：切入点表达式，指定哪些类要使用事务，aspectj会创建代理对象</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>service\ncom<span class="token punctuation">.</span>crm<span class="token punctuation">.</span>service\ncom<span class="token punctuation">.</span>service\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>&lt;aop:advisor advice-ref=&quot;myAdvice&quot; pointcut-ref=&quot;myPoint&quot; /&gt;</code>用于配置增强器：关联adivce和pointcut</p><ul><li>advice-ref:通知，上面tx:advice哪里的配置</li><li>pointcut-ref：切入点表达式的id</li></ul><p>如果有多个的话，就使用多个标签</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;aop:config&gt;\n    &lt;aop:pointcut id=&quot;myPoint&quot; expression=&quot;execution(* *..service..*.*(..))&quot;/&gt;\n    &lt;aop:advisor advice-ref=&quot;myAdvice&quot; pointcut-ref=&quot;myPoint&quot; /&gt;\n&lt;/aop:config&gt;\n\n&lt;aop:config&gt;\n    &lt;aop:pointcut id=&quot;myPoint1&quot; expression=&quot;execution(* *..service1..*.*(..))&quot;/&gt;\n    &lt;aop:advisor advice-ref=&quot;myAdvice1&quot; pointcut-ref=&quot;myPoint1&quot; /&gt;\n&lt;/aop:config&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><p>完整代码</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;!--声明事务管理器对象--&gt;\n&lt;bean id=&quot;transactionManager&quot;\n      class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot; &gt;\n    &lt;property name=&quot;dataSource&quot; ref=&quot;myDataSource&quot; /&gt;\n&lt;/bean&gt;\n&lt;!--&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot; /&gt;--&gt;\n\n&lt;tx:advice id=&quot;myAdvice&quot; transaction-manager=&quot;transactionManager&quot; &gt;\n    &lt;tx:attributes&gt;\n        &lt;tx:method name=&quot;insertSaleDao&quot; isolation=&quot;DEFAULT&quot;\n                   rollback-for=&quot;java.lang.NullPointerException,vin.cco.excep.MyException&quot;\n                   propagation=&quot;REQUIRED&quot;/&gt;\n        &lt;tx:method name=&quot;add*&quot; propagation=&quot;REQUIRES_NEW&quot; /&gt;\n        &lt;!--指定修改方法--&gt;\n        &lt;tx:method name=&quot;modify*&quot; /&gt;\n        &lt;!--删除方法--&gt;\n        &lt;tx:method name=&quot;remove*&quot; /&gt;\n        &lt;!--查询方法，query，search，find--&gt;\n        &lt;tx:method name=&quot;*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot; /&gt;\n\n    &lt;/tx:attributes&gt;\n&lt;/tx:advice&gt;\n\n&lt;aop:config&gt;\n    &lt;aop:pointcut id=&quot;myPoint&quot; expression=&quot;execution(* *..service..*.*(..))&quot;/&gt;\n    &lt;aop:advisor advice-ref=&quot;myAdvice&quot; pointcut-ref=&quot;myPoint&quot; /&gt;\n&lt;/aop:config&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div></li></ol><h1 id="spring配置web" tabindex="-1"><a class="header-anchor" href="#spring配置web" aria-hidden="true">#</a> spring配置web</h1><p>因为web项目是运行在tomcat上的，所以我们使用spring创建对象的时候，是通过</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">&quot;applicationContext.xml&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>但是如果将这个过程放在doPost()或者doGet()，那么用户每一次请求，都将执行spring配置文件，就会将所有的对象都创建一遍，时间，资源浪费了，所以，这个过程不能放在这两个方法中</p>',29),j=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210523125424627.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),D=(0,t.uE)('<p>每次执行配置文件，其对象都是不同的</p><p>此时，可以考虑，将 Spring 容器的创建放在 Servlet 进行初始化时进行，即执行 init()方</p><p>法时执行。并且，Servlet 还是单例多线程的，即一个业务只有一个 Servlet 实例，所有执行</p><p>该业务的用户执行的都是这一个 Servlet 实例。这样，Spring 容器就具有了唯一性了。</p><p>但是，Servlet 是一个业务一个 Servlet 实例，即 LoginServlet 只有一个，但还会有</p><p>StudentServlet、TeacherServlet 等。每个业务都会有一个 Servlet，都会执行自己的 init()方法，</p><p>也就都会创建一个 Spring 容器了。这样一来，Spring 容器就又不唯一了。</p><h2 id="使用-spring-的监听器-contextloaderlistener" tabindex="-1"><a class="header-anchor" href="#使用-spring-的监听器-contextloaderlistener" aria-hidden="true">#</a> <strong>使用</strong> <strong>Spring</strong> <strong>的监听器</strong> ContextLoaderListener</h2><p>举例：springweb-2 项目（在 spring-web 项目基础上修改）</p><p>对于 Web 应用来说，ServletContext 对象是唯一的，一个 Web 应用，只有一个</p><p>ServletContext 对象，该对象是在 Web 应用装载时初始化的。若将 Spring 容器的创建时机，</p><p>放在 ServletContext 初始化时，就可以保证 Spring 容器的创建只会执行一次，也就保证了</p><p>Spring 容器在整个应用中的唯一性。</p><p>当 Spring 容器创建好后，在整个应用的生命周期过程中，Spring 容器应该是随时可以被访问的。即，Spring 容器应具有全局性。而放入 ServletContext 对象的属性，就具有应用的</p><p>全局性。所以，将创建好的 Spring 容器，以属性的形式放入到 ServletContext 的空间中，就</p><p>保证了 Spring 容器的全局性。</p><p>上述的这些工作，已经被封装在了如下的 Spring 的 Jar 包的相关 API 中：</p><p>spring-web-5.2.5.RELEASE</p><h2 id="步骤-1" tabindex="-1"><a class="header-anchor" href="#步骤-1" aria-hidden="true">#</a> 步骤</h2>',19),I=(0,t._)("ol",null,[(0,t._)("li",null,[(0,t._)("p",null,"添加依赖"),(0,t._)("div",{class:"language-xml ext-xml line-numbers-mode"},[(0,t._)("pre",{class:"language-xml"},[(0,t._)("code",null,[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("dependency")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)(" \n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("groupId")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("org.springframework"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("groupId")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)(" \n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("artifactId")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("spring-web"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("artifactId")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)(" \n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("version")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("5.2.5.RELEASE"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("version")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("dependency")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br")])])]),(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("strong",null,"注册监听器"),(0,t.Uk)(),(0,t._)("strong",null,"ContextLoaderListener")]),(0,t._)("p",null,"若要在 ServletContext 初 始 化 时 创 建 Spring 容 器 ， 就 需 要 使 用 监 听 器 接 口"),(0,t._)("p",null,"ServletContextListener 对 ServletContext 进行监听。在 web.xml 中注册该监听器。"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210523125642737.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("p",null,[(0,t.Uk)("这个过程在"),(0,t._)("code",null,"web.xml"),(0,t.Uk)("文件中")]),(0,t._)("p",null,[(0,t._)("code",null,"执行这个过程很容易出错，因为默认web.xml"),(0,t.Uk)("文件中，spring配置文件的路径在"),(0,t._)("code",null,"WEB-INFO"),(0,t.Uk)("下，也就是和"),(0,t._)("code",null,"web.xml"),(0,t.Uk)("文件在同一个目录下，并且spring的配置文件的名称也是固定的")]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210523130810316.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("p",null,"如果spring配置文件的名字不是这个，或者是路径不是这个，就会报这个错误"),(0,t._)("p",null,[(0,t.Uk)("但是这个是可以进行修改的，也是在"),(0,t._)("code",null,"web.xml"),(0,t.Uk)("文件中")]),(0,t._)("div",{class:"language-xml ext-xml line-numbers-mode"},[(0,t._)("pre",{class:"language-xml"},[(0,t._)("code",null,[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("context-param")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"\x3c!-- contextConfigLocation:表示配置文件的路径  --\x3e"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("param-name")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("contextConfigLocation"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("param-name")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"\x3c!--自定义配置文件的路径--\x3e"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("param-value")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("classpath:spring.xml"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("param-value")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("context-param")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br")])]),(0,t._)("p",null,"Spring 为该监听器接口定义了一个实现类 ContextLoaderListener，完成了两个很重要的"),(0,t._)("p",null,"工作：创建容器对象，并将容器对象放入到了 ServletContext 的空间中。"),(0,t._)("p",null,"打开 ContextLoaderListener 的源码。看到一共四个方法，两个是构造方法，一个初始化"),(0,t._)("p",null,"方法，一个销毁方法。"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210523125730396.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("p",null,"所以，在这四个方法中较重要的方法应该就是 contextInitialized()，context 初始化方法。"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210523125749197.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("p",null,"跟踪 initWebApplicationContext()方法，可以看到，在其中创建了容器对象。"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210523125811479.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("p",null,"并且，将创建好的容器对象放入到了 ServletContext 的空间中，key 为一个常量："),(0,t._)("p",null,"WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE。"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210523125829646.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("ol",{start:"3"},[(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("strong",null,"指定"),(0,t.Uk)(),(0,t._)("strong",null,"Spring"),(0,t.Uk)(),(0,t._)("strong",null,"配置文件的位置"),(0,t._)("code",null,"<context-param>")]),(0,t._)("p",null,"ContextLoaderListener 在对 Spring 容器进行创建时，需要加载 Spring 配置文件。其默认"),(0,t._)("p",null,"的 Spring 配置文件位置与名称为：WEB-INF/applicationContext.xml。但，一般会将该配置文"),(0,t._)("p",null,"件放置于项目的 classpath 下，即 src 下，所以需要在 web.xml 中对 Spring 配置文件的位置及名称进行指定。"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210523125959643.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("p",null,"从监听器 ContextLoaderListener 的父类 ContextLoader 的源码中可以看到其要读取的配"),(0,t._)("p",null,"置文件位置参数名称 contextConfigLocation。"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210523130016955.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("ol",{start:"4"},[(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("strong",null,"获取"),(0,t.Uk)(),(0,t._)("strong",null,"Spring"),(0,t.Uk)(),(0,t._)("strong",null,"容器对象")]),(0,t._)("p",null,"在 Servlet 中获取容器对象的常用方式有两种："),(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("strong",null,"直接从"),(0,t.Uk)(),(0,t._)("strong",null,"ServletContext"),(0,t.Uk)(),(0,t._)("strong",null,"中获取")]),(0,t._)("p",null,"从对监听器 ContextLoaderListener 的源码分析可知，容器对象在 ServletContext 的中存放的 key 为WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE。所以，可以直接通过 ServletContext 的 getAttribute()方法，按照指定的 key 将容器对象获取到。"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210523130106196.png?x-oss-process=style/pictureProcess1",data:"aurora"})])]),(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("strong",null,"通过"),(0,t.Uk)(),(0,t._)("strong",null,"WebApplicationContextUtils"),(0,t.Uk)(),(0,t._)("strong",null,"获取")]),(0,t._)("p",null,"工具类 WebApplicationContextUtils 有一个方法专门用于从 ServletContext 中获取 Spring容器对象：getRequiredWebApplicationContext(ServletContext sc)"),(0,t._)("p",null,[(0,t._)("strong",null,"调用"),(0,t.Uk)(),(0,t._)("strong",null,"Spring"),(0,t.Uk)(),(0,t._)("strong",null,"提供的方法获取容器对象")]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210523130212960.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("p",null,"查其源码，看其调用关系，就可看到其是从 ServletContext 中读取的属性值，即 Spring容器。"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210523130237453.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("p",null,"以上两种方式，无论使用哪种获取容器对象，刷新 success 页面后，可看到代码中使用的 Spring 容器均为同一个对象。"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210523130301079.png?x-oss-process=style/pictureProcess1",data:"aurora"})])])])])])])])])],-1),P={},A=(0,a(83744).Z)(P,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,e,o,c,l,u,i,r,k,g,m,d,b,q,v,y,x,h,S,f,_,w,E,j,D,I],64)}]])}}]);