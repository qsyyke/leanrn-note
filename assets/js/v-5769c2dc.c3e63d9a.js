"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8933],{49302:(s,e,n)=>{n.r(e),n.d(e,{data:()=>a});const a={key:"v-5769c2dc",path:"/redis/Redis%E9%9B%86%E7%BE%A4.html",title:"Redis 集群",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"修改配置文件",slug:"修改配置文件",children:[]},{level:2,title:"启动主机和从机",slug:"启动主机和从机",children:[]},{level:2,title:"主机宕机",slug:"主机宕机",children:[{level:3,title:"主机开启",slug:"主机开启",children:[]}]},{level:2,title:"丛机宕机",slug:"丛机宕机",children:[{level:3,title:"丛机开启",slug:"丛机开启",children:[]}]},{level:2,title:"丛机上位",slug:"丛机上位",children:[{level:3,title:"slaveof no one",slug:"slaveof-no-one",children:[]}]},{level:2,title:"原来的主机从宕机到启动",slug:"原来的主机从宕机到启动",children:[{level:3,title:"嵌套模式的丛机还可以写？",slug:"嵌套模式的丛机还可以写",children:[]}]},{level:2,title:"哨兵模式搭建",slug:"哨兵模式搭建",children:[{level:3,title:"哨兵模式搭建(配置文件模式)",slug:"哨兵模式搭建-配置文件模式",children:[]}]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},48111:(s,e,n)=>{n.r(e),n.d(e,{default:()=>B});var a=n(66252);const r=(0,a.uE)('<h1 id="redis-集群" tabindex="-1"><a class="header-anchor" href="#redis-集群" aria-hidden="true">#</a> Redis 集群</h1><h1 id="主从复制" tabindex="-1"><a class="header-anchor" href="#主从复制" aria-hidden="true">#</a> 主从复制</h1><p>什么是主从复制，主库负责写操作，从库负责读操作，主库写入数据，会将这些数据复制到从库中进行</p><blockquote><p><code>特征：主少从多，主写从读，读写分离，主写同步复制到从</code></p><p>一般主库进行写入的次数比较少，相对于从库来说，很多的时候，都是进行读取的操作，</p></blockquote><h1 id="搭建一主二从集群" tabindex="-1"><a class="header-anchor" href="#搭建一主二从集群" aria-hidden="true">#</a> 搭建一主二从集群</h1><p>正常情况下，搭建一主二从集群，需要在在3个服务器中进行，一个服务器安装一个Redis，但是个人使用，用作测试，可以在一个服务器中启动三次服务，但是需要保证每一次启动服务器的端口是不相同的，这样就可以保证同一个服务器中的Redis能够独立运行</p><p>所以每一次启动的时候，都需要更改配置文件的设置，并且使用配置文件进行启动</p><blockquote><p><code>小贴士：因为配置文件的名字可以随便命名，所以可以这样 6379redis.conf,6380redis.conf....</code></p></blockquote><h2 id="修改配置文件" tabindex="-1"><a class="header-anchor" href="#修改配置文件" aria-hidden="true">#</a> 修改配置文件</h2><p>因为需要启动三次，所以需要修改配置文件中的端口，这样能够使他们都能够独立的运行</p><pre><code>bind 127.0.0.1  为了连接方便，在公司中，一般使用IP进行连接\nport 6379       端口必须要进行更改\npidfile /var/run/redis_6379.pid  推荐更改端口之后，就改一些这个配置\nlogfile &quot;6379.log&quot;               将日志打印开启，为了方便查看每一个库的执行\ndbfilename dump6379.rdb          这个用于每一个库的恢复备份数据，如果三个库中的数据，全部在同一个文件中，那么就特别不好看，不知道哪些数据时那个库中的\n</code></pre><p>Linux中复制文件的命令<code>cp 文件名 新文件名</code></p><p>进行连接<code>redis-server redis6379.conf &amp;....</code></p><h2 id="启动主机和从机" tabindex="-1"><a class="header-anchor" href="#启动主机和从机" aria-hidden="true">#</a> 启动主机和从机</h2><ul><li><p>查看三台Redis服务在集群中的角色</p><p>默认的角色都是master，这是一种可读可写的角色</p><p>使用命令<code> info replication</code>可以查看</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>127.0.0.1:6379&gt;  info replication\n# Replication\nrole:master   角色\nconnected_slaves:0  连接的用户数\nmaster_failover_state:no-failover\nmaster_replid:7bec8d4ea6fe997bf940ea5b089ec6d66b7739cd\nmaster_replid2:0000000000000000000000000000000000000000\nmaster_repl_offset:0\nsecond_repl_offset:-1\nrepl_backlog_active:0\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:0\nrepl_backlog_histlen:0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p><code>所有的Redis服务默认情况下都是主机，他们可以进行读和写，他们默认都是没有从机的</code></p></li><li><p>最好先测试三个服务之间有没有关系，可以在6379主机上添加一个数据，在在其他两台服务上查看是否存在<code>set k1 v1</code>，因为没有设置主从关系，他们不存在</p></li><li><p>设置主从关系，使用命令<code>slaveof 127.0.0.1 6379</code></p><p>slaveof是从属的关系</p><blockquote><p>语法<code>slaveof 主机IP 主机端口</code></p></blockquote></li><li><p>再次查看服务的角色</p><ul><li>在丛机上进行查看</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>127.0.0.1:6380&gt; info replication\n# Replication\nrole:slave    角色切换为丛机\nmaster_host:127.0.0.1  连接到的主机IP\nmaster_port:6379  主机端口\nmaster_link_status:up  连接状态\nmaster_last_io_seconds_ago:8\nmaster_sync_in_progress:0\nslave_repl_offset:70\nslave_priority:100\nslave_read_only:1\nconnected_slaves:0\nmaster_failover_state:no-failover\nmaster_replid:8c88cab106493226833dead0b6d3f5a006b18866\nmaster_replid2:0000000000000000000000000000000000000000\nmaster_repl_offset:70\nsecond_repl_offset:-1\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:1\nrepl_backlog_histlen:70\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li><p>主机查看</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>127.0.0.1:6379&gt; info replication\n# Replication\nrole:master   角色为主机\nconnected_slaves:2  连接到主机的丛机个数\nslave0:ip=127.0.0.1,port=6380,state=online,offset=224,lag=1  从机信息\nslave1:ip=127.0.0.1,port=6381,state=online,offset=224,lag=0  从机信息\nmaster_failover_state:no-failover\nmaster_replid:8c88cab106493226833dead0b6d3f5a006b18866\nmaster_replid2:0000000000000000000000000000000000000000\nmaster_repl_offset:224\nsecond_repl_offset:-1\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:1\nrepl_backlog_histlen:224\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ul><p><code>因为方才在6379上设置了一个键k1，现在在6380机上查看时，主机中的数据就会自动服务到丛机中</code></p></li></ul>',15),l=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210309223552465.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),p=(0,a.uE)('<ul><li><p>全量复制和增量复制的区别</p><blockquote><p><code>全量复制</code>：一旦主从关系确定，会自动把主库上已有的数据同步复制到从库。 在6380和6381上执行：keys * <code>增量复制</code>：主库写数据会自动同步到从库。 在6379上执行：set k2 v2 在6380和6381上执行：keys *</p></blockquote></li><li><p>测试从机是否可以写和读操作</p><ul><li><p>丛机</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>127.0.0.1:6380&gt; set k2 v2\n(error) READONLY You can&#39;t write against a read only replica.\n127.0.0.1:6380&gt; get k1\n&quot;v1&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>丛机不可以进行写操作，会报错，但是可以读</p></li><li><p>主机</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>127.0.0.1:6379&gt; get k1\n&quot;v1&quot;\n127.0.0.1:6379&gt; set k2 v2\nOK\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>主机既可以进行写操作，又可以进行读操作，但是一般不建议主机进行读操作</p></li></ul><p><code>这个就是主写从读，读写分流</code></p></li></ul><h2 id="主机宕机" tabindex="-1"><a class="header-anchor" href="#主机宕机" aria-hidden="true">#</a> 主机宕机</h2><p>如果主机发生了宕机行为(<code>shutdown服务</code>)，那么丛机会处于等待状态，连接状态变为<code>down</code>，如果主机重新开启，丛机会自动进行连接</p>',3),i=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210309224934156.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),c=(0,a._)("p",null,"丛机情况",-1),t=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210309225003740.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),o=(0,a.uE)('<p>但是尽管主机处于宕机状态，丛机还是可以进行读操作，只是丛机中的数据不会更新，因为主机宕机，没有数据的复制</p><h3 id="主机开启" tabindex="-1"><a class="header-anchor" href="#主机开启" aria-hidden="true">#</a> 主机开启</h3><p>如果主机宕机之后，又重新启动，那么从机会立即进行连接，将连接状态改为<code>up</code>，主机会将数据复制到丛机中</p><h2 id="丛机宕机" tabindex="-1"><a class="header-anchor" href="#丛机宕机" aria-hidden="true">#</a> 丛机宕机</h2><p>如果丛机发生宕机行为，那么主机会立即失去一个丛机，主机的角色中的丛机连接也会少一个，</p><h3 id="丛机开启" tabindex="-1"><a class="header-anchor" href="#丛机开启" aria-hidden="true">#</a> 丛机开启</h3><p>如果丛机从发生宕机后又重新开启服务，那么丛机不会立即再次变为丛机，而是成为主机，这个服务会失去丛机的角色</p><p>如果还想将这个服务设置为丛机，那么需要再次运行命令<code>slaveof IP port</code></p><h2 id="丛机上位" tabindex="-1"><a class="header-anchor" href="#丛机上位" aria-hidden="true">#</a> 丛机上位</h2><p>如果遇到主机宕机，而且这种情况很严重，已经很难再次维护运行，所以这个时候，就可以让丛机中性能比较的来当主机，如果这样设置的话，丛机中原来有一些从原先主机中复制过来的数据，这些数据从机上位后就是自己的了</p><h3 id="slaveof-no-one" tabindex="-1"><a class="header-anchor" href="#slaveof-no-one" aria-hidden="true">#</a> <code>slaveof no one</code></h3><p>在性能比较好的那个丛机输入命令<code>slaveof no one</code>，就是让这个Redis服务，不从属于谁，所以这个Redis服务就从丛机变为主机</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>127.0.0.1:6380&gt; info replication\n# Replication\nrole:slave\nmaster_host:127.0.0.1\nmaster_port:6379\nmaster_link_status:down\nmaster_last_io_seconds_ago:-1\nmaster_sync_in_progress:0\nslave_repl_offset:1550\nmaster_link_down_since_seconds:1283\nslave_priority:100\nslave_read_only:1\nconnected_slaves:0\nmaster_failover_state:no-failover\nmaster_replid:8c88cab106493226833dead0b6d3f5a006b18866\nmaster_replid2:0000000000000000000000000000000000000000\nmaster_repl_offset:1550\nsecond_repl_offset:-1\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:1\nrepl_backlog_histlen:1550\n127.0.0.1:6380&gt; slaveof no one\nOK\n上面这个Redis服务还是丛机\n127.0.0.1:6380&gt; info replication\n# Replication\nrole:master  变为主机\nconnected_slaves:0\nmaster_failover_state:no-failover\nmaster_replid:4decd8d9573264f63a7ca442a271022e89ada9b3\nmaster_replid2:8c88cab106493226833dead0b6d3f5a006b18866\nmaster_repl_offset:1550\nsecond_repl_offset:1551\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:1\nrepl_backlog_histlen:1550\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>然后在另一个Redis服务中重新设置其从属关系(原来主机的另一个丛机)</p><p>还是使用命令<code>slaveof 新主机IP port</code></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>127.0.0.1:6381&gt; slaveof 127.0.0.1 6380  重新射中从属关系\nOK\n\n127.0.0.1:6381&gt; keys *\n1) &quot;k1&quot;\n2) &quot;k2&quot;\n3) &quot;k3&quot;\n127.0.0.1:6381&gt; info replication\n# Replication\nrole:slave\nmaster_host:127.0.0.1\nmaster_port:6380\nmaster_link_status:up\nmaster_last_io_seconds_ago:1\nmaster_sync_in_progress:0\nslave_repl_offset:1644\nslave_priority:100\nslave_read_only:1\nconnected_slaves:0\nmaster_failover_state:no-failover\nmaster_replid:4decd8d9573264f63a7ca442a271022e89ada9b3\nmaster_replid2:8c88cab106493226833dead0b6d3f5a006b18866\nmaster_repl_offset:1644\nsecond_repl_offset:1551\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:15\nrepl_backlog_histlen:1630\n127.0.0.1:6381&gt; \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="原来的主机从宕机到启动" tabindex="-1"><a class="header-anchor" href="#原来的主机从宕机到启动" aria-hidden="true">#</a> 原来的主机从宕机到启动</h2><p>如果原来的主机从宕机状态恢复到启动，因为他原来的丛机已经更改了从属关系，所以尽管原来有丛机，但是现在不会有</p><p>他现在可以有两个选择，一个是继续当主机，那么正在运行的那个有丛机的主机就要取消主机上位，</p><p>这个从宕机到启动的主机还可以当从机，可以是6380的丛机，也可以是6381的丛机，可以进行嵌套使用，但是对于6381端口的服务来说，他就有两个角色，对于6380主机来说，6381服务是一个丛机，但是对于6379服务来说，6381服务是一个主机，6379中的数据会从6381机中进行复制</p><ul><li><p>6379服务设置为6381机的丛机</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>127.0.0.1:6379&gt; info replication\n# Replication\nrole:slave\nmaster_host:127.0.0.1\nmaster_port:6381\nmaster_link_status:up\nmaster_last_io_seconds_ago:3\nmaster_sync_in_progress:0\nslave_repl_offset:3380\nslave_priority:100\nslave_read_only:1\nconnected_slaves:0\nmaster_failover_state:no-failover\nmaster_replid:4decd8d9573264f63a7ca442a271022e89ada9b3\nmaster_replid2:0000000000000000000000000000000000000000\nmaster_repl_offset:3380\nsecond_repl_offset:-1\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:3367\nrepl_backlog_histlen:14\n127.0.0.1:6379&gt; keys *\n1) &quot;k3&quot;\n2) &quot;k1&quot;\n3) &quot;k2&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div></li><li><p>6380主机</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>127.0.0.1:6380&gt; info replication\n# Replication\nrole:master\nconnected_slaves:1\nslave0:ip=127.0.0.1,port=6381,state=online,offset=3422,lag=1\nmaster_failover_state:no-failover\nmaster_replid:4decd8d9573264f63a7ca442a271022e89ada9b3\nmaster_replid2:8c88cab106493226833dead0b6d3f5a006b18866\nmaster_repl_offset:3422\nsecond_repl_offset:1551\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:1\nrepl_backlog_histlen:3422\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li><p>6381机角色信息</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>127.0.0.1:6381&gt; info replication\n# Replication\nrole:slave\nmaster_host:127.0.0.1\nmaster_port:6380\nmaster_link_status:up\nmaster_last_io_seconds_ago:7\nmaster_sync_in_progress:0\nslave_repl_offset:3492\nslave_priority:100\nslave_read_only:1\nconnected_slaves:1\n下面是其丛机的信息\nslave0:ip=127.0.0.1,port=6379,state=online,offset=3492,lag=0\nmaster_failover_state:no-failover\nmaster_replid:4decd8d9573264f63a7ca442a271022e89ada9b3\nmaster_replid2:8c88cab106493226833dead0b6d3f5a006b18866\nmaster_repl_offset:3492\nsecond_repl_offset:1551\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_off\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></li></ul><p>他们之间的关系为：</p><blockquote><p>6380主机----&gt; 6381(6380的丛机) ----&gt;6379(6381的丛机)</p><p><code>虽然6380是6379的原则上的父主机，但是在6380的角色信息中并没有看到6379是6380的丛机信息</code></p><p>在6381中可以看到</p></blockquote><h3 id="嵌套模式的丛机还可以写" tabindex="-1"><a class="header-anchor" href="#嵌套模式的丛机还可以写" aria-hidden="true">#</a> 嵌套模式的丛机还可以写？</h3><p>那么既然6381机是6379的主机，那么他是否具有写入的权限？</p><p><code>只要其角色上带有丛机的信息，就都不能在进行写入操作，尽管这个Redis服务是另一个Redis的主机，也是不可以进行写入操作的</code></p><h1 id="redis哨兵模式" tabindex="-1"><a class="header-anchor" href="#redis哨兵模式" aria-hidden="true">#</a> Redis哨兵模式</h1><p>从机上位的自动版。Redis提供了哨兵的命令，哨兵命令是一个独立的进程，哨兵通过发送命令，来监控主从服务器的运行状态，如果检测到master故障了根据投票数自动将某一个slave转换master，然后通过消息订阅模式通知其它slave，让它们切换主机。然而，一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多哨兵进行监控。</p><p>在开发中，可能会遇到这种问题，当搭建一个Redis集群的时候，我们不知道主库什么时候发生意外，那么我们就不能及时的让从库上位，为了解决这个问题，我们就需要使用哨兵模式</p><p>哨兵模式就相当于是一个哨兵，时刻坚守在自己的岗位上</p><p>为主库设置一个哨兵(<code>每一个库IP都可以设置一个ip，主库和从库嵌套</code>)，设置的这个哨兵会一直监视主库的状态，包括连接到主库的从库信息，那么当主库发生意外的时候，哨兵就会立马作出反应(<code>哨兵会存在几秒等的延迟</code>)，哨兵就会对从库进行投票算法(<code>一般还是性能比较好的，得到的票数多</code>)</p><p><code>sentinel monitor dc-redis 127.0.0.1 6379 1</code>最后面的1就是投票的个数，也就是出现宕机的那个主库的从库，谁先得到1票，谁就当主库</p><h2 id="哨兵模式搭建" tabindex="-1"><a class="header-anchor" href="#哨兵模式搭建" aria-hidden="true">#</a> 哨兵模式搭建</h2><p>使用哨兵模式的话，需要修改配置文件，因为需要设置监控哪个IP，哪个端口，多少票</p><p>哨兵的配置文件为<code>sentinel.conf</code>，但是里面很多的东西，都不用，可以重新常见一个新的文件，然后将<code>sentinel monitor dc-redis 哨兵监控IP 端口 投票数</code>复制到创建的这个配置文件当中去</p><ol><li><p>需要使用哨兵模式还是需要搭建一个集群，集群的搭建跟一主二从搭建一样：一台服务器模拟三台主机、查询主从信息、写操作6379、设置主从关系、全量复制、增量复制、主写从读、读写分离。</p></li><li><p>创建redis_sentinel.conf文件，并编辑里边的内容：<code>sentinel monitor dc-redis 127.0.0.1 6379 1</code>，表示：指定监控主机的ip地址，port端口，得到哨兵的投票数(当哨兵投票数大于或者等于此数时切换主从关系)。</p></li><li><p>新开窗口，启动哨兵</p></li></ol><p>进入<code>redis-sentinel</code>程序所在的目录，在Redis的安装目录中，启动<code>redis-sentinel redis_sentinel.conf</code>，如果不使用配置文件进行启动的话，默认是使用自己的配置文件进行启动</p>',37),b=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps1-1615336672415.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),d=(0,a.uE)('<p>启动之后，哨兵可以查看其监控的主库的信息，包括其从库的信息(包括他们的一举一动)</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>root@iZ2vc8cx7xr1j8en865pbiZ:/redis# redis-sentinel redis_sentinel.conf\n231168:X 10 Mar 2021 12:02:23.406 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\n231168:X 10 Mar 2021 12:02:23.406 # Redis version=6.2.1, bits=64, commit=00000000, modified=0, pid=231168, just started\n231168:X 10 Mar 2021 12:02:23.406 # Configuration loaded\n231168:X 10 Mar 2021 12:02:23.407 * monotonic clock: POSIX clock_gettime         监控的主机id，随机生成                        \n231168:X 10 Mar 2021 12:02:23.411 # Sentinel ID is f818191af12ce97e9d82bfaa58e6c4421f9d4fbb\n监控的主机信息\n231168:X 10 Mar 2021 12:02:23.411 # +monitor master dc-redis 127.0.0.1 6379 quorum 1\n从库信息1\n231168:X 10 Mar 2021 12:02:23.411 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ dc-redis 127.0.0.1 6379\n从库信息2\n231168:X 10 Mar 2021 12:02:23.414 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ dc-redis 127.0.0.1 6379\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ol start="4"><li>主机宕机：</li></ol>',3),u=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps2-1615336672415.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),m=(0,a._)("ol",{start:"5"},[(0,a._)("li",null,"等待从机投票，在sentinel窗口中查看打印信息。")],-1),_=(0,a._)("p",null,"打印的信息会有几秒的延迟",-1),g=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps3-1615336672415.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),f=(0,a.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>231168:X 10 Mar 2021 12:09:01.679 # +sdown master dc-redis 127.0.0.1 6379\n231168:X 10 Mar 2021 12:09:01.679 # +odown master dc-redis 127.0.0.1 6379 #quorum 1/1\n231168:X 10 Mar 2021 12:09:01.679 # +new-epoch 1\n231168:X 10 Mar 2021 12:09:01.679 # +try-failover master dc-redis 127.0.0.1 6379\n231168:X 10 Mar 2021 12:09:01.682 # +vote-for-leader f818191af12ce97e9d82bfaa58e6c4421f9d4fbb 1\n231168:X 10 Mar 2021 12:09:01.682 # +elected-leader master dc-redis 127.0.0.1 6379\n231168:X 10 Mar 2021 12:09:01.682 # +failover-state-select-slave master dc-redis 127.0.0.1 6379\n231168:X 10 Mar 2021 12:09:01.782 # +selected-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ dc-redis 127.0.0.1 6379\n231168:X 10 Mar 2021 12:09:01.782 * +failover-state-send-slaveof-noone slave 127.0.0.1:6380 127.0.0.1 6380 @ dc-redis 127.0.0.1 6379\n231168:X 10 Mar 2021 12:09:01.837 * +failover-state-wait-promotion slave 127.0.0.1:6380 127.0.0.1 6380 @ dc-redis 127.0.0.1 6379\n231168:X 10 Mar 2021 12:09:02.823 # +promoted-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ dc-redis 127.0.0.1 6379\n231168:X 10 Mar 2021 12:09:02.823 # +failover-state-reconf-slaves master dc-redis 127.0.0.1 6379\n231168:X 10 Mar 2021 12:09:02.875 * +slave-reconf-sent slave 127.0.0.1:6381 127.0.0.1 6381 @ dc-redis 127.0.0.1 6379\n231168:X 10 Mar 2021 12:09:03.842 * +slave-reconf-inprog slave 127.0.0.1:6381 127.0.0.1 6381 @ dc-redis 127.0.0.1 6379\n231168:X 10 Mar 2021 12:09:03.842 * +slave-reconf-done slave 127.0.0.1:6381 127.0.0.1 6381 @ dc-redis 127.0.0.1 6379\n231168:X 10 Mar 2021 12:09:03.894 # +failover-end master dc-redis 127.0.0.1 6379\n231168:X 10 Mar 2021 12:09:03.894 # +switch-master dc-redis 127.0.0.1 6379 127.0.0.1 6380\n231168:X 10 Mar 2021 12:09:03.894 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ dc-redis 127.0.0.1 6380\n231168:X 10 Mar 2021 12:09:03.894 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ dc-redis 127.0.0.1 6380\n231168:X 10 Mar 2021 12:09:33.937 # +sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ dc-redis 127.0.0.1 6380\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><ol start="6"><li>查看6380和6381的redis信息：</li></ol>',2),v=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps4-1615336672415.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),h=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"C:%5CUsers%5Cchuchen%5CPictures%5C%E8%A7%86%E9%A2%91%E6%88%AA%E5%9B%BE%5Credis%5Cwps5-1615336672415.jpg",data:"aurora"})],-1),x=(0,a._)("ol",{start:"7"},[(0,a._)("li",null,"原主机恢复，启动6379：")],-1),y=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps6-1615336672415.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),k=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"C:%5CUsers%5Cchuchen%5CPictures%5C%E8%A7%86%E9%A2%91%E6%88%AA%E5%9B%BE%5Credis%5Cwps7-1615336672416.jpg",data:"aurora"})],-1),z=(0,a.uE)('<p>原主机如果恢复的话，那么他就会自动的变成丛机，无需用户进行设置，哨兵就可以自动设置</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Last login: Wed Mar 10 11:58:44 2021 from 39.128.212.226\nroot@iZ2vc8cx7xr1j8en865pbiZ:~# ps -ef | grep redis\nroot      230757  230008  0 11:57 pts/4    00:00:06 redis-server 0.0.0.0:6380\nroot      230771  230008  0 11:57 pts/4    00:00:00 redis-cli -p 6380\nroot      230788  230042  0 11:57 pts/5    00:00:06 redis-server 0.0.0.0:6381\nroot      230805  230042  0 11:57 pts/5    00:00:00 redis-cli -p 6381\nroot      230945  230907  0 11:59 pts/0    00:00:00 redis-cli -p 6381\nroot      231168  230068  0 12:02 pts/6    00:00:09 redis-sentinel *:26379 [sentinel]\nroot      232843  232812  0 12:28 pts/2    00:00:00 grep --color=auto redis\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>通过命令<code>ps -ef | grep redis</code>可以查看信息</p><h3 id="哨兵模式搭建-配置文件模式" tabindex="-1"><a class="header-anchor" href="#哨兵模式搭建-配置文件模式" aria-hidden="true">#</a> 哨兵模式搭建(配置文件模式)</h3><p>1—7步跟1.17.2.2一主二从搭建一样：一台服务器模拟三台主机、查询主从信息、写操作6379、设置主从关系、全量复制、增量复制、主写从读、读写分离。</p><p>8、复制三份redis_ sentinel.conf文件为redis_sentinel26379.conf、redis_sentinel26380.conf、redis_sentinel 26381.conf，并修改内容：</p><p>端口分别修改为26379、26380、26381</p><p>哨兵监控策略都修改为：</p><p>sentinel monitor mymaster 192.168.235.128 6379 2，表示：指定监控主机的ip地址，port端口，得票数多于2时表示需要切换主从关系。</p><p>如果设置密码了，都还需要设置密码：</p><p>sentinel auth-pass mymaster 123456</p><p>9、新开三个窗口，启动哨兵：./redis-sentinel ../myconfs/sentinel26379.conf</p>',12),j=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps8-1615336672416.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),q=(0,a._)("p",null,"10、主机宕机：",-1),R=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"C:%5CUsers%5Cchuchen%5CPictures%5C%E8%A7%86%E9%A2%91%E6%88%AA%E5%9B%BE%5Credis%5Cwps9-1615336672416.jpg",data:"aurora"})],-1),M=(0,a._)("p",null,"11、等待从机投票，在sentinel窗口中查看打印信息。",-1),X=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps10-1615336672416.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),w=(0,a._)("p",null,"12、查看6380和6381的redis信息：",-1),E=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps11-1615336672416.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),P=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps12-1615336672416.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),C=(0,a._)("p",null,"13、原主机恢复，：",-1),S=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps13-1615336672416.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),O=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps14-1615336672416.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),A=(0,a.uE)('<h4 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h4><h5 id="操作" tabindex="-1"><a class="header-anchor" href="#操作" aria-hidden="true">#</a> 操作：</h5><p>1 查看主从复制关系命令：info replication 2 设置主从关系命令：slaveof 主机ip 主机port 3 开启哨兵模式命令：./redis-sentinel sentinel.conf 4 主从复制原则：开始是全量复制，之后是增量复制 5 哨兵模式三大任务：监控，提醒，自动故障迁移</p><h5 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h5><p>Redis的主从复制最大的缺点就是延迟，主机负责写，从机负责备份，这个过程有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，从机器数量的增加也会使这个问题更加严重。</p>',5),I={},B=(0,n(83744).Z)(I,[["render",function(s,e){return(0,a.wg)(),(0,a.iD)(a.HY,null,[r,l,p,i,c,t,o,b,d,u,m,_,g,f,v,h,x,y,k,z,j,q,R,M,X,w,E,P,C,S,O,A],64)}]])}}]);