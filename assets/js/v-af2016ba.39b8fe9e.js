"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[570],{77550:(a,n,s)=>{s.r(n),s.d(n,{data:()=>e});const e={key:"v-af2016ba",path:"/spring/springcloud/question.html",title:"学习spring cloud过程中的问题记录",lang:"en-US",frontmatter:{date:"2022/1/15 19:30",tag:["mybatis","spring","spring boot","spring cloud"]},excerpt:"",headers:[{level:2,title:"mybatis",slug:"mybatis",children:[{level:3,title:"useGeneratedKeys",slug:"usegeneratedkeys",children:[]},{level:3,title:"resultMap标签",slug:"resultmap标签",children:[]}]},{level:2,title:"spring",slug:"spring",children:[{level:3,title:"service",slug:"service",children:[]},{level:3,title:"使用restTemplate传递数据，收不到",slug:"使用resttemplate传递数据-收不到",children:[]},{level:3,title:"@Value注解",slug:"value注解",children:[]}]},{level:2,title:"maven",slug:"maven",children:[{level:3,title:"解决jdk版本一直改变",slug:"解决jdk版本一直改变",children:[]}]},{level:2,title:"cloud",slug:"cloud",children:[{level:3,title:"No instances available for CLOUD-PAYMENT-SERVICE",slug:"no-instances-available-for-cloud-payment-service",children:[]}]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},82428:(a,n,s)=>{s.r(n),s.d(n,{default:()=>y});var e=s(66252);const t=(0,e.uE)('<h1 id="学习spring-cloud过程中的问题记录" tabindex="-1"><a class="header-anchor" href="#学习spring-cloud过程中的问题记录" aria-hidden="true">#</a> 学习spring cloud过程中的问题记录</h1><p>这里记录了我学习spring cloud的过程中，遇到的一些错误，以及一些已经忘记的知识点</p><h2 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis" aria-hidden="true">#</a> mybatis</h2><h3 id="usegeneratedkeys" tabindex="-1"><a class="header-anchor" href="#usegeneratedkeys" aria-hidden="true">#</a> useGeneratedKeys</h3><p>根据官方的解释</p><blockquote><p>允许JDBC支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）</p></blockquote><p>我们可以在三个地方设置该参数</p><ul><li>在 <code>settings</code> 元素中设置 <strong>useGeneratedKeys</strong> 参数</li><li>在 <code>xml</code> 映射器中设置 <strong>useGeneratedKeys</strong> 参数</li><li>在 <code>接口</code> 映射器中设置 <strong>useGeneratedKeys</strong> 参数</li></ul>',8),p=(0,e.Uk)("详细可以看此篇"),l={href:"https://blog.nowcoder.net/n/efa0db7ba0ba48fab13e7a6209a0c12d?from=nowcoder_improve",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("博客"),o=(0,e.uE)("<p>这个参数的作用就是，比如我们执行<code>insert</code>操作，那么我们能够拿到数据库自动生成的主键id</p><p><code>keyProperty</code>参数是和<code>useGeneratedKeys</code>一起使用的，除了这个，还有<code>keyColumn</code>，他们的区别是</p><ul><li><code>keyColumn</code> 数据库 列名（or 别名）</li><li><code>keyProperty</code> java 中要封装的 类的参数名</li></ul>",3),i=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220115194704947.png",data:"aurora"})],-1),r=(0,e.uE)('<h3 id="resultmap标签" tabindex="-1"><a class="header-anchor" href="#resultmap标签" aria-hidden="true">#</a> resultMap标签</h3><p>详细请看mybatis的<a href="../../mybatis/readme#resultMap">笔记</a></p><h2 id="spring" tabindex="-1"><a class="header-anchor" href="#spring" aria-hidden="true">#</a> spring</h2><h3 id="service" tabindex="-1"><a class="header-anchor" href="#service" aria-hidden="true">#</a> service</h3><p>当我们在service的实现类上，注入dao的对象的时候，可以使用spring的<code>Autowired</code>，我们也可以使用java自带的<code>Resource</code>进行依赖注入</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Resource</span>\n<span class="token keyword">private</span> <span class="token class-name">PaymentDao</span> paymentDao<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="使用resttemplate传递数据-收不到" tabindex="-1"><a class="header-anchor" href="#使用resttemplate传递数据-收不到" aria-hidden="true">#</a> 使用restTemplate传递数据，收不到</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Payment</span> payment<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>最初是这样的，我们从另一个服务中，使用<code>restTemplate</code>的方法请求该controller的时候，会发现payment中的数据，没有</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>serviceUrl<span class="token punctuation">.</span><span class="token function">getPaymentUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/payment/create&quot;</span><span class="token punctuation">,</span>payment<span class="token punctuation">,</span><span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',10),u=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220115221158286.png",data:"aurora"})],-1),d=(0,e.uE)('<p>出现这个原因，是需要我们使用<code>@RequestBody</code>这个注解</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Payment</span> payment<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p><code>@RequestBody</code>主要用来接收前端传递给后端的<code>json字符串</code>中的数据的(请求体中的数据的)；</p><p>这里应该是<code>postForObject</code>方法传递过去的是一个json字符串，所以就导致收不到数据</p></blockquote><h3 id="value注解" tabindex="-1"><a class="header-anchor" href="#value注解" aria-hidden="true">#</a> @Value注解</h3>',4),g={href:"https://zhuanlan.zhihu.com/p/99272510",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("SpringBoot之Spring@Value属性注入使用详解 - 知乎 (zhihu.com)"),m=(0,e.uE)('<p>该注解，可以通过<code>key</code>获取到<code>application.yml</code>中的配置项值</p><p>使用</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>\n\t<span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${server.port}&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">String</span> serverPort<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>使用的时候，一定要通过<code>${}</code>去获取</p><h2 id="maven" tabindex="-1"><a class="header-anchor" href="#maven" aria-hidden="true">#</a> maven</h2><h3 id="解决jdk版本一直改变" tabindex="-1"><a class="header-anchor" href="#解决jdk版本一直改变" aria-hidden="true">#</a> 解决jdk版本一直改变</h3><p>增加下面这个插件</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="cloud" tabindex="-1"><a class="header-anchor" href="#cloud" aria-hidden="true">#</a> cloud</h2><h3 id="no-instances-available-for-cloud-payment-service" tabindex="-1"><a class="header-anchor" href="#no-instances-available-for-cloud-payment-service" aria-hidden="true">#</a> No instances available for CLOUD-PAYMENT-SERVICE</h3><p>如果搭建集群的时候，请求报这个错误，那么大概率是<code>spring.application.name</code>为<code>CLOUD-PAYMENT-SERVICE</code>的服务提供者，没有被注册到注册中心</p>',12),b=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220116220155126.png",data:"aurora"})],-1),h=(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e.Uk)("一定要保证，此"),(0,e._)("code",null,"CLOUD-PAYMENT-SERVICE"),(0,e.Uk)("在上图箭头处")])],-1),v={},y=(0,s(83744).Z)(v,[["render",function(a,n){const s=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("p",null,[p,(0,e._)("a",l,[c,(0,e.Wm)(s)])]),o,i,r,u,d,(0,e._)("p",null,[(0,e._)("a",g,[k,(0,e.Wm)(s)])]),m,b,h],64)}]])}}]);