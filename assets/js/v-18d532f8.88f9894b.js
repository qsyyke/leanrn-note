"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7975],{44747:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-18d532f8",path:"/vue/vue2/axios.html",title:"axios使用",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"安装",slug:"安装",children:[]},{level:2,title:"发送并发请求",slug:"发送并发请求",children:[]},{level:2,title:"axios发送文件上传请求",slug:"axios发送文件上传请求",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},47782:(n,s,a)=>{a.r(s),a.d(s,{default:()=>h});var p=a(66252);const t=(0,p.uE)('<h1 id="axios使用" tabindex="-1"><a class="header-anchor" href="#axios使用" aria-hidden="true">#</a> axios使用</h1><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>在使用之前，我们需要进行安装</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>npm install axios\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h1 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h1><p>发送一个get请求</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import axios from &quot;axios&quot;;\ncreated() {\n    axios.get(&quot;http://api.vipblogs.cn/msinfo&quot;)\n        .then(res=&gt; {\n        console.log(res)\n    }).catch(err =&gt; {\n        console.log(err)\n    })\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>import axios from &quot;axios&quot;</code>这样导入，那么axios是作为全局来使用的，但是我们不推荐使用全局</p><p><code>axios.get()</code>返回的是一个Promise对象，所以我们使用<code>then()</code>和<code>catch()</code>方法</p><p>返回结果</p>',10),e=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/https://ooszy.cco.vin/img/blog-note/image-20210723201316869.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),o=(0,p.uE)('<h2 id="发送并发请求" tabindex="-1"><a class="header-anchor" href="#发送并发请求" aria-hidden="true">#</a> 发送并发请求</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;http://api.vipblogs.cn/msinfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;http://api.vipblogs.cn/tall&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">isrefund</span><span class="token operator">:</span> <span class="token number">0</span>\n        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>如果我们同时需要发送多个请求，那么就可以使用<code>axios.all()</code>方法，只要这多个请求中，有一个发生异常(404,500...)，那么就会直接执行<code>catch()</code></p><h1 id="全局配置" tabindex="-1"><a class="header-anchor" href="#全局配置" aria-hidden="true">#</a> 全局配置</h1><p>在上面的示例中, 我们的BaseURL是固定的</p><p>如果<code>import axios from &quot;axios&quot;</code>，那么这个axios就是一个全局对象，如果我们发送请求的所有url都是相同的，那么我们可以抽取<code>baseURL</code>，这样在发送get等请求的时候，就可以直接写资源路径和参数就行</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">&quot;http://api.vipblogs.cn/&quot;</span>\naxios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/msinfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',7),c=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210723202811966.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),l=(0,p.uE)('<h1 id="实例axios" tabindex="-1"><a class="header-anchor" href="#实例axios" aria-hidden="true">#</a> 实例axios</h1><ul><li>为什么要创建axios的实例呢? 当我们从axios模块中导入对象时, 使用的实例是默认的实例. 当给该实例设置一些默认配置时, 这些配置就被固定下来了. 但是后续开发中, 某些配置可能会不太一样. 比如某些请求需要使用特定的baseURL或者timeout或者content-Type等. 这个时候, 我们就可以创建新的实例, 并且传入属于该实例的配置信息.</li></ul><p>使用步骤</p><blockquote><ol><li>创建实例</li><li>使用该实例</li></ol></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//创建实例</span>\n<span class="token keyword">const</span> axiosInstance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">&#39;http://api.vipblogs.cn&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">//使用实例</span>\n<span class="token function">axiosInstance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/msinfo&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h1 id="axios封装" tabindex="-1"><a class="header-anchor" href="#axios封装" aria-hidden="true">#</a> axios封装</h1><p>为什么要封装？</p><blockquote><p>如果我们使用axios框架，在每一个vue文件中，都使用此框架发送请求，那么如果在后期，此框架不会维护，我们需要换成其他的框架，那么这个时候，我们就需要每一个组件进行更改，并且还需要改大量的代码，这样可能还会出现很多预想不到的问题，所以就需要对请求进行封装</p><p><code>封装的核心就是，我们将所有发送请求都抽离出来，创建新的js文件，存放，然后我们在需要发送请求的组件中，传入对应的参数，url等，就可以拿到响应回来的data数据，这样，到时候更换框架时候，我们就不用更改组件中的代码，只需修改发送请求的代码，只要保证他们能够返回data就行</code></p></blockquote><p>这个是老师进行封装的</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//netword/axios.js</span>\n<span class="token keyword">import</span> originAxios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getTall</span><span class="token punctuation">(</span><span class="token parameter">option</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">//1. 创建实例</span>\n        <span class="token keyword">const</span> instance <span class="token operator">=</span> originAxios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">&#39;http://api.vipblogs.cn&#39;</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">500</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n        <span class="token comment">//2. 传入对象发送请求</span>\n        <span class="token function">instance</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//使用 main.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>getTall<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./network/axios&quot;</span><span class="token punctuation">;</span>\n\n<span class="token function">getTall</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;tall&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">isrefund</span><span class="token operator">:</span> <span class="token number">0</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>成功返回数据，但是返回的数据，还是包含其他的属性</p><p>其封装的核心，就是此请求方法返回一个Promise对象，当请求发送成功，返回数据时，调用<code>axios实例.then()</code>，然后在此方法中，调用<code>resolve(res)</code>，那么就会回到组件中，调用此方法的<code>then()</code>处，进行数据处理，因为此方法返回Promise对象，但是这里，应该在发送请求方法中，就将需要的数据从响应体中取出，返回，下面是我封装的</p>',12),u=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210723211250161.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),r=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210723211621305.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),i=(0,p.uE)('<p>这里的baseURL等属性，应该是写在这个文件中，这样写的好处就是容易改，组件传入的对象，</p><p>在instance处传入对象，在组件中，将需要的参数，请求的形式等写在一个对象中，最好不要在此处就将url，params写死（option.url,option.param），这样不容易维护</p><h1 id="拦截器" tabindex="-1"><a class="header-anchor" href="#拦截器" aria-hidden="true">#</a> 拦截器</h1><p>axios提供了拦截器，用于我们在发送每次请求或者得到相应后，进行对应的处理。</p><p>四种拦截器</p><blockquote><ol><li>请求成功</li><li>请求失败</li><li>响应成功</li><li>响应失败</li></ol></blockquote><p>使用</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//1. 创建实例</span>\n<span class="token keyword">const</span> instance <span class="token operator">=</span> originAxios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">&#39;http://api.vipblogs.cn&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">500</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\ninstance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;来到request拦截成功中&quot;</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> config\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;来到request拦截失败中&quot;</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\ninstance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;来到response拦截成功中&quot;</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> response\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;来到resonse拦截失败中&quot;</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">//2. 传入对象发送请求</span>\n<span class="token function">instance</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;响应成功----&quot;</span><span class="token punctuation">)</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div>',8),k=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210723212757390.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),b=(0,p._)("p",null,"响应的失败拦截中，可以根据status判断报错的错误码，跳转到不同的错误提示页面",-1),m=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210723212824456.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),d=(0,p.uE)('<h2 id="axios发送文件上传请求" tabindex="-1"><a class="header-anchor" href="#axios发送文件上传请求" aria-hidden="true">#</a> axios发送文件上传请求</h2><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getFile($event)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>photos<span class="token punctuation">&quot;</span></span> <span class="token attr-name">multiple</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multiple<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n      <span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;photos&quot;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>\n      formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>\n      formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;appId&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;lnZxmObbJSp3o8Zea2KXxPwat&quot;</span><span class="token punctuation">)</span>\n      formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;appKey&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;6TleVWdLeVwpOKv9eXtTQUam7&quot;</span><span class="token punctuation">)</span>\n      network<span class="token punctuation">.</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:8901&#39;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/mood/add&#39;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">70000</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token string-property property">&quot;Content-type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;multipart/form-data;&quot;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> formData<span class="token punctuation">,</span>\n\n        <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span>\n        <span class="token comment">/*transformRequest: [function () {\n          return formData\n        }]*/</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>多个文件上传也是上面的方式</p>',4),g={},h=(0,a(83744).Z)(g,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,o,c,l,u,r,i,k,b,m,d],64)}]])}}]);