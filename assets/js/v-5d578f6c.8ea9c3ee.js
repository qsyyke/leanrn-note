"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9812],{10260:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-5d578f6c",path:"/javaweb/%E8%AF%B7%E6%B1%82.html",title:"浏览器请求",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"GenericServlet",slug:"genericservlet",children:[]},{level:2,title:"HttpServlet",slug:"httpservlet",children:[]},{level:2,title:"HTTP版本",slug:"http版本",children:[]},{level:2,title:"请求行",slug:"请求行",children:[{level:3,title:"GET",slug:"get",children:[]},{level:3,title:"POST",slug:"post",children:[]},{level:3,title:"GET与POST方法有以下区别：",slug:"get与post方法有以下区别",children:[]},{level:3,title:"HEAD",slug:"head",children:[]}]},{level:2,title:"请求头",slug:"请求头",children:[{level:3,title:"Connection：",slug:"connection",children:[]},{level:3,title:"Host（发送请求时，该报头域是必需的）",slug:"host-发送请求时-该报头域是必需的",children:[]}]},{level:2,title:"请求体",slug:"请求体",children:[]},{level:2,title:"request",slug:"request",children:[]},{level:2,title:"org.apache.catalina.connector.RequestFacade ---\x3e HttpServletRequest接口 ---\x3e  ServletRequest 接口",slug:"org-apache-catalina-connector-requestfacade-httpservletrequest接口-servletrequest-接口",children:[]},{level:2,title:"获取请求行信息",slug:"获取请求行信息",children:[]},{level:2,title:"获取请求头信息",slug:"获取请求头信息",children:[]},{level:2,title:"获取请求体信息",slug:"获取请求体信息",children:[]},{level:2,title:"获取参数重要方法",slug:"获取参数重要方法",children:[]},{level:2,title:"中文乱码问题",slug:"中文乱码问题",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},95295:(n,s,a)=>{a.r(s),a.d(s,{default:()=>I});var t=a(66252);const e=(0,t.uE)('<h1 id="浏览器请求" tabindex="-1"><a class="header-anchor" href="#浏览器请求" aria-hidden="true">#</a> 浏览器请求</h1><p>请求方式一共有7中，但是常用的就是只有post和get请求，直接在浏览器中输入地址进入的方式是get请求</p><h1 id="genericservlet类和httpservlet" tabindex="-1"><a class="header-anchor" href="#genericservlet类和httpservlet" aria-hidden="true">#</a> GenericServlet类和HttpServlet</h1><h2 id="genericservlet" tabindex="-1"><a class="header-anchor" href="#genericservlet" aria-hidden="true">#</a> GenericServlet</h2><p>GenericServlet已经实现了servlet接口，并且重写了除了service方法，因为其他的方法我们不经常使用，如果我们想要使用其他的方法的话，就自己重写那个方法就行，我们必须要重写service方法</p><p>但是这个类，也并不是常用的</p><h2 id="httpservlet" tabindex="-1"><a class="header-anchor" href="#httpservlet" aria-hidden="true">#</a> HttpServlet</h2><p>这是一个抽象类，但是里面的方法都没有抽象方法，这个类继承于GenericSerivlet类，并且重写了</p><p>因为请求方式一共有7中，所以，这个类中一个写了7个请求的方法，像doget()，dopost()方法，在service方法中已经按照请求的方式进行if语句的判断，每一个请求方式判断正确就会调用那个do请求方法</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">long</span> lastModified<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastModified <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;HEAD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            lastModified <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">maybeSetLastModified</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> lastModified<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doHead</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;PUT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPut</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;DELETE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doDelete</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;OPTIONS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doOptions</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;TRACE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doTrace</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token class-name">String</span> errMsg <span class="token operator">=</span> lStrings<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;http.method_not_implemented&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> errArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>method<span class="token punctuation">}</span><span class="token punctuation">;</span>\n            errMsg <span class="token operator">=</span> <span class="token class-name">MessageFormat</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">,</span> errArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            resp<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">501</span><span class="token punctuation">,</span> errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>所以我们如果要测试的话，那么我们就直接重写doget(),dopost()方法就行</p><p>如果想要测试get请求的话，很简单，因为直接在浏览器中输入地址进入，就是一个get请求</p><h1 id="urlpartten配置" tabindex="-1"><a class="header-anchor" href="#urlpartten配置" aria-hidden="true">#</a> urlpartten配置</h1><p>因为注解中的urlpartten可以定义一个数组，所以我们就可以为其设置多个不同的资源路径</p><ol><li><p>@WebServlet({&quot;/d4&quot;,&quot;/demon4&quot;,&quot;/dd4&quot;})</p></li><li><p>@WebServlet(&quot;/user/d/d4&quot;)</p><p>这种设置资源路径，属于多层结构，我们只有准确写出这个，才能访问</p><p><strong>localhost/user/d/d4</strong>其他的路径不会访问到</p></li><li><p>@WebServlet(&quot;/user/*&quot;)这里的<code>*</code>代表所有的，可以在/user/后面加入任何的东西</p><p>localhost/user/sdfsdlfkj,localhost/user/sdfkhsdkfhskdf都可以访问到</p></li><li><p>@WebServlet(&quot;/*&quot;)这种方式，就是输入任何内容，都可以访问到，因为星号代表所有，<strong>localhost/sdlfh</strong> ,localhost/sdfihsdkfh,</p><p>如果文件中存在一个路径<strong>localhost/d3</strong>,我们也在这里用<code>(/*)</code>的方式进行访问，如果输入的地址也是<strong>localhost/d3</strong>，那么访问的还是真实存在的这个路径资源，因为星号这种方式的级别特别低</p></li><li><p>@WebServlet(&quot;*.do&quot;)这种方式，输入任何的<code>.do</code>都可以访问到资源</p></li></ol><h1 id="http概述" tabindex="-1"><a class="header-anchor" href="#http概述" aria-hidden="true">#</a> HTTP概述</h1><p>缩写：Hyper Text Transfer Protocol 超文本传输协议</p><p>定义了，客户端和服务器端进行通信时，发送数据的格式</p><p>特点：这是一种基于tcp/ip的高级协议</p><p>默认端口号80</p><p>是一种基于请求/响应模型，也就是一次请求对应一次响应</p><p>无状态，每次请求都是相互独立的，请求之间不能进行数据的交互</p><h2 id="http版本" tabindex="-1"><a class="header-anchor" href="#http版本" aria-hidden="true">#</a> HTTP版本</h2><p>一共有两个版本1.0和1.1</p><p>1.0 没请求一次，并且响应成功，就断开，再进行下一次的请求，这种方式浪费资源，</p><p>1.1 这个版本会复用上一次请求的连接，不会断开，直到实在是没有请求为止</p><p>如果在浏览器中输入baidu.com，一共进行多少次请求？</p><p>​ 答案是很多次，并不是一次，应为加载图片。JavaScript，css都需要建立请求，我们可以打开f12，network进行查看</p>',28),p=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214235658131.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),o=(0,t._)("h1",{id:"http请求参数",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#http请求参数","aria-hidden":"true"},"#"),(0,t.Uk)(" HTTP请求参数")],-1),c=(0,t._)("h2",{id:"请求行",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#请求行","aria-hidden":"true"},"#"),(0,t.Uk)(" 请求行")],-1),l=(0,t._)("p",null,"请求的第一行是“方法 URL 协议/版本”，并以 回车换行作为结尾。请求行以空格分隔。格式如下：",-1),u=(0,t._)("p",null,"GET /index.html HTTP/1.1",-1),r=(0,t._)("p",null,"以上代码中“GET”代表请求方法，“//ndex.html”表示URI，“HTTP/1.1代表协议和协议的版本",-1),i=(0,t._)("p",null,[(0,t.Uk)("查看请求行的时候，点击"),(0,t._)("strong",null,"Request Headers"),(0,t.Uk)("便可以查看")],-1),k=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210215103904158.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),d=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image-20210215103956016",originSrc:"C:%5CUsers%5Cchuchen%5CPictures%5C%E8%A7%86%E9%A2%91%E6%88%AA%E5%9B%BE%5Cjavaweb%5Cweb%5Cimage-20210215103956016.png",data:"aurora"})],-1),b=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210215095245240.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),h=(0,t._)("h3",{id:"get",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#get","aria-hidden":"true"},"#"),(0,t.Uk)(" GET")],-1),m=(0,t._)("p",null,"​ GET 方法用于获取由 Request-URI 所标识的资源的信息，常见的形式是：",-1),g=(0,t._)("p",null,"​ GET Request-URI HTTP/1.1 ​ GET方法是默认的HTTP请求方法，例如当我们通过在浏览器的地址栏中直接输入网址的方式去访问网页的时候，浏览器采用的就是 GET 方法向服务器获取资源。",-1),q=(0,t.Uk)("​ 我们可以使用GET方法来提交表单数据，用GET方法提交的表单数据只经过了简单的编码，同时它将作为URL的一部分向服务器发送，因此，如果使用GET方法来提交表单数据就存在着安全隐患上。例如： ​ "),v={href:"http://127.0.0.1/login.jsp?Name=zhangshi&Age=30&Submit=%cc%25E+%BD%BB",target:"_blank",rel:"noopener noreferrer"},f=(0,t.Uk)("Http://localhost/login.php?username=aa&password=1234"),S=(0,t.uE)('<p>​ 从上面的URL请求中，很容易就可以辩认出表单提交的内容。（？之后的内容）另外由于GET方法提交的数据是作为URL请求的一部分所以提交的数据量不能太大。这是因为浏览器对url的长度有限制</p><p>​ 各种浏览器也会对url的长度有所限制，下面是几种常见浏览器的url长度限制:(单位:字符)</p><p>IE : 2803</p><p>Firefox:65536</p><p>Chrome:8182</p><p>Safari:80000</p><p>Opera:190000</p><h3 id="post" tabindex="-1"><a class="header-anchor" href="#post" aria-hidden="true">#</a> POST</h3><p>​ POST方法是GET方法的一个替代方法，它主要是向Web服务器提交表单数据，尤其是大批量的数据。 username=aa&amp;password=1234</p><p>​ POST方法克服了GET方法的一些缺点。通过POST方法提交表单数据时，数据不是作为URL请求的一部分而是作为标准数据传送给Web服务器，这就克服了GET方法中的信息无法保密和数据量太小的缺点。因此，出于安全的考虑以及对用户隐私的尊重，通常表单提交时采用POST方法。</p><h3 id="get与post方法有以下区别" tabindex="-1"><a class="header-anchor" href="#get与post方法有以下区别" aria-hidden="true">#</a> <strong>GET与POST方法有以下区别：</strong></h3><p>1、 在客户端，Get方式在通过URL提交数据，数据在URL中可以看到；POST方式，数据放在HTTP包的body中。</p><p>2、 GET方式提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST则没有此限制。</p><p>3、安全性问题。正如在（1）中提到，使用 Get 的时候，参数会显示在地址栏上，而 Post 不会。所以，如果这些数据是中文数据而且是非敏感数据，那么使用 get；如果用户输入的数据不是中文字符而且包含敏感数据，那么还是使用 post为好。</p><p>4.、服务器取值方式不一样。GET方式取值，如php可以使用$_GET来取得变量的值，而POST方式通过$_POST来获取变量的值。</p><h3 id="head" tabindex="-1"><a class="header-anchor" href="#head" aria-hidden="true">#</a> HEAD</h3><p>HEAD 方法与 GET 方法几乎是相同的，它们的区别在于 HEAD 方法只是请求消息报头，而不是完整的内容。对于 HEAD 请求的回应部分来说，它的 HTTP 头部中包含的信息与通过 GET 请求所得到的信息是相同的。利用这个方法，不必传输整个资源内容，就可以得到 Request-URI 所标识的资源的信息。这个方法通常被用于测试超链接的有效性，是否可以访问，以及最近是否更新。</p><p><strong>要注意的是，在 HTML 文档中，书写 get 和 post，大小写都可以，但在 HTTP 协议中的 GET 和 POST 只能是大写形式。</strong></p><h2 id="请求头" tabindex="-1"><a class="header-anchor" href="#请求头" aria-hidden="true">#</a> 请求头</h2><blockquote><p>服务器端域</p></blockquote><h3 id="connection" tabindex="-1"><a class="header-anchor" href="#connection" aria-hidden="true">#</a> <strong>Connection：</strong></h3><p>作用：表示是否需要持久连接。</p>',22),y=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210215105301864.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),T=(0,t._)("p",null,"如果服务器看到这里的值为“Keep-Alive”，或者看到请求使用的是HTTP 1.1（HTTP 1.1默认进行持久连接）,它就可以利用持久连接的优点，当页面包含多个元素时（例如Applet，图片），显著地减少下载所需要的时间。要实现这一点，服务器需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小；",-1),x=(0,t._)("p",null,"例如：　Connection: keep-alive 当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的 网页，会继续使用这一条已经建立的连接",-1),w=(0,t._)("p",null,"例如： Connection: close 代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭， 当客户端再次发送Request，需要重新建立TCP连接。",-1),E=(0,t._)("h3",{id:"host-发送请求时-该报头域是必需的",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#host-发送请求时-该报头域是必需的","aria-hidden":"true"},"#"),(0,t.Uk)(),(0,t._)("strong",null,"Host（发送请求时，该报头域是必需的）")],-1),P=(0,t._)("p",null,"Host请求报头域主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的。",-1),_=(0,t.Uk)("eg："),R={href:"http://%3Blocalhost/index.html",target:"_blank",rel:"noopener noreferrer"},j=(0,t.Uk)("http://；localhost/index.html"),H=(0,t.Uk)(" 浏览器发送的请求消息中，就会包含Host请求报头域，如下： Host："),U={href:"http://www.guet.edu.cn/",target:"_blank",rel:"noopener noreferrer"},G=(0,t.Uk)("localhos"),O=(0,t.Uk)("t"),z=(0,t.uE)('<p>此处使用缺省端口号80，若指定了端口号8080，则变成：Host：localhost:8080</p><h2 id="请求体" tabindex="-1"><a class="header-anchor" href="#请求体" aria-hidden="true">#</a> 请求体</h2><p>请注意：get请求没有请求体，只有post请求才有请求体</p><h1 id="获取请求信息" tabindex="-1"><a class="header-anchor" href="#获取请求信息" aria-hidden="true">#</a> 获取请求信息</h1><h2 id="request" tabindex="-1"><a class="header-anchor" href="#request" aria-hidden="true">#</a> request</h2><p>Request类的请求继承关系</p><blockquote><h2 id="org-apache-catalina-connector-requestfacade-httpservletrequest接口-servletrequest-接口" tabindex="-1"><a class="header-anchor" href="#org-apache-catalina-connector-requestfacade-httpservletrequest接口-servletrequest-接口" aria-hidden="true">#</a> org.apache.catalina.connector.RequestFacade ---&gt; HttpServletRequest接口 ---&gt; ServletRequest 接口</h2><p>org.apache.catalina.connector.RequestFacade是tomcat自己的类，其继承了HttpServletRequest</p></blockquote><p>只要浏览器发送请求并且和服务器建立连接，tomcat服务器就会自动创建一个org.apache.catalina.connector.RequestFacade对象，并且这个类实现了以上请求接口，我们可以直接使用这个请求对象，tomcat已经自动为我们实例化了这个对象</p><h2 id="获取请求行信息" tabindex="-1"><a class="header-anchor" href="#获取请求行信息" aria-hidden="true">#</a> 获取请求行信息</h2><p>获取请求方式</p><blockquote><p>getMethond() 返回String类型</p></blockquote><p>获取虚拟目录</p><blockquote><p>getContextPath()</p></blockquote><p>获取servlet文件</p><blockquote><p>getServletParh()</p></blockquote><p>获取参数</p><blockquote><p>getQueryString()</p><p>如果没有参数的话，那么就返回null</p></blockquote><p>获取URL资源</p><blockquote><p>获取URI getRequestURI()</p></blockquote><blockquote><p>获取URL getRequestURL()</p></blockquote><p>什么是URI？</p><blockquote><p>URI是统一资源标识符，没有host体，/chu/rd1 范围比URL大</p><p>URL是统一资源定位符 localhost/chu/rd1</p></blockquote><p>获取协议版本</p><blockquote><p>getProtocol()</p></blockquote><p>获取客户端的IP 十六进制</p><blockquote><p>getRemoteAdrr()</p></blockquote><h2 id="获取请求头信息" tabindex="-1"><a class="header-anchor" href="#获取请求头信息" aria-hidden="true">#</a> 获取请求头信息</h2><p>通过请求头名字获取</p><blockquote><p>getHeadetName(String s) 返回这个头的值</p></blockquote><p>获取所有的请求头名字</p><blockquote><p>getHeaderNames() 返回的是一个Enumeration<code>&lt;String&gt;</code>类型</p></blockquote><p>Enumeration<code>&lt;String&gt;</code>类型，可以看做是一个迭代器，里面的方法和迭代器的使用相同</p><p>请求头的遍历</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headerNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>headerNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">String</span> name <span class="token operator">=</span> headerNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> value <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;---&gt;&quot;</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="获取请求体信息" tabindex="-1"><a class="header-anchor" href="#获取请求体信息" aria-hidden="true">#</a> 获取请求体信息</h2><p>只有post请求才有请求体</p><p>获取字符流</p><blockquote><p>BufferedReader getReader() 只能用于字符</p></blockquote><p>获取字节流</p><blockquote><p>ServletInputStream getInputStream() 可以用于上传文件</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//获取请求体信息</span>\n<span class="token class-name">ServletInputStream</span> ins <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">OutputStream</span> ous <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\360downloads\\\\22.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> available <span class="token operator">=</span> ins<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>available<span class="token punctuation">]</span><span class="token punctuation">;</span>\nous<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>\nous<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n使用这种方式实现文件的上传不太行\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="获取参数重要方法" tabindex="-1"><a class="header-anchor" href="#获取参数重要方法" aria-hidden="true">#</a> 获取参数重要方法</h2><p>下面的这些方法对于get请求还有post请求都能够使用</p><p>通过名称获取参数值</p><blockquote><p>getParameter(String name) 返回值</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>通过名称获取数组值，通常用于有多个选框，这种情况名称是相同的</p><blockquote><p>getParameterValues(String name) String[] value 返回一个值数组</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hobbies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">&quot;hobby&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> hobby <span class="token operator">:</span> hobbies<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>获取所有名称的map集合</p><blockquote><p>getParameterMap() 返回map集合</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> parameterMap <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strings <span class="token operator">=</span> parameterMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> strings<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//通过参数名获取值</span>\n            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterValues <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> parameterValue <span class="token operator">:</span> parameterValues<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;---&gt;&quot;</span><span class="token operator">+</span>parameterValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>遍历map集合的方式有几种，可以转化为set集合，使用迭代器，也可以转化为entry集合</p><p>获取所有的参数名称，返回的是一个Enumeration对象，相当于迭代器</p><blockquote><p>getParameterNames() 返回一个Enumeration<code>&lt;String&gt;</code>对象</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parameterNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>parameterNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">String</span> name <span class="token operator">=</span> parameterNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取名称</span>\n            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterValues <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> parameterValue <span class="token operator">:</span> parameterValues<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">&quot;---&gt;&quot;</span><span class="token operator">+</span>parameterValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="中文乱码问题" tabindex="-1"><a class="header-anchor" href="#中文乱码问题" aria-hidden="true">#</a> 中文乱码问题</h2><p>这种问题是对于post请求，对于get请求，从Tomcat 8版本开始，Tomcat内部就已经解决了乱码情况，但是还是每一次编写都解决这个问题</p><p>设置请求的编码方式</p><blockquote><p>request.setCharacterEncoding(&quot;utf-8&quot;)</p></blockquote><p>如果不设置的话，对于post请求，如果输入的是中文，那么结果就会出现乱码，问号</p>',61),A=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210215223115406.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),C=(0,t.uE)('<p>响应对象应该也需要设置</p><h1 id="请求转发" tabindex="-1"><a class="header-anchor" href="#请求转发" aria-hidden="true">#</a> 请求转发</h1><p>通过从一个servlet类中跳转到另一个servlet类中，可以实现资源的跳转</p><p>步骤</p><ol><li><p>通过请求对象获取请求转发器对象</p><blockquote><p>RequestDispatcher requestDispatcher = request.getRequestDispatcher(String url);</p></blockquote></li></ol><p>注意，这里的参数url不能设置为统一资源定位符或者是统一资源标识符，只需要设置为servlet文件就行**/rd6**</p><ol start="2"><li><p>使用RequestDispatcher对象来进行转发：</p><blockquote><p>forward(ServletRequest request, ServletResponse response)</p></blockquote></li></ol><p>推荐连着写</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/rd6&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>注意： 请求转发的时候，只能是对应请求方式之间的转发，如果servlet1的请求方式是get，但是你转发的数据是servlet的post请求，那么就不能进行转发</p>',10),L=(0,t._)("blockquote",null,[(0,t._)("p",null,"特点"),(0,t._)("ol",null,[(0,t._)("li",null,[(0,t._)("p",null,"浏览器的地址不会发生变化，尽管在内部访问的是两个servlet文件，但是浏览器中的地址是一个")]),(0,t._)("li",null,[(0,t._)("p",null,"只能转发内部的资源，对于外部的资源不能进行转发"),(0,t._)("p",null,"外部资源像另一个module项目")]),(0,t._)("li",null,[(0,t._)("p",null,"不仅仅是针对于java程序，我们还可以是web页面"),(0,t._)("p",null,"但是不知道为什么会出现这种情况"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210215231705078.png?x-oss-process=style/pictureProcess1",data:"aurora"})])]),(0,t._)("li",null,[(0,t._)("p",null,"转发请求只有一个，通过抓包就可以看到"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210215231810275.png?x-oss-process=style/pictureProcess1",data:"aurora"})])])])],-1),M=(0,t.uE)('<h1 id="域对象" tabindex="-1"><a class="header-anchor" href="#域对象" aria-hidden="true">#</a> 域对象</h1><p>什么是域对象：</p><blockquote><p>就是在一个servlet文件中，可以将一个对象（变量）进行存储，在进行请求转发的时候，就可以在另一个servlet文件中使用这个对象</p></blockquote><p>步骤</p><blockquote><ol><li><p>存储对象</p><p>request.setAttribute(String s,Object o); 存储数据</p><p>s参数可以在请求转发到的那个文件中通过这个s获得这个o对象 o对象是需要存储的数据，什么数据都可以</p></li><li><p>在另一个servlet文件中获取这个对象</p><p>Object msg = request.getAttribute(Stirng s);</p></li></ol></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存储数据</span>\n       request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/rd6&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">//获取对象</span>\n<span class="token class-name">Object</span> msg <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>注意：</p><blockquote><p>在进行域对象的存储的时候，一定要在请求转发之前就进行存储，如果在请求转发之后进行，那么会另一servlet文件获取这个对象时，会返回null</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/rd6&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nrequest<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存储数据</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',9),D={},I=(0,a(83744).Z)(D,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,p,o,c,l,u,r,i,k,d,b,h,m,g,(0,t._)("p",null,[q,(0,t._)("a",v,[f,(0,t.Wm)(a)])]),S,y,T,x,w,E,P,(0,t._)("p",null,[_,(0,t._)("a",R,[j,(0,t.Wm)(a)]),H,(0,t._)("a",U,[G,(0,t.Wm)(a)]),O]),z,A,C,L,M],64)}]])}}]);