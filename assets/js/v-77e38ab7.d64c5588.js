"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[281],{55025:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-77e38ab7",path:"/linux/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6.html",title:"Linux中的任务调度",lang:"en-US",frontmatter:{date:"2021/12/18 21:18",title:"Linux中的任务调度"},excerpt:"",headers:[{level:2,title:"基础语法",slug:"基础语法",children:[]},{level:2,title:"时间表",slug:"时间表",children:[]},{level:2,title:"实战",slug:"实战",children:[]},{level:2,title:"crond相关指令",slug:"crond相关指令",children:[]},{level:2,title:"at定时任务",slug:"at定时任务",children:[{level:3,title:"命令",slug:"命令",children:[]},{level:3,title:"at 指定时间的方法",slug:"at-指定时间的方法",children:[]},{level:3,title:"案例",slug:"案例",children:[]}]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},93484:(s,n,a)=>{a.r(n),a.d(n,{default:()=>q});var e=a(66252);const c=(0,e._)("p",null,[(0,e._)("code",null,"crontab"),(0,e.Uk)("进行定时任务的设置")],-1),o=(0,e._)("p",null,[(0,e._)("code",null,"任务调度"),(0,e.Uk)("：是指系统在某个时间执行的特定的命令或程序。")],-1),t=(0,e._)("p",null,[(0,e._)("code",null,"任务调度分类"),(0,e.Uk)("：1.系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等")],-1),l=(0,e._)("p",null,[(0,e._)("code",null,"个别用户工作"),(0,e.Uk)("：个别用户可能希望执行某些程序，比如对 mysql 数据库的备份。")],-1),p=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211218212011333.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),i=(0,e.uE)('<h2 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法" aria-hidden="true">#</a> 基础语法</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">crontab</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',2),r=(0,e._)("blockquote",null,[(0,e._)("p",null,"常用选项"),(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211218212039727.png?x-oss-process=style/pictureProcess1",data:"aurora"})])],-1),d=(0,e._)("h2",{id:"时间表",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#时间表","aria-hidden":"true"},"#"),(0,e.Uk)(" 时间表")],-1),u=(0,e._)("p",null,"一共有五个占位符",-1),m=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211218212601653.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),b=(0,e.uE)('<div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>这里的占位符，一定不能搞错他们的顺序，他们依次为<code>分，时，日，月，星期几</code></p><p>可以理解为<code>某月几号几时几分周几</code>执行，这里没有年，当如果某个占位符为<code>*</code>，表示该占位符内的所有文件</p><p><code>12 * 5 1 *</code>表示每年1月5号这一天内，每小时12分的时候，执行一次，我感觉这里的周几已经没有用了，这里不能想成这一天内，每隔<code>12</code>分执行一次，<code>*/12</code>才是每隔12分钟执行一次</p></div><p>特殊符号sakdb</p>',2),g=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211218212635104.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),h=(0,e.uE)('<div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>这里的特殊符号，一定要记得<code>,</code>表示的是连续，<code>0 8,12,16 * * *</code>中的0 <code>8,12,16</code> * * *是一个整体</p><p>同理<code>0 5 * * 1-6</code>中的0 5 * * <code>1-6</code>也是一个整体</p></div><p>案例</p>',2),k=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211218212646452.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),v=(0,e.uE)('<h2 id="实战" tabindex="-1"><a class="header-anchor" href="#实战" aria-hidden="true">#</a> 实战</h2><ul><li><p>每隔 1 分钟，就将当前的日期信息，追加到 /tmp/mydate 文件中</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>*/1 * * * * <span class="token function">date</span> <span class="token operator">&gt;&gt;</span> /tem/mydate \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>每隔 1 分钟， 将当前日期和日历都追加到 /home/mycal 文件中</p><ul><li><p>方式一</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>*/1 * * * * <span class="token function">cal</span> <span class="token operator">&gt;&gt;</span> /home/mycal\n*/1 * * * * <span class="token function">date</span> <span class="token operator">&gt;&gt;</span> /home/mycal\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这种方式就是在<code>/etc/crontab</code>文件里面，写上两天调度指令</p></li><li><p>方式二</p><p>这种方式是我们推荐的做法，也就是我们<code>cal &gt;&gt; /home/mycal</code>和<code>date &gt;&gt; /home/mycal</code>写在同一个脚本文件<code>my.sh</code>里面(<code>记得设置该脚本拥有可执行权利</code>)，然后我们在<code>crontab</code>写上<code>*/1 * * * * ./my.sh</code>就行</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /home\n<span class="token function">vim</span> my.sh <span class="token comment"># date &gt;&gt; mydate</span>\n<span class="token function">chmod</span> <span class="token assign-left variable">u</span><span class="token operator">=</span>+x mydate\n<span class="token builtin class-name">cd</span> /etc\n<span class="token function">crontab</span> -e  <span class="token comment"># */1 * * * * /home/my.sh</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul></li></ul><h2 id="crond相关指令" tabindex="-1"><a class="header-anchor" href="#crond相关指令" aria-hidden="true">#</a> crond相关指令</h2><p>我们把<code>crontab</code>也叫做<code>crond</code></p><p><code>conrtab –r</code>：终止任务调度。</p><p><code>crontab –l</code>：列出当前有那些任务调度</p><p><code>service crond restart</code> [重启任务调度]</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>其实<code>crontab -r</code>也就是清除<code>crontab -e</code>编辑的内容，就行了</p></div><h2 id="at定时任务" tabindex="-1"><a class="header-anchor" href="#at定时任务" aria-hidden="true">#</a> at定时任务</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li><code>at</code>命令是一次性定时计划任务，at的守护进程·atd·会以后台模式运行，检查作业队列来运行。</li><li>默认情况下，<code>atd</code>守护进程每 60 秒检查作业队列，有作业时，会检查作业运行时间，如果时间与当前时间匹配，则运行此作业。</li><li>at 命令是一次性定时计划任务，执行完一个任务后不再执行此任务了</li><li>在使用 at 命令的时候，一定要保证 atd 进程的启动 , 可以使用相关指令来查看</li><li><code>ps -ef | grep atd</code> 可以检测 atd 是否在运行</li></ul><blockquote><p><code>一定要记得,crondtab命令是定时的，执行完成之后，下次再到该段时间点，便会执行，但是at并不会，这个执行完成之后，就不会在执行了，执行完成之后，会自动从计划任务堆栈中，移除这个计划</code></p></blockquote></div>',10),y=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211219131410782.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),x=(0,e.uE)('<div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>默认情况下，<code>atd</code>守护现成会每个60秒，向job队列中，去查看这些队列中，哪些任务需要执行，如果那个任务已经可以执行了的话，那么就会自动执行我们设置的那个任务，执行完成，从队列中移除</p></div><h3 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>at <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>时间<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>当我们使用<code>at</code>指令，输入任务之后，一定要<code>Ctrl + D</code>结束 at 命令的输入， 这个<code>ctrl d</code>需要按住两次</p></blockquote>',4),f=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("p",null,"常用选项"),(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211219131810181.png?x-oss-process=style/pictureProcess1",data:"aurora"})])])],-1),_=(0,e.uE)('<h3 id="at-指定时间的方法" tabindex="-1"><a class="header-anchor" href="#at-指定时间的方法" aria-hidden="true">#</a> at 指定时间的方法</h3><ul><li><p>接受在当天的<code>hh:mm</code>（小时:分钟）式的时间指定。假如该时间已过去，那么就放在第二天执行。 例如：04:00</p></li><li><p>使用 <code>midnight</code>（深夜），<code>noon</code>（中午），<code>teatime</code>（饮茶时间，一般是下午 4 点）等比较模糊的词语来指定时间。</p></li><li><p>采用 12 小时计时制，即在时间后面加上 <code>AM</code>（上午）或 <code>PM</code>（下午）来说明是上午还是下午。 例如：12pm</p></li><li><p>指定命令执行的具体日期，指定格式为<code>month day</code>（月 日）或 <code>mm/dd/yy</code>（月/日/年）或 <code>dd.mm.yy</code>（日.月.年），指定的日期必须跟在指定时间的后面。 例如：04:00 2021-03-1</p></li><li><p>使用相对计时法。指定格式为：</p><p><code>now + count time-units</code>，</p><p>now 就是当前时间，</p><p>time-units 是时间单位，这里能够是 minutes（分钟）、hours（小时）、days（天）、weeks（星期）。count 是时间的数量，几天，几小时。 例如：<code>now + 5 minutes</code>就表示5分钟之后执行</p></li><li><p>直接使用 <code>today</code>（今天）、<code>tomorrow</code>（明天）来指定完成命令的时间</p></li></ul><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h3><ul><li><p>两天后，下午五点执行</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@qsyyke ~<span class="token punctuation">]</span><span class="token comment"># at 5pm + 2 days</span>\nat<span class="token operator">&gt;</span> dae <span class="token operator">&gt;&gt;</span> /home/tem/2pm2dayat<span class="token operator">&lt;</span>EOT<span class="token operator">&gt;</span>\njob <span class="token number">6</span> at Tue Dec <span class="token number">21</span> <span class="token number">17</span>:00:00 <span class="token number">2021</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>当执行完成之后，我们可以看到这里出现了一个<code>job 6 at Tue Dec 21 17:00:00 2021</code>，前面的<code>job 6</code>就是此任务的编号，后面的是，该任务最终会在哪个点执行</p></blockquote></li><li><p>查看系统中没有执行的工作任务</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@qsyyke ~<span class="token punctuation">]</span><span class="token comment"># atq</span>\n<span class="token number">6</span>\tTue Dec <span class="token number">21</span> <span class="token number">17</span>:00:00 <span class="token number">2021</span> a root\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>明天 17 点钟，输出时间到指定文件内 比如/home/tem/tomorrow5pm.log</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@qsyyke ~<span class="token punctuation">]</span><span class="token comment"># at 5pm tomorrow</span>\nat<span class="token operator">&gt;</span> <span class="token function">date</span> <span class="token operator">&gt;</span> /home/tem/tomorrow5pm.log\njob <span class="token number">7</span> at Mon Dec <span class="token number">20</span> <span class="token number">17</span>:00:00 <span class="token number">2021</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>删除已经设置的任务</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>atrm 任务编号\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@qsyyke ~<span class="token punctuation">]</span><span class="token comment"># atq</span>\n<span class="token number">6</span>\tTue Dec <span class="token number">21</span> <span class="token number">17</span>:00:00 <span class="token number">2021</span> a root\n<span class="token number">7</span>\tMon Dec <span class="token number">20</span> <span class="token number">17</span>:00:00 <span class="token number">2021</span> a root\n<span class="token punctuation">[</span>root@qsyyke ~<span class="token punctuation">]</span><span class="token comment"># atrm 7</span>\n<span class="token punctuation">[</span>root@qsyyke ~<span class="token punctuation">]</span><span class="token comment"># atq</span>\n<span class="token number">6</span>\tTue Dec <span class="token number">21</span> <span class="token number">17</span>:00:00 <span class="token number">2021</span> a root\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul>',4),z={},q=(0,a(83744).Z)(z,[["render",function(s,n){return(0,e.wg)(),(0,e.iD)(e.HY,null,[c,o,t,l,p,i,r,d,u,m,b,g,h,k,v,y,x,f,_],64)}]])}}]);