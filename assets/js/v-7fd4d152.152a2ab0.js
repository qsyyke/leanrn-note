"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8705],{23127:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-7fd4d152",path:"/java-base/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3.html",title:"jdk1.8中的函数式接口",lang:"en-US",frontmatter:{date:"2022/1/13 20:49",tag:["java","java-base","注解"],categories:["java"]},excerpt:"",headers:[{level:2,title:"使用",slug:"使用",children:[]},{level:2,title:"默认方法",slug:"默认方法",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},15212:(n,a,s)=>{s.r(a),s.d(a,{default:()=>t});const e=(0,s(66252).uE)('<h1 id="jdk1-8中的函数式接口" tabindex="-1"><a class="header-anchor" href="#jdk1-8中的函数式接口" aria-hidden="true">#</a> jdk1.8中的函数式接口</h1><p>今天在学习rabbitmq的时候，遇到了一个注解<code>@FunctionalInterface</code>，以前也没有了解过jdk1.8的新特性，以前也貌似遇到过几次，但是都没有去看，今天去搜，才知道这个是一个函数式接口</p><p>当我们创建一个接口的时候，如果此接口中，只有一个抽象方法，那么我们就可以使用此注解标明该接口是一个函数式接口，记住，只能有一个抽象方法，但是可以有多个默认方法和静态方法</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterFaceTest</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这是默认的方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p>如果我们标明该接口是一个函数式接口之后，那么我们在实例化一个此接口的对象的时候，完全可以使用下面这种方式</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">InterFaceTest</span> interFaceTest <span class="token operator">=</span> name <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;chuchen&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="默认方法" tabindex="-1"><a class="header-anchor" href="#默认方法" aria-hidden="true">#</a> 默认方法</h2><p>在接口中，方法可以运行有方法体，但是必须保证该方法是一个静态方法(<code>static</code>)或者是一个默认方法</p><p>默认方法就是使用<code>default</code>关键字修改的方法，如果某个类，实现该接口，那么可以不用重写该默认方法</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterFaceTest</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这是默认的方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',11),p={},t=(0,s(83744).Z)(p,[["render",function(n,a){return e}]])}}]);