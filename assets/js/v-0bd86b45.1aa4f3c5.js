"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1480],{79406:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-0bd86b45",path:"/spring/springcloud/Gateway.html",title:"spring-gateway",lang:"en-US",frontmatter:{date:"2022/1/20 21:02",tag:["spring cloud","spring","gateway"]},excerpt:"",headers:[{level:2,title:"这是什么？",slug:"这是什么",children:[]},{level:2,title:"能干什么",slug:"能干什么",children:[]},{level:2,title:"为什么需要gateway，而不用zuul？",slug:"为什么需要gateway-而不用zuul",children:[{level:3,title:"他们的区别",slug:"他们的区别",children:[]},{level:3,title:"zuul模型",slug:"zuul模型",children:[]},{level:3,title:"GateWay模型",slug:"gateway模型",children:[]}]},{level:2,title:"三大概念",slug:"三大概念",children:[{level:3,title:"Route(路由)",slug:"route-路由",children:[]},{level:3,title:"predicate(断言)",slug:"predicate-断言",children:[]},{level:3,title:"Filter(过滤)",slug:"filter-过滤",children:[]}]},{level:2,title:"工作流程",slug:"工作流程",children:[]},{level:2,title:"开始",slug:"开始",children:[{level:3,title:"依赖",slug:"依赖",children:[]},{level:3,title:"配置文件",slug:"配置文件",children:[]}]},{level:2,title:"配置",slug:"配置",children:[]},{level:2,title:"动态路由",slug:"动态路由",children:[]},{level:2,title:"Predicate的使用",slug:"predicate的使用",children:[]},{level:2,title:"Filter的使用",slug:"filter的使用",children:[{level:3,title:"自定义过滤器",slug:"自定义过滤器",children:[]}]},{level:2,title:"官方文档解读",slug:"官方文档解读",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},6012:(n,a,s)=>{s.r(a),s.d(a,{default:()=>E});var t=s(66252);const p=(0,t._)("h1",{id:"spring-gateway",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#spring-gateway","aria-hidden":"true"},"#"),(0,t.Uk)(" spring-gateway")],-1),e={href:"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Uk)("官网"),c=(0,t._)("h2",{id:"这是什么",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#这是什么","aria-hidden":"true"},"#"),(0,t.Uk)(" 这是什么？")],-1),o=(0,t._)("p",null,"Cloud全家桶中有个很重要的组件就是网关，在1.x版本中都是采用的Zuul网关； 但是在spring boot2中，spring公司便推出了spring-cloud-gateway，注意这个叫法，网关(gateway)和我们在spring-cloud-gateway中指的gateway是不一样的",-1),u=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220121192748552.png",data:"aurora"})],-1),i=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220121193710753.png",data:"aurora"})],-1),r=(0,t._)("blockquote",null,[(0,t._)("p",null,"网关是挡在所有设备发送请求之前的，如果有nginx的话，那么也可以在nginx之后，网关能够对请求进行过滤还有断言，路由分发等")],-1),k=(0,t._)("p",null,[(0,t._)("code",null,"SpringCloud Gateway"),(0,t.Uk)("作为Spring Cloud生态系统中的网关，目标是替代 Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zuul 2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 1.x非Reactor模式的老版本。而为了提升网关的性能，SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。")],-1),g=(0,t._)("blockquote",null,[(0,t._)("p",null,"SpringCloud Gateway 使用的Webflux中的reactor-netty响应式编程组件，底层使用了Netty通讯框架。"),(0,t._)("p",null,"所以你能在springcloudgateway文档中，看到一段话"),(0,t._)("p",null,"Spring Cloud Gateway requires the Netty runtime provided by Spring Boot and Spring Webflux. It does not work in a traditional Servlet Container or when built as a WAR."),(0,t._)("p",null,[(0,t.Uk)("也就是说，使用spring cloud gateway，我们必须引入"),(0,t._)("code",null,"netty"),(0,t.Uk)("，但是这个已经包含在了spring cloud gateway依赖中")])],-1),d=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220121193448971.png",data:"aurora"})],-1),b=(0,t.uE)('<h2 id="能干什么" tabindex="-1"><a class="header-anchor" href="#能干什么" aria-hidden="true">#</a> 能干什么</h2><p>spring cloud gateway能够反向代理，鉴权，流量控制，熔断，日志监控等功能</p><p>比如当请求的url中，没有携带我们需要的cookie信息的时候，我们能够直接返回错误内容</p><h2 id="为什么需要gateway-而不用zuul" tabindex="-1"><a class="header-anchor" href="#为什么需要gateway-而不用zuul" aria-hidden="true">#</a> 为什么需要gateway，而不用zuul？</h2><ol><li><p>neflix不太靠谱，zuul2.0一直跳票，迟迟不发布</p><p>一方面因为Zuul1.0已经进入了维护阶段，而且Gateway是SpringCloud团队研发的，是亲儿子产品，值得信赖，而且很多功能Zuul都没有用起来也非常的简单便捷，Gateway是基于异步非阻塞模型上进行开发的，性能方面不需要担心。虽然Netflix早就发布了最新的 Zuul 2.x，但 Spring Cloud 貌似没有整合计划。而且Netflix相关组件都宣布进入维护期</p><p>还有一个原因就是spring想要自己出一个，通过借鉴zuul的思想</p></li><li><p>SpringCloud Gateway的特性好</p><p>基于Spring Framework 5, Project Reactor 和 Spring Boot 2.0 进行构建； 动态路由：能够匹配任何请求属性； 可以对路由指定 Predicate（断言）和 Filter（过滤器）； 集成Hystrix的断路器功能； 集成 Spring Cloud 服务发现功能； 易于编写的 Predicate（断言）和 Filter（过滤器）； 请求限流功能； 支持路径重写。</p></li></ol><h3 id="他们的区别" tabindex="-1"><a class="header-anchor" href="#他们的区别" aria-hidden="true">#</a> 他们的区别</h3><p>在SpringCloud Finchley正式版之前，Spring Cloud推荐的网关是Netflix提供的Zuul：</p><p>1、Zuul 1.x，是一个基于阻塞 I/ O 的 API Gateway</p><p>2、Zuul 1.x 基于Servlet 2. 5使用阻塞架构它不支持任何长连接(如 WebSocket) Zuul 的设计模式和Nginx较像，每次 I/ O 操作都是从工作线程中选择一个执行，请求线程被阻塞到工作线程完成，但是差别是Nginx 用C++ 实现，Zuul 用 Java 实现，而 JVM 本身会有第一次加载较慢的情况，使得Zuul 的性能相对较差。</p><p>3、Zuul 2.x理念更先进，想基于Netty非阻塞和支持长连接，但SpringCloud目前还没有整合。 Zuul 2.x的性能较 Zuul 1.x 有较大提升。在性能方面，根据官方提供的基准测试， Spring Cloud Gateway 的 RPS（每秒请求数）是Zuul 的 1. 6 倍。</p><p>4、Spring Cloud Gateway 建立 在 Spring Framework 5、 Project Reactor 和 Spring Boot 2 之上， 使用非阻塞 API。</p><p>5、Spring Cloud Gateway 还 支持 WebSocket， 并且与Spring紧密集成拥有更好的开发体验</p><blockquote><p>在当前的高并发情况下，项zuul1这种阻塞架构已经不能满足我们的需求，如果流量大，那么我们的系统，可能会随时搞崩</p></blockquote><h3 id="zuul模型" tabindex="-1"><a class="header-anchor" href="#zuul模型" aria-hidden="true">#</a> zuul模型</h3><p>Springcloud中所集成的Zuul版本，采用的是Tomcat容器，使用的是传统的Servlet IO处理模型。</p><p>servlet由servlet container进行生命周期管理。 container启动时构造servlet对象并调用servlet init()进行初始化； container运行时接受请求，并为每个请求分配一个线程（一般从线程池中获取空闲线程）然后调用service()。 container关闭时调用servlet destory()销毁servlet；</p>',16),m=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220121194503582.png",data:"aurora"})],-1),h=(0,t._)("h3",{id:"gateway模型",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#gateway模型","aria-hidden":"true"},"#"),(0,t.Uk)(" GateWay模型")],-1),y=(0,t.Uk)("在gateway中，使用到了"),f={href:"https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-new-framework",target:"_blank",rel:"noopener noreferrer"},w=(0,t.Uk)("webflux"),v=(0,t.uE)('<p>传统的Web框架，比如说：struts2，springmvc等都是基于Servlet API与Servlet容器基础之上运行的。 但是在Servlet3.1之后有了异步非阻塞的支持。而WebFlux是一个典型非阻塞异步的框架，它的核心是基于Reactor的相关API实现的。相对于传统的web框架来说，它可以运行在诸如Netty，Undertow及支持Servlet3.1的容器上。非阻塞式+函数式编程（Spring5必须让你使用java8）</p><p>Spring WebFlux 是 Spring 5.0 引入的新的响应式框架，区别于 Spring MVC，它不需要依赖Servlet API，它是完全异步非阻塞的，并且基于 Reactor 来实现响应式流规范。</p><h2 id="三大概念" tabindex="-1"><a class="header-anchor" href="#三大概念" aria-hidden="true">#</a> 三大概念</h2><h3 id="route-路由" tabindex="-1"><a class="header-anchor" href="#route-路由" aria-hidden="true">#</a> Route(路由)</h3><p>路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由</p><h3 id="predicate-断言" tabindex="-1"><a class="header-anchor" href="#predicate-断言" aria-hidden="true">#</a> predicate(断言)</h3><p>参考的是Java8的java.util.function.Predicate 开发人员可以匹配HTTP请求中的所有内容(例如请求头或请求参数)，如果请求与断言相匹配则进行路由</p><h3 id="filter-过滤" tabindex="-1"><a class="header-anchor" href="#filter-过滤" aria-hidden="true">#</a> Filter(过滤)</h3><p>指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</p><blockquote><p>一定要注意，在spring cloud gateway中，路由，断言和过滤，他们是<code>且</code>的关系，也就是说，有一个请求，只有此请求的url和cookie等满足我们设置的<code>spring.cloud.gateway.routes.predicates</code>中的条件的时候，此请求才会去请求真正的<code>spring.cloud.gateway.routes.uri</code></p></blockquote>',10),x=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220121195152568.png",data:"aurora"})],-1),S=(0,t._)("h2",{id:"工作流程",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#工作流程","aria-hidden":"true"},"#"),(0,t.Uk)(" 工作流程")],-1),_=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220121195319923.png",data:"aurora"})],-1),z=(0,t.uE)('<p>客户端向Spring Cloud Gateway发出请求(<code>这个请求的地址是公开的，但是最终的请求的地址，是隐藏在gateway中</code>)，然后在Gateway Handler Mapping中找到与请求相匹配的路由，将其发送到Gateway Web Handler。</p><blockquote><p>这里<code>与请求相匹配的路由</code>是指：</p><p><code>spring.cloud.gateway.routes.predicates</code>中设置的条件，如果满足此<code>predicates</code>设置的<code>所有条件</code>，那么gateway便会去请求真正的地址，这个真正的地址是设置在<code>spring.cloud.gateway.routes.url</code>中的</p></blockquote><p>Handler再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。 过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。</p><p>Filter在“pre”类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等， 在“post”类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用。</p><blockquote><p>其核心逻辑就是</p><p>路由转发+执行过滤器链</p></blockquote><p>在执行的过程中，这个过滤器，推荐使用自定义过滤器，这样能够更满足我们的需要</p><blockquote><p>如果客户端请求的url不存在，或者存在但是不满足设置的<code>spring.cloud.gateway.routes.predicates</code>，那么就会返回一个404 notfound页面，如果<code>spring.cloud.gateway.routes.predicates</code>中的条件满足的情况下，不满足过滤器，那么此时就不会返回404，这个需要看我们在自定义过滤器中，编写的逻辑，在自定义过滤器中，我们可以操作请求参数，cookIe的所有与<code>request</code>和<code>response</code>对象相关的信息，关键就看我们在过滤器中，返回的是什么</p></blockquote><h2 id="开始" tabindex="-1"><a class="header-anchor" href="#开始" aria-hidden="true">#</a> 开始</h2><p>因为<code>spring cloud gateway</code>是针对于微服务的，所以我们需要有注册中心，服务提供者等等</p><h3 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> 依赖</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!--gateway--&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!--eureka-client--&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!--一般基础配置类--&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>\n<span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9527</span>\n\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway\n  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>\n    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>\n      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>\n        <span class="token key atrule">locator</span><span class="token punctuation">:</span>\n          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span>\n      <span class="token key atrule">routes</span><span class="token punctuation">:</span>\n        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh <span class="token comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span>\n          <span class="token comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span>\n          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//CLOUD<span class="token punctuation">-</span>PAYMENT<span class="token punctuation">-</span>SERVICE <span class="token comment">#匹配后提供服务的路由地址</span>\n          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>\n            <span class="token punctuation">-</span> Path=/payment/get/<span class="token important">**</span>         <span class="token comment"># 断言，路径相匹配的进行路由</span>\n            <span class="token comment">#- After=2022-01-20T23:55:44.445+08:00[Asia/Shanghai]</span>\n            <span class="token comment">#- Cookie=chocolate, ch.p</span>\n\n        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh2 <span class="token comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span>\n          <span class="token comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span>\n          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//CLOUD<span class="token punctuation">-</span>PAYMENT<span class="token punctuation">-</span>SERVICE\n          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>\n            <span class="token punctuation">-</span> Path=/payment/lb/<span class="token important">**</span>         <span class="token comment"># 断言，路径相匹配的进行路由</span>\n            <span class="token punctuation">-</span> After=2022<span class="token punctuation">-</span>01<span class="token punctuation">-</span>20T22<span class="token punctuation">:</span>55<span class="token punctuation">:</span>44.445+08<span class="token punctuation">:</span>00<span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span>\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">instance</span><span class="token punctuation">:</span>\n    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway<span class="token punctuation">-</span>service\n  <span class="token key atrule">client</span><span class="token punctuation">:</span> <span class="token comment">#服务提供者provider注册进eureka服务列表内</span>\n    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>\n      <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n      <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><blockquote><p><code>spring.cloud.gateway.uri</code>我们可以写具体的url，如(http://localhost:8001,https://aurora.xcye.xyz)等，也可以写我们服务的提供者名称，但是需要保证，我们在<code>application.yml</code>文件中，配置了<code>eureka.client</code>项，这里注册中心，不一定是<code>eureka</code>，指定固定的uri显然是不正确的方法，因为我们请求的时候，希望是负载均衡模式，所以uri可以写成</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>lb://服务提供者名字\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这里不能省略<code>lb://</code>或者不能改成<code>http://服务提供者名字</code>，lb就是<code>load balance</code>的意思，就好记了</p></blockquote><p>因为我们配置了<code>eureka</code>，所以别忘了，在主启动类上使用<code>@EnableEurekaClient</code>激活哟</p><p>当配置好上述之后，我们启动配置中心(7001)和两个服务提供者（8001,8002），还有gateway（9527），在eurekaweb端中，可以看到他们都成功注册了，现在我们可以测试一下请求</p><p>比如此配置</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8001</span> <span class="token comment">#匹配后提供服务的路由地址</span>\n<span class="token key atrule">predicates</span><span class="token punctuation">:</span>\n<span class="token punctuation">-</span> Path=/payment/get/<span class="token important">**</span>   \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>因为使用了gateway，所以服务提供者的url是隐藏的，我们需要通过gateway的端口去调用</p></blockquote><ul><li>服务提供者8001和8002的controller中，分别有存在<code>localhost:8001/payment/get/1</code>和<code>localhost:8002/payment/get/1</code>请求</li></ul><p>所以我们需要通过暴露的gateway去调用服务提供者的api，也就是<code>localhost:9527/payment/get/1</code>，因为gateway的配置中，只有一个匹配Path的(<code>- Path=/payment/get/**</code>),所以很明显，这个localhost:9527/payment/get/1请求是满足<code>predicates</code>条件，所以gateway会将<code>/payment/get/1</code>部分追加到<code>uri</code>上，并发送请求，所以最终请求的链接就是<code>localhost:8001/payment/get/1</code>，如果你在浏览器中，查看过network，会发现他们并不是重定向操作</p><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><p>我们可以在<code>application.yml</code>中进行配置，也可以通过代码方式进行配置，但是会很麻烦，还是配置文件香</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayConfig</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">RouteLocatorBuilder<span class="token punctuation">.</span>Builder</span> routes <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        routes<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;path_baidu_guoNei&quot;</span><span class="token punctuation">,</span>r <span class="token operator">-&gt;</span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&quot;/guonei&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://news.baidu.com/guonei&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> routes<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="动态路由" tabindex="-1"><a class="header-anchor" href="#动态路由" aria-hidden="true">#</a> 动态路由</h2><p>如果我们将<code>spring.cloud.gateway.uri</code>写死，那么如果注册中心中，存在多个provider，请求并不会负载均衡，所以我们就需要使用动态路由，负载均衡方式可以是轮训，随机，或者自定义等等，像下面这样配置就行</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//服务提供者名字\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>注意是<code>lb</code></p></blockquote><h2 id="predicate的使用" tabindex="-1"><a class="header-anchor" href="#predicate的使用" aria-hidden="true">#</a> Predicate的使用</h2><p>当我们启动9527，在日志打印那里，会发现</p>',30),I=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220121202933066.png",data:"aurora"})],-1),q=(0,t._)("p",null,"详细查看官方文档",-1),C=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220121203033006.png",data:"aurora"})],-1),P=(0,t._)("p",null,"有11种",-1),j=(0,t._)("h2",{id:"filter的使用",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#filter的使用","aria-hidden":"true"},"#"),(0,t.Uk)(" Filter的使用")],-1),G=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220121203117821.png",data:"aurora"})],-1),R=(0,t.uE)('<p>官方已经提供了31种，但是我们推荐，使用自定义过滤器</p><h3 id="自定义过滤器" tabindex="-1"><a class="header-anchor" href="#自定义过滤器" aria-hidden="true">#</a> 自定义过滤器</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyGlobalFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token class-name">String</span> aurora <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">&quot;aurora&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;执行自定义的全局过滤器: {},param: {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>aurora<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>aurora <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;非法登录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>PARTIAL_CONTENT<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>创建一个类，实现<code>GlobalFilter, Ordered</code>两个接口，加入到容器中</p><p><code>getOrder()</code>这个方法不用管，就是一个容器</p><h2 id="官方文档解读" tabindex="-1"><a class="header-anchor" href="#官方文档解读" aria-hidden="true">#</a> 官方文档解读</h2>',6),F=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image-20220324084242297",originSrc:"https://picture.xcye.xyz/image-20220324084242297.png",data:"aurora"})],-1),Z={},E=(0,s(83744).Z)(Z,[["render",function(n,a){const s=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("p",null,[(0,t._)("a",e,[l,(0,t.Wm)(s)])]),c,o,u,i,r,k,g,d,b,m,h,(0,t._)("p",null,[y,(0,t._)("a",f,[w,(0,t.Wm)(s)])]),v,x,S,_,z,I,q,C,P,j,G,R,F],64)}]])}}]);