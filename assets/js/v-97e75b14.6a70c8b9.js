"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3611],{9698:(a,n,s)=>{s.r(n),s.d(n,{data:()=>t});const t={key:"v-97e75b14",path:"/javaweb/",title:"tomcat服务器的概述",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"服务器：",slug:"服务器",children:[]},{level:2,title:"web服务器",slug:"web服务器",children:[]},{level:2,title:"常见的web服务器",slug:"常见的web服务器",children:[{level:3,title:"什么是javaee?",slug:"什么是javaee",children:[]}]},{level:2,title:"Tomcat服务器的目录结构",slug:"tomcat服务器的目录结构",children:[]},{level:2,title:"WebApps中打开自己的项目",slug:"webapps中打开自己的项目",children:[]},{level:2,title:"tomcat项目的部署方式",slug:"tomcat项目的部署方式",children:[{level:3,title:"部署问题",slug:"部署问题",children:[]}]},{level:2,title:"配置tomcat",slug:"配置tomcat",children:[]},{level:2,title:"新建module",slug:"新建module",children:[]},{level:2,title:"项目结构",slug:"项目结构",children:[]},{level:2,title:"解决方法",slug:"解决方法",children:[]},{level:2,title:"宝塔添加反向代理",slug:"宝塔添加反向代理",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},38781:(a,n,s)=>{s.r(n),s.d(n,{default:()=>I});var t=s(66252);const e=(0,t.uE)('<h1 id="tomcat服务器的概述" tabindex="-1"><a class="header-anchor" href="#tomcat服务器的概述" aria-hidden="true">#</a> tomcat服务器的概述</h1><h2 id="服务器" tabindex="-1"><a class="header-anchor" href="#服务器" aria-hidden="true">#</a> 服务器：</h2><p>就是安装了服务器软件的电脑，只是这种电脑的配置比较高，硬盘比较大，就比如使用的mysql，在使用的时候，我们会在自己的电脑上安装mysql服务器，那么我们就可以把我们自己的计算机看成是一个服务器，</p><h2 id="web服务器" tabindex="-1"><a class="header-anchor" href="#web服务器" aria-hidden="true">#</a> web服务器</h2><p>web服务器就是像百度这样的，浏览器接收用户的请求，并且百度的服务器为这个请求作出响应，发送资源</p><p>在web服务器中，我们可以部署web项目，可以让不同的用户载不同的电脑上进行访问</p><h2 id="常见的web服务器" tabindex="-1"><a class="header-anchor" href="#常见的web服务器" aria-hidden="true">#</a> 常见的web服务器</h2><p>常见的web服务器看截图，</p><h3 id="什么是javaee" tabindex="-1"><a class="header-anchor" href="#什么是javaee" aria-hidden="true">#</a> 什么是javaee?</h3><p>javaee是企业级开发中使用的技术规范的总和，一共有13项规范</p><p>我们目前要使用的就是<strong>tomca</strong>tweb服务器，这是一个免费开源的项目，不收费，但是只支持少量的javaee规范</p><h1 id="tomcat服务器" tabindex="-1"><a class="header-anchor" href="#tomcat服务器" aria-hidden="true">#</a> Tomcat服务器</h1>',12),l=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214095714496.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),p=(0,t.uE)('<h2 id="tomcat服务器的目录结构" tabindex="-1"><a class="header-anchor" href="#tomcat服务器的目录结构" aria-hidden="true">#</a> Tomcat服务器的目录结构</h2><ul><li><p>bin目录存放的是可执行的文件</p></li><li><p>如果想要启动Tomcat服务器，在Windows中就点击startup.bat，在Linux操作系统中，点击startup.sh，以sh结尾的都是在Linux中启动的</p></li><li><p>conf是配置文件，</p></li><li><p>lib目录存放的是启动Tomcat需要依赖的jar包</p></li><li><p>logs日志打印</p></li><li><p>temp存放的是临时文件，</p></li><li><p>webapps是最重要的，存放的是web项目，如果我们想要将一个web项目在Tomcat服务器中打开，那么我们就只需要在webapps目录中新建一个目录，到时候访问这个目录进行</p></li><li><p>work存放的是运行时的数据</p></li></ul><h2 id="webapps中打开自己的项目" tabindex="-1"><a class="header-anchor" href="#webapps中打开自己的项目" aria-hidden="true">#</a> WebApps中打开自己的项目</h2><p>webapps存放的是自己的web项目，我们的电脑已经安装了tomcatweb服务器，那么我们就可以认为，我的电脑就是一个服务器软件，</p><p>将品优购项目存入webapps目录中</p>',5),c=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214100959883.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),i=(0,t.uE)('<p>现在我们就可以启动tomcat服务器，在浏览器中输入<strong>127.0.0.1:8080/pyg</strong>进行访问品优购项目</p><p>这里的127.0.0.1:8080/pyg中的pyg叫做虚拟目录</p><p>在像谷歌，火狐这种浏览器中我们不需要输入协议也是可以的，因为这种高级浏览器会自动添加上</p><p>现在，处于同一个局域网中的用户，就可以通过自己在局域网中的ip地址ip:8080/pyg访问这个品优购项目了</p><h2 id="tomcat项目的部署方式" tabindex="-1"><a class="header-anchor" href="#tomcat项目的部署方式" aria-hidden="true">#</a> tomcat项目的部署方式</h2><p>部署项目的方式一共有三种</p><ol><li><p>第一种</p><p>就是将项目的目录放置在webapps目录中，服务器启动，只需要输入../虚拟目录/资源文件就可以访问</p><p>简化版本就是将资源文件打包成<strong>war</strong>包，放置在webapps目录中，系统会自动进行解压，如果把这个<strong>war</strong>包删除，系统也会自动删除</p></li><li><p>第二种就是在server.xml文件中进行资源路径的配置</p><p>在标签<code>&lt;host&gt;&lt;/host&gt;</code>标签中新建一个标签**<code>&lt;Context docBase=&quot;D:\\VSCodes\\Shopping&quot; path=&quot;/cc&quot; /&gt;</code>**</p><p>其中 Context是一个自闭和标签，docBase属性是资源的绝对路径位置</p><p>path是虚拟目录，</p><p>注意：配置完成之后，我们需要重启服务器才会生效，在浏览器中输入<strong>127.0.0.1:8080/cc/index.html</strong>就可以访问这个文件中的中资源</p><p>但是这种方式不推荐使用，就是可能tomcat原本的文件会不可用，出现问题</p></li><li><p>第三种部署项目的方式就是在<strong>conf\\Catalina\\localhost</strong>目录中新建任意xml的文件，并在里面写上<code>&lt;Context docBase=&quot;D:\\VSCodes\\Shopping&quot;/&gt;</code>，这个docBase就是项目的绝对路径，必须要协商path虚拟目录，</p><p>如何访问？这个时候，虚拟目录的名字就是这个xml的文件名，不用加后缀，例如<strong>127.0.0.1:8080/pyg</strong></p></li></ol><h3 id="部署问题" tabindex="-1"><a class="header-anchor" href="#部署问题" aria-hidden="true">#</a> 部署问题</h3><p>tomcat 无法及时响应，http 请求一直pending状态</p><p>如果使用tomcat进行部署成功之后，我们点击控制台，也就是这个控制台，</p>',10),r=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210407083921270.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),o=(0,t._)("p",null,"那么我们访问servlet应用，发送请求的时候，status就会变成pending，这种状态，原因是因为我们点击了这个控制台，那么就会变成正在编辑，tomcat就不跑了，窗口设置默认选择了 “快速编辑模式，选项去掉，就可以了，（需要重启，不然选项即使去掉 对当前窗口不生效）",-1),u=(0,t._)("h1",{id:"使用idea部署项目",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#使用idea部署项目","aria-hidden":"true"},"#"),(0,t.Uk)(" 使用idea部署项目")],-1),g=(0,t._)("p",null,"步骤",-1),m=(0,t._)("h2",{id:"配置tomcat",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#配置tomcat","aria-hidden":"true"},"#"),(0,t.Uk)(" 配置tomcat")],-1),d=(0,t._)("ol",null,[(0,t._)("li",null,[(0,t._)("p",null,"首先是需要先配置tomcat在idea中"),(0,t._)("p",null,[(0,t.Uk)("在"),(0,t._)("strong",null,"run"),(0,t.Uk)("中点击edit configurations")]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214141456349.png?x-oss-process=style/pictureProcess1",data:"aurora"})])]),(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214141843396.png?x-oss-process=style/pictureProcess1",data:"aurora"})])]),(0,t._)("li",null,[(0,t._)("p",null,"点击应用就行"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214141915844.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,t._)("p",null,"如果我们选择的是这个的话，那么我们只要更改java文件，就会重新进行部署，因为class文件我们经常会进行更改，所以这里不用选择update classes")])],-1),b=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214142438032.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),h=(0,t._)("p",null,"如果是这个打钩了，那么就是在控制台不会打印out",-1),k=(0,t._)("p",null,"这种不好看",-1),x=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214142848913.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),v=(0,t._)("p",null,"这个配置还是挺重要的，默认的并不是这个斜杠，如果我么将其改成chuchen/，那么只有我们在浏览器中输入**127.0.0.1:8080/chuchen/**时，才会打开index.jsp文件",-1),y=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214143148718.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),f=(0,t._)("p",null,[(0,t.Uk)("如果是一个斜杠**/"),(0,t._)("strong",null,"那么我么就只需要在浏览器中输入"),(0,t.Uk)("127.0.0.1:8080**就能打开默认的index.jsp文件了")],-1),w=(0,t._)("h2",{id:"新建module",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#新建module","aria-hidden":"true"},"#"),(0,t.Uk)(" 新建module")],-1),_=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214142214194.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),q=(0,t._)("p",null,[(0,t.Uk)("因为我们以前都是创建的是javase的module，现在我们要创建的是javaee的，就要选择"),(0,t._)("strong",null,"java Enteprise"),(0,t.Uk)("，这里配置的可能是版本的原因，我找不到老师那种，但是也是可以使用的，")],-1),z=(0,t._)("h2",{id:"项目结构",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#项目结构","aria-hidden":"true"},"#"),(0,t.Uk)(" 项目结构")],-1),j=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210214142721321.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),S=(0,t.uE)('<p>如果我们想要创建HTML，那么就在webapp里创建html页面就行</p><h1 id="tomcat解决跨域问题" tabindex="-1"><a class="header-anchor" href="#tomcat解决跨域问题" aria-hidden="true">#</a> tomcat解决跨域问题</h1><p>如果将一个项目部署到一个域名<code>api.vipblogs.cn</code>中，在本地或者是其他的域名<code>yq.vipblogs.cn</code>通过ajax请求<code>api.vipblogs.cn</code>中的某个接口的时候，就会出现跨域问题，在浏览器中可以正常请求，但是使用ajax就会出现跨域</p><p>浏览器报错情况</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>login.html:1 Access to XMLHttpRequest at &#39;http://localhost/sendmail?email=2291308006%40qq.com&#39; from origin &#39;null&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法" aria-hidden="true">#</a> 解决方法</h2><p>使用jar包</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;!-- https://mvnrepository.com/artifact/com.thetransactioncompany/cors-filter --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.thetransactioncompany&lt;/groupId&gt;\n    &lt;artifactId&gt;cors-filter&lt;/artifactId&gt;\n    &lt;version&gt;2.9.1&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!-- https://mvnrepository.com/artifact/com.thetransactioncompany/java-property-utils --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.thetransactioncompany&lt;/groupId&gt;\n    &lt;artifactId&gt;java-property-utils&lt;/artifactId&gt;\n    &lt;version&gt;1.16&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>将这两个jar包添加到maven中，然后将下面的xml添加到tomcat的<code>web.xml</code>文件的上面</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">&gt;</span></span>index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">&gt;</span></span>index.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">&gt;</span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>最后添加的情况，包括(<code>&lt;welcome-file-list&gt;</code>)</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;!--  提供跨域支持 --&gt;\n&lt;filter&gt;    \n    &lt;filter-name&gt;CORS&lt;/filter-name&gt;    \n    &lt;filter-class&gt;com.thetransactioncompany.cors.CORSFilter&lt;/filter-class&gt;    \n    &lt;init-param&gt;    \n        &lt;param-name&gt;cors.allowOrigin&lt;/param-name&gt;   \n        &lt;param-value&gt;*&lt;/param-value&gt;   \n    &lt;/init-param&gt;    \n    &lt;init-param&gt;    \n        &lt;param-name&gt;cors.supportedMethods&lt;/param-name&gt;   \n        &lt;param-value&gt;GET, POST, HEAD, PUT, DELETE&lt;/param-value&gt;   \n    &lt;/init-param&gt;    \n    &lt;init-param&gt;    \n        &lt;param-name&gt;cors.supportedHeaders&lt;/param-name&gt;   \n        &lt;param-value&gt;Accept, Origin, X-Requested-With, Content-Type, Last-Modified&lt;/param-value&gt;   \n    &lt;/init-param&gt;    \n    &lt;init-param&gt;    \n        &lt;param-name&gt;cors.exposedHeaders&lt;/param-name&gt;   \n        &lt;param-value&gt;Set-Cookie&lt;/param-value&gt;   \n    &lt;/init-param&gt;    \n    &lt;init-param&gt;    \n        &lt;param-name&gt;cors.supportsCredentials&lt;/param-name&gt;   \n        &lt;param-value&gt;true&lt;/param-value&gt;   \n    &lt;/init-param&gt;    \n&lt;/filter&gt;    \n&lt;filter-mapping&gt;    \n    &lt;filter-name&gt;CORS&lt;/filter-name&gt;    \n    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;    \n&lt;/filter-mapping&gt;\n\n&lt;welcome-file-list&gt;\n    &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;\n    &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;\n    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;\n&lt;/welcome-file-list&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>这样设置之后，便可以解决跨域出现的问题</p><h1 id="将项目发布到云服务器-并使用域名进行访问" tabindex="-1"><a class="header-anchor" href="#将项目发布到云服务器-并使用域名进行访问" aria-hidden="true">#</a> 将项目发布到云服务器，并使用域名进行访问</h1><ol><li><p>在云服务器上安装tomcat</p></li><li><p>将项目发布到webapps中</p></li><li><p>进入servel.xml文件中，在Engine标签中，加上</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Host</span> <span class="token attr-name">autoDeploy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blogapi.cco.vin<span class="token punctuation">&quot;</span></span> <span class="token attr-name">unpackWARs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">xmlNamespaceAware</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token attr-name">xmlValidation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span> <span class="token attr-name">crossContext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">docBase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/usr/tomcat/tomcco/webapps/blog<span class="token punctuation">&quot;</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">reloadable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Host</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>修改一下上面的字段就可以了，但是这样，需要在域名之后，加上端口号，才可以进行反问</p></li></ol><h2 id="宝塔添加反向代理" tabindex="-1"><a class="header-anchor" href="#宝塔添加反向代理" aria-hidden="true">#</a> 宝塔添加反向代理</h2>',16),C=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210514082721961.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),P=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210514082739967.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),U=(0,t._)("p",null,"如果添加失败，提示",-1),T=(0,t._)("p",null,[(0,t._)("code",null,"nginx: [emerg] host not found in upstream"),(0,t.Uk)("，则进入到"),(0,t._)("code",null," /etc/hosts"),(0,t.Uk)("，在后面加上")],-1),E=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210514082910590.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),A=(0,t._)("p",null,"就可以解决",-1),H={},I=(0,s(83744).Z)(H,[["render",function(a,n){return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,l,p,c,i,r,o,u,g,m,d,b,h,k,x,v,y,f,w,_,q,z,j,S,C,P,U,T,E,A],64)}]])}}]);