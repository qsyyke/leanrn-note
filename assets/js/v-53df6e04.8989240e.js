"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9044],{49283:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-53df6e04",path:"/npm/commander.html",title:"commander",lang:"en-US",frontmatter:{},excerpt:"",headers:[],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},77142:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(66252).uE)('<h1 id="commander" tabindex="-1"><a class="header-anchor" href="#commander" aria-hidden="true">#</a> commander</h1><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Command <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;commander&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> program <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\nprogram\n    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-d, --debug&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;output extra debugging&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-s, --small&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;small pizza size&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-p, --pizza-type &lt;type&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;flavour of pizza&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nprogram<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> options <span class="token operator">=</span> program<span class="token punctuation">.</span><span class="token function">opts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>option(&#39;-p, --pizza-type &lt;type&gt;&#39;, &#39;flavour of pizza&#39;);</code>这种情况下，参数必须存在，否则会直接退出</p><p><code>option(&#39;-d, --debug&#39;, &#39;output extra debugging&#39;)</code>这种，值为true或者undefined，如果输入<code>xxx -d</code>，那么<code>options.debug</code>值便为TRUE</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>program\n    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;-c, --cheese &lt;type&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;add the specified type of cheese&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nprogram<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p><code>option(&#39;-c, --cheese &lt;type&gt;&#39;, &#39;add the specified type of cheese&#39;, &#39;blue&#39;);</code>这种情况blue就是默认值，输入<code>xxx</code>，就可以打印出<code>blue</code>，但是输入<code>xxx -c</code>，还是会直接退出，缺少参数</p></blockquote>',6),t={},e=(0,a(83744).Z)(t,[["render",function(n,s){return p}]])}}]);