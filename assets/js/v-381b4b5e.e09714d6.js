"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6952],{71048:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-381b4b5e",path:"/java-base/%E6%9E%9A%E4%B8%BE.html",title:"Java中的枚举学习",lang:"en-US",frontmatter:{date:"2022/3/09 15:41"},excerpt:"",headers:[{level:2,title:"构造器",slug:"构造器",children:[{level:3,title:"无参构造",slug:"无参构造",children:[]},{level:3,title:"有参构造",slug:"有参构造",children:[]}]},{level:2,title:"成员变量和方法",slug:"成员变量和方法",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},2069:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var p=a(66252);const e=(0,p._)("h1",{id:"java中的枚举学习",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#java中的枚举学习","aria-hidden":"true"},"#"),(0,p.Uk)(" Java中的枚举学习")],-1),t=(0,p.Uk)("枚举的作用，我也就不多说了，可以看一下这篇文章的介绍"),o={href:"https://www.jianshu.com/p/0d69c36a723b",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("枚举介绍"),l=(0,p.uE)('<p>我们可以简单的定义一个枚举类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>    \n    RED<span class="token punctuation">,</span>GREEN<span class="token punctuation">,</span>BLUE\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面这个就是一个简单的枚举，使用的使用，可以直接通过<code>Color.RED</code>进行使用，需要注意的是，<code>Color.RED</code>返回的是一个<code>Color</code>对象</p><p><code>Color red = Color.RED</code></p><p>然后就是一个枚举中，还存在构造器，成员变量和成员方法</p><h2 id="构造器" tabindex="-1"><a class="header-anchor" href="#构造器" aria-hidden="true">#</a> 构造器</h2><p>在枚举中，定义一个构造器，一定要使用<code>private</code>修饰符，因为枚举是不能有实例的，在构造器中，我们也可以接收参数，默认提供一个无参构造</p><h3 id="无参构造" tabindex="-1"><a class="header-anchor" href="#无参构造" aria-hidden="true">#</a> 无参构造</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>\n  RED<span class="token punctuation">,</span>BLUE<span class="token punctuation">;</span>\n  \n  <span class="token keyword">private</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        \n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果枚举中，只有一个无参构造器，那么我们在枚举变量的时候，就不能在变量后面加上任何的参数，如<code>RED(&quot;name&quot;,12)</code></p><p>有几个枚举变量，比如上面有两个，那么我们在<code>Color.RED</code>的时候，构造器会执行两次</p><h3 id="有参构造" tabindex="-1"><a class="header-anchor" href="#有参构造" aria-hidden="true">#</a> 有参构造</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>\n    <span class="token function">RED</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token string">&quot;greed&quot;</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">BLUE</span><span class="token punctuation">(</span><span class="token string">&quot;blue&quot;</span><span class="token punctuation">,</span><span class="token number">789</span><span class="token punctuation">)</span><span class="token punctuation">,</span>PINK<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">String</span> colorName<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> colorNumber<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> colorNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;构造器执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        colorName <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        colorNumber <span class="token operator">=</span> colorNum<span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Color{&quot;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;colorName=&#39;&quot;</span> <span class="token operator">+</span> colorName <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;, colorNumber=&quot;</span> <span class="token operator">+</span> colorNumber <span class="token operator">+</span>\n                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>上面的这个枚举中，就存在一个有参构造和一个无参构造，那么我们在写枚举变量的时候，就可以这样写了</p><blockquote><p><code>RED(&quot;red&quot;,123),GREEN(&quot;greed&quot;,456),BLUE(&quot;blue&quot;,789),PINK;</code></p></blockquote><p>并且我们可以重写<code>toString()</code>方法</p><h2 id="成员变量和方法" tabindex="-1"><a class="header-anchor" href="#成员变量和方法" aria-hidden="true">#</a> 成员变量和方法</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>\n    <span class="token function">RED</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token string">&quot;greed&quot;</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">BLUE</span><span class="token punctuation">(</span><span class="token string">&quot;blue&quot;</span><span class="token punctuation">,</span><span class="token number">789</span><span class="token punctuation">)</span><span class="token punctuation">,</span>PINK<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">String</span> colorName<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> colorNumber<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">customMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> colorName <span class="token operator">+</span> <span class="token string">&quot;---&gt;&quot;</span> <span class="token operator">+</span> colorNumber<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> colorNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;构造器执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        colorName <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        colorNumber <span class="token operator">=</span> colorNum<span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Color{&quot;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;colorName=&#39;&quot;</span> <span class="token operator">+</span> colorName <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;, colorNumber=&quot;</span> <span class="token operator">+</span> colorNumber <span class="token operator">+</span>\n                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>上面的colorName,colorNumber就是两个成员变量，customMethod就是一个成员方法</p><p>使用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Color</span> blue <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>BLUE<span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> test <span class="token operator">=</span> blue<span class="token punctuation">.</span><span class="token function">customMethod</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>构造器执行\n构造器执行\n构造器执行\n<span class="token class-name">Color</span><span class="token punctuation">{</span>colorName<span class="token operator">=</span><span class="token char">&#39;blue&#39;</span><span class="token punctuation">,</span> colorNumber<span class="token operator">=</span><span class="token number">789</span><span class="token punctuation">}</span>\ntest<span class="token operator">:</span>blue<span class="token operator">--</span><span class="token operator">-&gt;</span><span class="token number">789</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',22),u={},r=(0,a(83744).Z)(u,[["render",function(n,s){const a=(0,p.up)("ExternalLinkIcon");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("p",null,[t,(0,p._)("a",o,[c,(0,p.Wm)(a)])]),l],64)}]])}}]);