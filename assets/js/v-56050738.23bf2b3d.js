"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7170],{44154:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-56050738",path:"/spring/springcloud/Hystrix%E6%96%AD%E8%B7%AF%E5%99%A8.html",title:"Hystrix断路器",lang:"en-US",frontmatter:{date:"2022/1/9 21:36",tag:["spring cloud","hystyix","微服务"]},excerpt:"",headers:[{level:2,title:"为什么需要Hystrix？",slug:"为什么需要hystrix",children:[]},{level:2,title:"what",slug:"what",children:[{level:3,title:"Do？",slug:"do",children:[]}]},{level:2,title:"重要概念",slug:"重要概念",children:[{level:3,title:"服务降级",slug:"服务降级",children:[]},{level:3,title:"服务熔断",slug:"服务熔断",children:[]},{level:3,title:"服务限流",slug:"服务限流",children:[]}]},{level:2,title:"使用",slug:"使用",children:[{level:3,title:"服务降级配置",slug:"服务降级配置",children:[]}]},{level:2,title:"问题解决",slug:"问题解决",children:[{level:3,title:"方法一",slug:"方法一",children:[]},{level:3,title:"方法二",slug:"方法二",children:[]}]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},93609:(n,s,a)=>{a.r(s),a.d(s,{default:()=>y});var t=a(66252);const p=(0,t._)("h1",{id:"hystrix断路器",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#hystrix断路器","aria-hidden":"true"},"#"),(0,t.Uk)(" Hystrix断路器")],-1),e=(0,t._)("h2",{id:"为什么需要hystrix",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#为什么需要hystrix","aria-hidden":"true"},"#"),(0,t.Uk)(" 为什么需要Hystrix？")],-1),o=(0,t._)("p",null,"复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免地失败",-1),c=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220119213823616.png",data:"aurora"})],-1),l=(0,t.uE)('<p>因为我们知道，如果一个消费者默认情况下，去调服务提供者的服务，如果超过3秒还是多少，那么就会报一个<code>read timeout</code>的错误，返回的可能就是错误html页面，这是我们不愿意看到的，还有可能服务消费者，服务提供者发生异常，那么也会导致服务调用失败，这样不利于使用该接口的程序使用，所以我们就需要Hystrix来解决这个问题</p><h2 id="what" tabindex="-1"><a class="header-anchor" href="#what" aria-hidden="true">#</a> what</h2><p><code>Hystrix</code>是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</p><p><code>断路器</code>本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><h3 id="do" tabindex="-1"><a class="header-anchor" href="#do" aria-hidden="true">#</a> Do？</h3><p>这个能够做什么？</p><ol><li>服务降级</li><li>服务熔断</li><li>接近实时的监控</li><li>.......</li></ol><p>这里的服务降级，并不是我们普片认为的那样，降低等级的意思，服务降级，就是加入一个什么发生异常，超时等情况时，能够代替该程序执行的方法，一定要搞清楚</p>',8),u=(0,t.Uk)("官网地址"),i={href:"https://github.com/Netflix/Hystrix/wiki/How-To-Use",target:"_blank",rel:"noopener noreferrer"},r=(0,t.Uk)("为"),k=(0,t.Uk)("，但是该框架目前已停更维护阶段"),m=(0,t.uE)('<h2 id="重要概念" tabindex="-1"><a class="header-anchor" href="#重要概念" aria-hidden="true">#</a> 重要概念</h2><h3 id="服务降级" tabindex="-1"><a class="header-anchor" href="#服务降级" aria-hidden="true">#</a> 服务降级</h3><p>服务器忙，请稍后再试，不让客户端等待并立刻返回一个友好提示，fallback</p><p>哪些会触发服务降级</p><ol><li>程序运行异常</li><li>超时</li><li>服务熔断触发服务降级</li><li>线程池/信号量打满也会导致服务降级</li></ol><h3 id="服务熔断" tabindex="-1"><a class="header-anchor" href="#服务熔断" aria-hidden="true">#</a> 服务熔断</h3><p>类比保险丝达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示</p><p>这个服务熔断，就比如保险丝一样</p><p>服务的降级-&gt;进而熔断-&gt;恢复调用链路</p><h3 id="服务限流" tabindex="-1"><a class="header-anchor" href="#服务限流" aria-hidden="true">#</a> 服务限流</h3><p>秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行</p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p>我们可以在服务提供者上使用，可以在任何地方，在<code>service</code>的实现类上，在<code>controller</code>上，等等，并不需要在某个特定的地方使用</p><ol><li><p>新建module</p></li><li><p>导入依赖</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>修改配置文件</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span>\n\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>hystrix<span class="token punctuation">-</span>payment\n\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">client</span><span class="token punctuation">:</span>\n    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>\n      <span class="token comment">#defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span>\n      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><blockquote><p>这里其实就是将该module注册到注册中心</p></blockquote></li><li><p>在主启动类上，加入<code>@EnableEurekaClient </code>，然后写个controller测试</p></li></ol><p>可以使用<code>jmeter</code>工具，进行高并发测试</p><p>当没有使用jmeter工具进行高并发测试时，一切都正常，尽管有些controller我们设置了睡眠时间，但是服务提供者还是正常运行(服务消费者调用有睡眠时间的controller可能会存在读取超时异常)</p><p>但是使用jmeter工具之后，会发现原本没有睡眠时间的controller的请求，都变得非常慢，这还只是对服务提供者，如果存在服务消费者调用这些服务提供者的服务，那么很快，消费者便会出现读取超时错误，这是我们不愿意看到的，所以我们就需要使用到<code>降级/容错/限流</code>等技术</p><ul><li>比如provider出现高并发，请求一个url的时间，变成差不多6秒左右，那么我们可以使用服务降级，当请求时间超过3秒时，我们就直接返回一个请求拥挤，稍后再试等信息，对于consumer，我们也可以同样设置</li><li>因为出现异常，也会出现服务降级，所以都是适用的</li></ul><h3 id="服务降级配置" tabindex="-1"><a class="header-anchor" href="#服务降级配置" aria-hidden="true">#</a> 服务降级配置</h3><ol><li><p>在需要的地方，使用<code>@HystrixCommand</code>注解</p><blockquote><p>注意是需要的地方，可以是service，controller等等</p></blockquote><p>比如我们这里，在一个service上使用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;paymentInfo_TimeOutHandler&quot;</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;2000&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;线程池:&quot;</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;paymentInfo_TimeOut,id: &quot;</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">&quot;\\t&quot;</span><span class="token operator">+</span><span class="token string">&quot;O(∩_∩)O，耗费3秒&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_TimeOutHandler</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;paymentInfo_TimeOut方法超时了&quot;</span><span class="token punctuation">;</span>\n    <span class="token comment">//System.out.println(&quot;1111111111111&quot;);</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><blockquote><p><code>fallbackMethod</code>是执行服务降级的方法，一定要保证，该方法和使用<code>@HystrixCommand</code>注解标注的方法的所有一样，包括修饰符，返回值，参数，除了方法名不一样外，逻辑也不用一样，一定要保证修饰符，返回值，参数一样</p><p>如果只是参数不一样，那么会出现<code>fallbackMethod</code>的方法找不到，如果返回值不一样，你可以测试一下O(∩_∩)O哈哈~</p><p><code>commandProperties</code>就是设置一些参数，就是什么条件触发服务降级，上面就是设置程序运行时间操作2秒，尽管设置了操作2秒，就发生服务降级，但是如果<code>paymentInfo_TimeOut(Integer id)</code>方法体中，出现异常，那么也会导致服务降级，尽管时间没有操作2秒</p></blockquote></li><li><p>在主启动类上，加入<code>@EnableCircuitBreaker</code>注解，一定要加入该注解，否则服务降级不会出现</p></li></ol><p>现在你再使用jmeter工具测试高并发情况，就会发现，当请求时间操作2秒时，会直接返回<code>paymentInfo_TimeOutHandler</code>方法中的返回体</p><p>我们同样也可以在consumer服务使用<code>hustrix</code></p><p>比如我们在consumer的controller上使用服务降级</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;paymentInfo_TimeOutHandler&quot;</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;1000&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/consumer/payment/hystrix/timeout/{id}&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">String</span> <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">/*String s = paymentHystrixService.paymentInfo_TimeOut(id);\n        return s;*/</span>\n    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;sdf&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">String</span> <span class="token function">paymentInfo_TimeOutHandler</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;80方法调用超时了&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><blockquote><p>需要在consumer的配置文件上，加上</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>\n  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>\n    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></blockquote><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>如果使用上述方式，那么会出现怎样的问题？</p><ol><li>每个业务方法对应一个兜底的方法，代码膨胀</li><li>统一和自定义的分开</li></ol></div><h2 id="问题解决" tabindex="-1"><a class="header-anchor" href="#问题解决" aria-hidden="true">#</a> 问题解决</h2><h3 id="方法一" tabindex="-1"><a class="header-anchor" href="#方法一" aria-hidden="true">#</a> 方法一</h3><p>我们就需要解决上面每个方法都需要对应一个服务降级方法的问题</p><p>我们可以在对应方法的类上使用<code>@DefaultProperties</code>注解，设置默认的服务降级方法，这样可以为那些没有使用<code>@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeOutHandler&quot;,commandProperties = {...</code>指定特定的服务降级方法进行处理</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@DefaultProperties</span><span class="token punctuation">(</span>defaultFallback <span class="token operator">=</span> <span class="token string">&quot;defaultHandlerMethod&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@RestController</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderHystirxController</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Resource</span>\n    <span class="token keyword">private</span> <span class="token class-name">PaymentHystrixService</span> paymentHystrixService<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/consumer/payment/hystrix/ok/{id}&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> <span class="token function">paymentInfo_OK</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> s <span class="token operator">=</span> paymentHystrixService<span class="token punctuation">.</span><span class="token function">paymentInfo_OK</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> s<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;paymentInfo_TimeOutHandler&quot;</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;1000&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/consumer/payment/hystrix/timeout/{id}&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> s <span class="token operator">=</span> paymentHystrixService<span class="token punctuation">.</span><span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> s<span class="token punctuation">;</span>\n        <span class="token comment">//int a = 10 / 0;</span>\n        <span class="token comment">//return &quot;sdf&quot;;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token class-name">String</span> <span class="token function">paymentInfo_TimeOutHandler</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;80方法调用超时了&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/consumer/payment/hystrix/default_test&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">default_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;this is 80&#39;s default test method&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@HystrixCommand</span>\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/consumer/payment/hystrix/default_test_test&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">default_test_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;this is 80&#39;s default test method&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">defaultHandlerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;-----80------defaultHandlerMethod&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p><code>@DefaultProperties(defaultFallback = &quot;defaultHandlerMethod&quot;)</code>中的<code>defaultFallback </code>就是指定默认的服务降级方法，但是需要注意的是，此<code>defaultHandlerMethod()</code>方法只是针对于那些使用了<code>@HystrixCommand</code>注解，但是在该注解中，没有设置<code>fallbackMethod</code>参数的那些，对于上面的<code>paymentInfo_TimeOut()</code>方法，出现服务降级，找的是<code>paymentInfo_TimeOutHandler</code>方法，而不是默认方法，一定要注意，默认的服务降级方法，只对存在<code>@HystrixCommand</code>注解的有效，上面代码中的<code>default_test</code>方法就没有效</p><p>而且还必须保证默认服务降级方法和发生服务降级的来源方法的返回值是一样的，如果发生服务降级的来源方法的返回值是<code>void</code>类型，但是默认的服务降级处理方法的返回值是<code>String</code>，那么也会抛出异常，所以，这个默认的处理方法，感觉并不是很好用，你得保证所有的服务降级来源方法的返回值和默认服务降级方法的返回值一样，但是如果我们在controller上进行设置，统一了controller的返回值类型，使用这个处理也是yyds</p><p>上面默认服务降级方法的返回值和发生服务降级来源方法的返回值不同，会报下面错误</p><details class="custom-container details"><summary>详细代码</summary><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@DefaultProperties</span><span class="token punctuation">(</span>defaultFallback <span class="token operator">=</span> <span class="token string">&quot;defaultHandlerMethod&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@RestController</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderHystirxController</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Resource</span>\n    <span class="token keyword">private</span> <span class="token class-name">PaymentHystrixService</span> paymentHystrixService<span class="token punctuation">;</span>\n\n\t<span class="token comment">//.............</span>\n\n    <span class="token annotation punctuation">@HystrixCommand</span>\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/consumer/payment/hystrix/default_test_test&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">default_test_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token comment">//return &quot;this is 80&#39;s default test method&quot;;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;this is 80&#39;s default test method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">defaultHandlerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;-----80------defaultHandlerMethod&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></details><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">There</span> was an unexpected error <span class="token punctuation">(</span>type<span class="token operator">=</span><span class="token class-name">Internal</span> <span class="token class-name">Server</span> <span class="token class-name">Error</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\n<span class="token class-name">Incompatible</span> <span class="token keyword">return</span> <span class="token class-name"><span class="token namespace">types<span class="token punctuation">.</span></span> Command</span> method<span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name"><span class="token namespace">xyz<span class="token punctuation">.</span>xcye<span class="token punctuation">.</span>constroller<span class="token punctuation">.</span></span>OrderHystirxController</span><span class="token punctuation">.</span><span class="token function">default_test_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Fallback</span> method<span class="token operator">:</span> <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token class-name"><span class="token namespace">xyz<span class="token punctuation">.</span>xcye<span class="token punctuation">.</span>constroller<span class="token punctuation">.</span></span>OrderHystirxController</span><span class="token punctuation">.</span><span class="token function">defaultHandlerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Hint</span><span class="token operator">:</span> <span class="token class-name">Fallback</span> method &#39;<span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token class-name"><span class="token namespace">xyz<span class="token punctuation">.</span>xcye<span class="token punctuation">.</span>constroller<span class="token punctuation">.</span></span>OrderHystirxController</span><span class="token punctuation">.</span><span class="token function">defaultHandlerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>&#39; must <span class="token keyword">return</span><span class="token operator">:</span> <span class="token keyword">void</span> or its subclass\n<span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>javanica<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span>FallbackDefinitionException</span><span class="token operator">:</span> <span class="token class-name">Incompatible</span> <span class="token keyword">return</span> <span class="token class-name"><span class="token namespace">types<span class="token punctuation">.</span></span> \nCommand</span> method<span class="token operator">:</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name"><span class="token namespace">xyz<span class="token punctuation">.</span>xcye<span class="token punctuation">.</span>constroller<span class="token punctuation">.</span></span>OrderHystirxController</span><span class="token punctuation">.</span><span class="token function">default_test_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Fallback</span> method<span class="token operator">:</span> <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token class-name"><span class="token namespace">xyz<span class="token punctuation">.</span>xcye<span class="token punctuation">.</span>constroller<span class="token punctuation">.</span></span>OrderHystirxController</span><span class="token punctuation">.</span><span class="token function">defaultHandlerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Hint</span><span class="token operator">:</span> <span class="token class-name">Fallback</span> method &#39;<span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token class-name"><span class="token namespace">xyz<span class="token punctuation">.</span>xcye<span class="token punctuation">.</span>constroller<span class="token punctuation">.</span></span>OrderHystirxController</span><span class="token punctuation">.</span><span class="token function">defaultHandlerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>&#39; must <span class="token keyword">return</span><span class="token operator">:</span> <span class="token keyword">void</span> or its subclass\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="方法二" tabindex="-1"><a class="header-anchor" href="#方法二" aria-hidden="true">#</a> 方法二</h3><p>除了上面的这种解决方法外，还有一种，并且这种方法还能够进行解耦，方法一，在一定程度上，耦合度还是高</p><p>因为我们的consumer使用了<code>OpenFegin</code>，在controller中，我们都是通过调用该接口，所以我们可以创建一个类，实现使用<code>@FeignClient</code>注解标注的接口，然后该类的实现方法，就是consumer调用provider发生服务降级后，进行处理的服务降级方法</p><ol><li><p>接口</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token class-name">PaymentHystrixServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentHystrixService</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/payment/hystrix/ok/{id}&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> <span class="token function">paymentInfo_OK</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/payment/hystrix/timeout/{id}&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p><code>fallback</code>指向该接口的实现类</p></blockquote></li><li><p>实现类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentHystrixServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentHystrixService</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_OK</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;impl ------paymentInfo_OK&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;impl----------------paymentInfo_TimeOut&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>一定要将该类，加入到组件中，使用<code>@Component</code>注解</p></blockquote></li><li><p>主启动类和配置文件中，也是必不可少的</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@EnableFeignClients</span>\n<span class="token annotation punctuation">@EnableHystrix</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>\n  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>\n    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>controller</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@DefaultProperties</span><span class="token punctuation">(</span>defaultFallback <span class="token operator">=</span> <span class="token string">&quot;defaultHandlerMethod&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@RestController</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderHystirxController</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Resource</span>\n    <span class="token keyword">private</span> <span class="token class-name">PaymentHystrixService</span> paymentHystrixService<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/consumer/payment/hystrix/ok/{id}&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> <span class="token function">paymentInfo_OK</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> s <span class="token operator">=</span> paymentHystrixService<span class="token punctuation">.</span><span class="token function">paymentInfo_OK</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> s<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;paymentInfo_TimeOutHandler&quot;</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;1000&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/consumer/payment/hystrix/timeout/{id}&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> s <span class="token operator">=</span> paymentHystrixService<span class="token punctuation">.</span><span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> s<span class="token punctuation">;</span>\n        <span class="token comment">//int a = 10 / 0;</span>\n        <span class="token comment">//return &quot;sdf&quot;;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token class-name">String</span> <span class="token function">paymentInfo_TimeOutHandler</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;80方法调用超时了&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/consumer/payment/hystrix/default_test&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">default_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;this is 80&#39;s default test method&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@HystrixCommand</span>\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/consumer/payment/hystrix/default_test_test&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">default_test_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token comment">//return &quot;this is 80&#39;s default test method&quot;;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;this is 80&#39;s default test method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">defaultHandlerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;-----80------defaultHandlerMethod&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div></li></ol><p>可以发现，我们的controller并没有进行什么改变，尽管<code>paymentInfo_TimeOut</code>方法，我们使用<code>@HystrixCommand</code>注解指定了对应的处理方法，但是最终，也不会走这个指定的方法，最终走的是实现类中的<code>paymentInfo_TimeOut()</code>方法，最终会返回<code>impl----------------paymentInfo_TimeOut</code>，因为<code>default_test_test</code>和<code>default_test_test</code>两个方法，并没有在provider中存在，所以并不会在接口实现类中，进行处理</p><p>通过这种方法，我们可以实现进一步的解耦操作</p>',42),d=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20220120202257821.png",data:"aurora"})],-1),b={},y=(0,a(83744).Z)(b,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,e,o,c,l,(0,t._)("p",null,[u,(0,t._)("a",i,[r,(0,t.Wm)(a)]),k]),m,d],64)}]])}}]);