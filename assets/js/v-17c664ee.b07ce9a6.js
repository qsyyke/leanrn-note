"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9504],{59562:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-17c664ee",path:"/datastructure/tree/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91.html",title:"线索二叉树",lang:"en-US",frontmatter:{date:"2021/11/3 22:19"},excerpt:"",headers:[{level:2,title:"代码实现",slug:"代码实现",children:[{level:3,title:"线索化",slug:"线索化",children:[]},{level:3,title:"遍历",slug:"遍历",children:[]}]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},17034:(n,s,a)=>{a.r(s),a.d(s,{default:()=>y});var p=a(66252);const e=(0,p._)("h1",{id:"线索二叉树",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#线索二叉树","aria-hidden":"true"},"#"),(0,p.Uk)(" 线索二叉树")],-1),t=(0,p._)("p",null,[(0,p.Uk)("对于一个二叉树来说，加入我们使用中序遍历的方式进行遍历，如果一个节点，其没有左节点，右节点，那么他的左指针域和右指针域都是"),(0,p._)("code",null,"null"),(0,p.Uk)("，这是不好的现象，我们应该将这些空指针域利用起来")],-1),o=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211103223048657.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),c=(0,p._)("div",{class:"custom-container tip"},[(0,p._)("p",{class:"custom-container-title"},"TIP"),(0,p._)("blockquote",null,[(0,p._)("p",null,"空指针的计算")]),(0,p._)("p",null,"n个结点的二叉链表中含有n+1 【公式 2n-(n-1)=n+1】 个空指针域")],-1),l=(0,p._)("p",null,"我们可以通过下面的方式对每一个节点进行处理，这样便能将所有的节点都利用起来",-1),u=(0,p._)("blockquote",null,[(0,p._)("p",null,"为每一个节点设置一个直接前驱节点和直接后继节点，其中，左指针域存放的对象指向直接前驱，右指针域存放的对象指向直接后继，通过这种方式，我们就能够将所有的节点都利用起来"),(0,p._)("p",null,[(0,p.Uk)("最终等于是把一颗二叉树转变成一个"),(0,p._)("code",null,"双向链表")])],-1),i=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211103224755216.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),r=(0,p._)("div",{class:"custom-container tip"},[(0,p._)("p",{class:"custom-container-title"},"TIP"),(0,p._)("p",null,[(0,p.Uk)("对二叉树以某种次序遍历使其变为线索二叉树的过程称做是"),(0,p._)("code",null,"线索化")]),(0,p._)("p",null,[(0,p.Uk)("一定要记住，例如上图的HDIBJEAFCG，H因为是最开始的位置，所以其左指针域依旧是"),(0,p._)("code",null,"NULL"),(0,p.Uk)("，但是对于I，其其直接前驱为D，直接后继为B，看箭头就可以看出")])],-1),k=(0,p._)("h2",{id:"代码实现",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#代码实现","aria-hidden":"true"},"#"),(0,p.Uk)(" 代码实现")],-1),d=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211103224212002.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),b=(0,p.uE)('<p>对如图所示的二叉树进行线索化</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//创建节点对象</span>\n<span class="token keyword">class</span> <span class="token class-name">HeroNode</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token doc-comment comment">/** 左节点 **/</span>\n    <span class="token keyword">private</span> <span class="token class-name">HeroNode</span> left<span class="token punctuation">;</span>\n    <span class="token doc-comment comment">/** 右节点 **/</span>\n    <span class="token keyword">private</span> <span class="token class-name">HeroNode</span> right<span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/** 存储左节点的是什么，1该left域指向的是直接前驱，为0表示指向左节点 **/</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> leftType<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">int</span> rightType<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>建立节点对象的时候，因为如果某个节点有左孩子，但是我们又需要设置直接前驱，那么这个时候，就会混，到底指向的是直接前驱还是左孩子(<code>该节点的左指针域</code>)，所以就需要设置一个标志点，用来表示该指针域指向的是直接前驱还是其左孩子</p><p>通常使用数字来表示,像下面这样</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> leftType<span class="token punctuation">;</span>\n<span class="token keyword">private</span> <span class="token keyword">int</span> rightType<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>用<code>1</code>表示指向直接前驱，用<code>0</code>表示指向做孩子</p></blockquote></div><h3 id="线索化" tabindex="-1"><a class="header-anchor" href="#线索化" aria-hidden="true">#</a> 线索化</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//线索化二叉树</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">threadedNodes</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">threadedNodes</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        node<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>preNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        node<span class="token punctuation">.</span><span class="token function">setLeftType</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>preNode <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> preNode<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        preNode<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        preNode<span class="token punctuation">.</span><span class="token function">setRightType</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    preNode <span class="token operator">=</span> node<span class="token punctuation">;</span>\n    <span class="token function">threadedNodes</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//Demo</span>\n<span class="token class-name">HeroNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;1name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">HeroNode</span> heroNode3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&quot;3name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">HeroNode</span> heroNode8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&quot;8name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">HeroNode</span> heroNode6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&quot;6name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">HeroNode</span> heroNode10 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&quot;10name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">HeroNode</span> heroNode14 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">&quot;14name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nroot<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>heroNode6<span class="token punctuation">)</span><span class="token punctuation">;</span>\nheroNode6<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>heroNode14<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nroot<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>heroNode3<span class="token punctuation">)</span><span class="token punctuation">;</span>\nheroNode3<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>heroNode8<span class="token punctuation">)</span><span class="token punctuation">;</span>\nheroNode3<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>heroNode10<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">BinaryTree</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTree</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ntree<span class="token punctuation">.</span><span class="token function">threadedNodes</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>',6),m=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211103230559722.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),g=(0,p.uE)('<h3 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">threadedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">HeroNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getLeftType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getRightType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',2),h={},y=(0,a(83744).Z)(h,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,t,o,c,l,u,i,r,k,d,b,m,g],64)}]])}}]);