"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6786],{86846:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-81c883ee",path:"/datastructure/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91.html",title:"赫夫曼树的概念及代码实现",lang:"en-US",frontmatter:{title:"赫夫曼树的概念及代码实现",date:"2021/12/9 9:14"},excerpt:"",headers:[{level:2,title:"赫夫曼树重要概念",slug:"赫夫曼树重要概念",children:[]},{level:2,title:"初步分析",slug:"初步分析",children:[]},{level:2,title:"代码实现",slug:"代码实现",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},17875:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});var p=a(66252);const e=(0,p.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>给定n个权值作为n个叶子结点，构造一棵二叉树，若该树的带权路径长度(wpl)达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree), 还有的书翻译为霍夫曼树。</p><p>赫夫曼树是带权路径长度最短的树，权值较大的结点离根较近。</p><blockquote><p>例如我们需要根据下面这个数组，构建一颗权值最小的二叉树</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote></div><h2 id="赫夫曼树重要概念" tabindex="-1"><a class="header-anchor" href="#赫夫曼树重要概念" aria-hidden="true">#</a> 赫夫曼树重要概念</h2>',2),t=(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,"路径"),(0,p._)("blockquote",null,[(0,p._)("p",null,"在一棵树中，从一个结点往下可以达到的孩子或孙子结点之间的通路，称为路径。"),(0,p._)("p",null,"通路中分支的数目称为路径长度。若规定根结点的层数为1，则从根结点到第L层结点的路径长度为L-1")])]),(0,p._)("li",null,[(0,p._)("p",null,"路径长度"),(0,p._)("blockquote",null,[(0,p._)("p",null,"从树根到每一结点的路径长度之和")]),(0,p._)("details",{class:"custom-container details"},[(0,p._)("summary",null,"点击"),(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211209093530203.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,p._)("p",null,"该树的路径长度为:"),(0,p._)("p",null,[(0,p._)("code",null,"1+2+3+3+2+1+2+2=16")])])]),(0,p._)("li",null,[(0,p._)("p",null,"结点的权及带权路径长度"),(0,p._)("blockquote",null,[(0,p._)("p",null,"若将树中结点赋给一个有着某种含义的数值，则这个数值称为该结点的权。"),(0,p._)("p",null,"结点的带权路径长度为："),(0,p._)("p",null,[(0,p._)("code",null,"从根结点到该结点之间的路径长度与该结点的权的乘积")])])]),(0,p._)("li",null,[(0,p._)("p",null,"树的带权路径长度"),(0,p._)("blockquote",null,[(0,p._)("p",null,"树的带权路径长度规定为所有叶子结点的带权路径长度之和，记为WPL(weighted path length)"),(0,p._)("p",null,"权值越大的结点离根结点越近的二叉树才是最优二叉树。")])]),(0,p._)("li",null,[(0,p._)("p",null,[(0,p._)("strong",null,"WPL最小的就是赫夫曼树")]),(0,p._)("p",null,"例如下面这三颗二叉树"),(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211209091919650.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,p._)("p",null,"因为第二颗的wpl为59，最小，所以第二颗就是赫夫曼树")])],-1),o=(0,p.uE)('<h2 id="初步分析" tabindex="-1"><a class="header-anchor" href="#初步分析" aria-hidden="true">#</a> 初步分析</h2><p>以该数组作为例子</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们根据上面arr数组构建赫夫曼树的时候，需要将数组中的每一个元素都看成一颗简单的二叉树，<code>该元素就是此二叉树的根节点</code>，该二叉树的左右节点，可以假想成某两个数之和，比如</p><ul><li>13元素，可以想成左节点为3，右节点为10(<code>虽然数组中可能不存在</code>)</li><li>....</li></ul><p>所以<code>arr</code>数组中的每一个元素都是一颗简单的二叉树，并且这个元素位于<code>根节点上</code></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>因为wpl的计算式为: <code>节点到根节点的路径长度 * 该节点的权值</code></p><p>而<code>arr</code>数组中，每一个元素就是根节点，该元素可以看成是该根节点的权值，所以当我们将上面的arr数组构建成二叉树的话，为了保证wpl最小，所以就需要将此数组中，最大的数，放在隔根节点最近的地方，这样才能保证最终的wpl最小</p><p>所以将上面数组构建成赫夫曼树的步骤为</p><ol><li>排序</li><li>取出最小的元素和次小的元素，构建成一颗新二叉树(<code>权值为这两个元素之后</code>)，并设置左右节点分别为最小元素和次小元素</li><li>从arr中删除最小元素和次小元素</li><li>将2步骤中，新构建的元素加入到arr中</li><li>重复上面操作</li></ol></div><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><p>因为我们需要对数组进行排序，所以我们可以让<code>Node</code>对象实现<code>Comparable&lt;Node&gt;</code>接口，重新方法，让此对象能够进行排序</p><p>推荐使用<code>ArrayList</code>对象，存放<code>Node</code>对象，比较快</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuffmanTree</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token class-name">Node</span> singleNode <span class="token operator">=</span> <span class="token function">createHuffmanTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">createHuffmanTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> nodeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//1.将节点放入集合中</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            nodeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">//2.对集合中的元素进行排序</span>\n        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nodeList<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n        * 依次取出最小的一个node节点和次小的node节点，然后将他们重新组成一个新的node节点，\n        * 该新node节点的左右子树分别为最小的node节点和次小node节点\n        * */</span>\n\n        <span class="token comment">//当该nodeList集合长度小于1时，就完成了</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>nodeList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n            <span class="token comment">//最小和次小的组合成一个新node节点</span>\n            <span class="token class-name">Node</span> parentNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>nodeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">+</span> nodeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            parentNode<span class="token punctuation">.</span>left <span class="token operator">=</span> nodeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            parentNode<span class="token punctuation">.</span>right <span class="token operator">=</span> nodeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">//重新将该parentNode加入到集合中</span>\n            nodeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">//从nodeList集合中，移除最小的和次小的node节点</span>\n            nodeList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            nodeList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">//重新排序</span>\n            <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nodeList<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> nodeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">int</span> value<span class="token punctuation">;</span>\n    <span class="token class-name">Node</span> left<span class="token punctuation">;</span>\n    <span class="token class-name">Node</span> right<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Node</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">-</span> o<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Node{&quot;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;value=&quot;</span> <span class="token operator">+</span> value <span class="token operator">+</span>\n                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br></div></div>',11),c={},l=(0,a(83744).Z)(c,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,t,o],64)}]])}}]);