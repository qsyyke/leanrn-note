"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7840],{43789:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5a412f25",path:"/datastructure/tree/%E5%A0%86%E6%8E%92%E5%BA%8F.html",title:"数据结构之堆排序",lang:"en-US",frontmatter:{date:"2021/11/4 12:51"},excerpt:"",headers:[{level:2,title:"基本思想",slug:"基本思想",children:[]},{level:2,title:"演示",slug:"演示",children:[{level:3,title:"步骤一，构建大顶堆",slug:"步骤一-构建大顶堆",children:[]},{level:3,title:"步骤二，交换",slug:"步骤二-交换",children:[]},{level:3,title:"堆排序基本思路",slug:"堆排序基本思路",children:[]}]},{level:2,title:"代码实现",slug:"代码实现",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},60121:(n,s,a)=>{a.r(s),a.d(s,{default:()=>E});var p=a(66252);const t=(0,p.uE)('<h1 id="数据结构之堆排序" tabindex="-1"><a class="header-anchor" href="#数据结构之堆排序" aria-hidden="true">#</a> 数据结构之堆排序</h1><ul><li>概念</li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>堆排序</code>是利用堆这种数据结构而设计的一种排序算法，<code>堆排序</code>是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。 堆是具有以下性质的完全二叉树</p><blockquote><p>每个结点的值都大于或等于其左右孩子结点的值，称为<code>大顶堆</code>, 注意 : 没有要求结点的左孩子的值和右孩子的值的大小关系。 每个结点的值都小于或等于其左右孩子结点的值，称为<code>小顶堆</code></p></blockquote></div>',3),e=(0,p._)("details",{class:"custom-container details"},[(0,p._)("summary",null,"大顶堆"),(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211104125348791.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,p._)("p",null,"我们对堆中的结点按层进行编号，映射到数组中就是下面这个样子:"),(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211104125439700.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,p._)("p",null,"大顶堆特点"),(0,p._)("blockquote",null,[(0,p._)("p",null,[(0,p._)("code",null,"arr[i] >= arr[2*i+1] && arr[i] >= arr[2*i+2] ")]),(0,p._)("p",null,"i 对应第几个节点，i从0开始编号")])],-1),o=(0,p._)("details",{class:"custom-container details"},[(0,p._)("summary",null,"小顶堆"),(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211104125556225.png?x-oss-process=style/pictureProcess1",data:"aurora"})]),(0,p._)("p",null,"小顶堆特点"),(0,p._)("blockquote",null,[(0,p._)("p",null,[(0,p._)("code",null,"arr[i] <= arr[2*i+1] && arr[i] <= arr[2*i+2]")]),(0,p._)("p",null,"i 对应第几个节点，i从0开始编号")])],-1),c=(0,p.uE)('<h2 id="基本思想" tabindex="-1"><a class="header-anchor" href="#基本思想" aria-hidden="true">#</a> 基本思想</h2><p>这里以大顶堆为例</p><ul><li>将待排序序列构造成一个大顶堆(<code>因为大顶堆，父节点的值都比左右节点的大，所以根节点就是所有的父节点，也就是最大的</code>)</li><li>此时，整个序列的最大值就是堆顶的根节点。</li><li>将其与末尾元素进行交换，此时末尾就为最大值(<code>升序</code>)</li><li>然后将剩余n-1(<code>因为最大的已经找出来了，所以只需要对n - 1</code>)个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。</li></ul><h2 id="演示" tabindex="-1"><a class="header-anchor" href="#演示" aria-hidden="true">#</a> 演示</h2><p>这里对下面的数组进行堆排序</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="步骤一-构建大顶堆" tabindex="-1"><a class="header-anchor" href="#步骤一-构建大顶堆" aria-hidden="true">#</a> 步骤一，构建大顶堆</h3>',7),l=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211104130515978.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),r=(0,p._)("p",null,"此图便是该数组最初对应的二叉树图",-1),u=(0,p._)("blockquote",null,[(0,p._)("p",null,[(0,p.Uk)("此时我们从最后一个非叶子结点开始（叶结点自然不用调整，第一个非叶子结点"),(0,p._)("code",null,"arr.length/2-1"),(0,p.Uk)("=5/2-1=1，也就是下面的6结点），从左至右，从下至上进行调整。")]),(0,p._)("p",null,[(0,p.Uk)("第一个非叶子节点为"),(0,p._)("code",null,"arr.length / 2 -1"),(0,p.Uk)("，那么第二个非叶子节点，也就是依次减一，非叶子节点的个数为"),(0,p._)("code",null,"arr.length / 2 -1")])],-1),i=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps1.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),k=(0,p.uE)('<details class="custom-container details"><summary>对应代码</summary><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> index <span class="token operator">=</span>  n <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>n <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>n <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span>  <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>\n     <span class="token comment">//左节点的值小于右节点的值</span>\n    index <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   \t<span class="token comment">//然后在和temp进行比较，</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></details><blockquote><p>找到第二个非叶节(<code>arr.length / 2 - 2 = 0</code>)点4，由于[4,9,8]中9元素最大，4和9交换。</p></blockquote>',2),b=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211104130856389.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),m=(0,p._)("blockquote",null,[(0,p._)("p",null,"这时，交换导致了子根[4,5,6]结构混乱，继续调整，[4,5,6]中6最大，交换4和6。")],-1),d=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps2.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),g=(0,p._)("p",null,"此时，我们就将一个无序序列构造成了一个大顶堆。",-1),h=(0,p._)("h3",{id:"步骤二-交换",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#步骤二-交换","aria-hidden":"true"},"#"),(0,p.Uk)(" 步骤二，交换")],-1),y=(0,p._)("blockquote",null,[(0,p._)("p",null,[(0,p._)("strong",null,"将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素。如此反复进行交换、重建、交换。")])],-1),_=(0,p._)("blockquote",null,[(0,p._)("p",null,"将堆顶元素9和末尾元素4进行交换")],-1),x=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps3.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),v=(0,p._)("blockquote",null,[(0,p._)("p",null,"重新调整结构，使其继续满足堆定义")],-1),j=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps4.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),w=(0,p._)("blockquote",null,[(0,p._)("p",null,"再将堆顶元素8与末尾元素5进行交换，得到第二大元素8.")],-1),f=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps5.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),z=(0,p._)("blockquote",null,[(0,p._)("p",null,"后续过程，继续进行调整，交换，如此反复进行，最终使得整个序列有序")],-1),q=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/wps6.jpg?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),S=(0,p.uE)('<h3 id="堆排序基本思路" tabindex="-1"><a class="header-anchor" href="#堆排序基本思路" aria-hidden="true">#</a> 堆排序基本思路</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li><p>将无序序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆</p></li><li><p>将堆顶元素与末尾元素交换，将最大元素&quot;沉&quot;到数组末端</p></li><li><p>重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，直到整个序列有序</p></li></ul></div><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><p>以上面数组为例</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//mian method</span>\n<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>\n<span class="token function">heapSortFor</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//方法实现</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSortFor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token comment">//从第一个是非叶子节点的节点开始，arr.length / 2 -1就是该节点的序号(根节点为0，从左往右依次数)</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">heapSortArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>\n        <span class="token function">heapSortArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//adjustHeap(arr, 0, j);</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSortArr</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//保存该节点的数据</span>\n    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//该非叶子节点的左节点比右节点小</span>\n            i<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            index <span class="token operator">=</span> i<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div>',6),P={},E=(0,a(83744).Z)(P,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,o,c,l,r,u,i,k,b,m,d,g,h,y,_,x,v,j,w,f,z,q,S],64)}]])}}]);