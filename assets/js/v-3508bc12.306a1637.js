"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7608],{87912:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-3508bc12",path:"/datastructure/tree/storagetree.html",title:"顺序存储二叉树",lang:"en-US",frontmatter:{date:"2021/11/2 12:49"},excerpt:"",headers:[{level:2,title:"存储二叉树",slug:"存储二叉树",children:[{level:3,title:"代码演示",slug:"代码演示",children:[]}]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},48780:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var p=a(66252);const e=(0,p._)("h1",{id:"顺序存储二叉树",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#顺序存储二叉树","aria-hidden":"true"},"#"),(0,p.Uk)(" 顺序存储二叉树")],-1),t=(0,p._)("h2",{id:"存储二叉树",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#存储二叉树","aria-hidden":"true"},"#"),(0,p.Uk)(" 存储二叉树")],-1),o=(0,p._)("p",null,"从数据存储来看，数组存储方式和树的存储方式可以相互转换，即数组可以转换成树，树也可以转换成数组，",-1),c=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211102123527762.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),l=(0,p.uE)('<blockquote><p>对于一个数组，我们可以使用前序遍历，中序遍历，后序遍历的方式进行遍历，也可以将树使用相应的遍历方式，转换成数组</p></blockquote><div class="custom-container tip"><p class="custom-container-title">顺序存储二叉树的特点</p><ol><li><p>顺序二叉树通常只考虑<code>完全二叉树</code></p></li><li><p>第n个元素的左子节点为<code>2 * n + 1</code></p></li><li><p>第n个元素的右子节点为<code>2 * n + 2</code></p></li><li><p>第n个元素的父节点为<code>(n-1) / 2</code></p></li><li><p>n : 表示二叉树中的第几个元素(按0开始编号)，并且是从根节点(<code>0</code>)开始，从左往右开始数</p></li></ol></div><h3 id="代码演示" tabindex="-1"><a class="header-anchor" href="#代码演示" aria-hidden="true">#</a> 代码演示</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>对此数组使用前序遍历的方式，进行遍历</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">StorageTree</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">StorageTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> arr<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 使用前序遍历的方式顺序存储二叉树\n     * 第n个元素左子节点为2 * n + 1,\n     * 第n个元素右子节点为2 * n + 2,\n     * 第n个元素父节点为(n - 1) / 2\n     * 其中，根节点为第0个元素，后面的元素序号都是从左往右，一层一层的进行计算的，并且此顺序存储方式，只适合域\n     * 完全二叉树\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preStorage</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;此数组不能进行前序遍历&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">//进行前序遍历 首先进行前序遍历</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//对左子树进行遍历</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preStorage</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">//对右子树进行遍历</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preStorage</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><ul><li><p>运行结果</p><blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>1\t2\t4\t5\t3\t6\t7\t\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote></li></ul><p>这颗树叶就是上图中的那颗</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>我们可以将数组使用三种遍历方法进行遍历，同样，也可以将一颗完全二叉树存储在一个数组中，但是一定要满足此二叉树是一颗<code>完全二叉树</code>，否则不能使用</p><p>解决的重点就是</p><blockquote><ul><li>第n个元素的左子节点为<code>2 * n + 1</code></li><li>第n个元素的右子节点为<code>2 * n + 2</code></li><li>第n个元素的父节点为<code>(n-1) / 2</code></li></ul></blockquote></div>',9),u={},r=(0,a(83744).Z)(u,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,t,o,c,l],64)}]])}}]);