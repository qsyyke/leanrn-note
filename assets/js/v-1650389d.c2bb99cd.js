"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8762],{84607:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-1650389d",path:"/linux/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86.html",title:"Linux的进行管理",lang:"en-US",frontmatter:{date:"2021/12/19 16:31",title:"Linux的进行管理",tag:["linux","程序"],categories:["linux","进程"]},excerpt:"",headers:[{level:2,title:"子程序和父程序",slug:"子程序和父程序",children:[]},{level:2,title:"linux的多用户环境",slug:"linux的多用户环境",children:[]},{level:2,title:"查看程序的信息",slug:"查看程序的信息",children:[{level:3,title:"ps",slug:"ps",children:[]},{level:3,title:"什么是僵尸程序",slug:"什么是僵尸程序",children:[]},{level:3,title:"top",slug:"top",children:[]},{level:3,title:"pstree",slug:"pstree",children:[]}]},{level:2,title:"kill 和 killall",slug:"kill-和-killall",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},71388:(s,n,a)=>{a.r(n),a.d(n,{default:()=>d});var e=a(66252);const p=(0,e.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>触发任何一个事件时，系统都会将他定义成为一个程序，并且给予这个程序一个 ID ，称为<code>PID</code>，同时依据启发这个程序的使用者与相关属性关系，给予这个 PID 一组 有效的权限设置。</p><p><code>其实Linux系统判断某个用户是否对此命令具有操作权限，就是依据这个pid进行判断的</code></p><p>这个也就是，当我们使用<code>root</code>账户和使用<code>tom</code>这个账户运行<code>touch newfile.txt</code>指令时，他们的pid是完全不同的</p><p><code>systemd </code>这个程序是所有程序的祖宗</p></div>',1),o=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211219223511772.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),c=(0,e.uE)('<h2 id="子程序和父程序" tabindex="-1"><a class="header-anchor" href="#子程序和父程序" aria-hidden="true">#</a> 子程序和父程序</h2><p>当我们使用一个用户登陆系统后，会取得一个<code>bash</code>的<code>shell</code>，然后我们使用取得的这个bash接口去调用另一个指令，比如<code>touch</code>的时候，那些另外执行的指令也会被触发成为<code>PID</code>，那个后来执行指令才产生的 PID就是“子程序”了，而在我们原本的 bash 环境下，就称为“<code>父程序</code>”了</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@qsyyke ~<span class="token punctuation">]</span><span class="token comment"># ps -l</span>\nF S   <span class="token environment constant">UID</span>    PID   <span class="token environment constant">PPID</span>  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD\n<span class="token number">4</span> S     <span class="token number">0</span>  <span class="token number">16197</span>  <span class="token number">16193</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> - <span class="token number">29194</span> do_wai pts/0    00:00:00 <span class="token function">bash</span>\n<span class="token number">0</span> R     <span class="token number">0</span>  <span class="token number">18252</span>  <span class="token number">16197</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> - <span class="token number">38309</span> -      pts/0    00:00:00 <span class="token function">ps</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这里的<code>PID</code>就是<code>CMD</code>操作所产生的<code>PID</code>,此程序对应着一个父程序，此父程序的<code>PID</code>为<code>PPID</code></p><p>在很多的时候，当我们运行完一个指令，如<code>touch</code>之后，那么此程序就会被终止，终止之后，其pid也会消失，但是并不是所有的指令执行完成之后，都会终止，这里就有一些程序执行完成之后，不会终止，还会一直执行，就比如说守护线程(<code>daemon</code>),这些程序我们可以称他们为<code>常驻在内存中的程序</code></p><p>常驻在内存当中的程序通常都是负责一些系统所提供的功能以服务使用者各项任务，因此这些常驻程序就会被我们称为：服务 （daemon）。系统的服务非常的多， 不过主要大致分成系统本身所需要的服务，例如<code>crond</code>及<code>atd</code>，还有<code>rsyslogd</code>等等的。还有一些则 是负责网络连线的服务，例如 Apache, named, postfix, vsftpd... 等等的。这些网络服务比较有趣的地方，在于这些程序被执行后，他会启动一个可以负责网络监听的端口 （port） ，以提供外部用户端 （client） 的连线要求。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>以<code>crontab</code>来说，他的主要执行程序名称应该是<code>cron</code>或 at 才对，为啥要加个 d 在后面？</p><p>而成为<code>crond</code>, <code>atd</code>呢？就是因为 Linux 希望我们可以简单的判断该程序是否为daemon，所以，一般 daemon 类型的程序都会加上 d 在文件名后头～包括服务器篇我们会看到的httpd, vsftpd 等等都是。</p></div><h2 id="linux的多用户环境" tabindex="-1"><a class="header-anchor" href="#linux的多用户环境" aria-hidden="true">#</a> linux的多用户环境</h2><p>Linux中，我们没一个用户都有一个属于这个用户的环境，我们可以根据自己的喜好进行配置</p><h2 id="查看程序的信息" tabindex="-1"><a class="header-anchor" href="#查看程序的信息" aria-hidden="true">#</a> 查看程序的信息</h2><p>我们可以利用静态的<code>ps</code>或者是动态的<code>top</code>，还能以<code>pstree</code>来查阅程序树之间的信息</p><blockquote><p><code>ps axu</code>和<code>ps -axu</code>这两个指令时完全不同的</p></blockquote><h3 id="ps" tabindex="-1"><a class="header-anchor" href="#ps" aria-hidden="true">#</a> ps</h3><blockquote><p>常用选项</p><p><code>-A</code> ：所有的 process 均显示出来，与 -e 具有同样的效用；</p><p><code>-a</code> ：不与 terminal 有关的所有 process ；</p><p><code>-u</code> ：有效使用者 （effective user） 相关的 process ；</p><p><code>x</code> ：通常与 a 这个参数一起使用，可列出较完整信息。</p><p>输出格式规划：</p><p><code>l</code>：较长、较详细的将该 PID 的的信息列出；</p><p><code>j</code>：工作的格式 （jobs format）</p><p><code>-f</code>：做一个更为完整的输出。</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ps</span> -l <span class="token comment"># 只能查阅自己bash</span>\n\n<span class="token function">ps</span> axu <span class="token comment"># 以查阅所有系统运行</span>\n\n<span class="token function">ps</span> -ef <span class="token comment"># 是以全格式显示当前所有的进程 -e 显示所有进程。-f 全格式</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p><code>ps -l</code>只是列出与你操作环境<code>bash</code>相关的程序，但是并不会列出这些程序的父程序以及<code>systemd</code></p></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@qsyyke ~<span class="token punctuation">]</span><span class="token comment"># ps -l</span>\nF S   <span class="token environment constant">UID</span>    PID   <span class="token environment constant">PPID</span>  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD\n<span class="token number">4</span> S     <span class="token number">0</span>  <span class="token number">16197</span>  <span class="token number">16193</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> - <span class="token number">29194</span> do_wai pts/0    00:00:00 <span class="token function">bash</span>\n<span class="token number">0</span> R     <span class="token number">0</span>  <span class="token number">22767</span>  <span class="token number">16197</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> - <span class="token number">38309</span> -      pts/0    00:00:00 <span class="token function">ps</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>此<code>ps -l</code>指令展示的结果分析</p><blockquote><p><code>F</code>：代表这个程序旗标（process flags），说明这个程序的总结权限，常见号码有：</p><ul><li><p>若为<code>4</code> 表示此程序的权限为 root ；</p></li><li><p>若为<code>1</code>则表示此子程序仅进行复制（fork）而没有实际执行（exec）。</p></li></ul><p><code>S</code>：代表这个程序的状态 （STAT），主要的状态有：</p><ul><li><p><code>R</code>（Running）：该程序正在运行中；</p></li><li><p><code>S</code>（Sleep）：该程序目前正在睡眠状态（idle），但可以被唤醒（signal）。</p></li><li><p><code>D</code> ：不可被唤醒的睡眠状态，通常这支程序可能在等待 I/O 的情况（ex&gt;打印）</p></li><li><p><code>T</code> ：停止状态（stop），可能是在工作控制（背景暂停）或除错 （traced） 状态；</p></li><li><p><code>Z</code> （Zombie）：僵尸状态，程序已经终止但却无法被移除至内存外。</p></li></ul><p><code>UID/PID/PPID</code>：代表“此程序被该 UID 所拥有/程序的 PID 号码/此程序的父程序PID号码”</p><p><code>C</code>：代表 CPU 使用率，单位为百分比；</p><p><code>PRI/NI</code>：Priority/Nice 的缩写，代表此程序被 CPU 所执行的优先顺序，数值越小代表该程序越快被 CPU 执行。详细的 PRI 与 NI 将在下一小节说明。</p><p><code>ADDR/SZ/WCHAN</code>：都与内存有关，ADDR 是 kernel function，指出该程序在内存的哪个部分，如果是个 running 的程序，一般就会显示“ - ” / SZ 代表此程序用掉多少内存 /</p><p><code>WCHAN</code> 表示目前程序是否运行中，同样的， 若为 - 表示正在运行中。</p><p><code>TTY</code>：登陆者的终端机位置，若为远端登陆则使用动态终端接口 （pts/n）；</p><p><code>TIME</code>：使用掉的 CPU 时间，注意，是此程序实际花费 CPU 运行的时间，而不是系统时间；</p><p><code>CMD</code>：就是 command 的缩写，造成此程序的触发程序之指令为何。</p></blockquote><p>所以<code>4 S 0 16197 16193 0 80 0 - 29194 do_wai pts/0 00:00:00 bash</code>解读为</p><blockquote><p><code>bash</code>的程序属于UID为0的使用者，状态为睡眠（sleep），此程序的 PID 为16197，优先执行顺序为 80 ，下达 bash 所取得的终端接口为 pts/0 ，运行状态为等待</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>root@qsyyke ~<span class="token punctuation">]</span><span class="token comment"># ps axu</span>\n<span class="token environment constant">USER</span>        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot          <span class="token number">1</span>  <span class="token number">0.0</span>  <span class="token number">0.2</span> <span class="token number">193800</span>  <span class="token number">6932</span> ?        Ss   <span class="token number">12</span>月19   <span class="token number">0</span>:11 /usr/lib/systemd/systemd --switched-root --system --deserialize <span class="token number">22</span>\nroot          <span class="token number">2</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>      <span class="token number">0</span>     <span class="token number">0</span> ?        S    <span class="token number">12</span>月19   <span class="token number">0</span>:00 <span class="token punctuation">[</span>kthreadd<span class="token punctuation">]</span>\nroot          <span class="token number">3</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>      <span class="token number">0</span>     <span class="token number">0</span> ?        S    <span class="token number">12</span>月19   <span class="token number">0</span>:00 <span class="token punctuation">[</span>ksoftirqd/0<span class="token punctuation">]</span>\nroot          <span class="token number">5</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>      <span class="token number">0</span>     <span class="token number">0</span> ?        S<span class="token operator">&lt;</span>   <span class="token number">12</span>月19   <span class="token number">0</span>:00 <span class="token punctuation">[</span>kworker/0:0H<span class="token punctuation">]</span>\nroot          <span class="token number">7</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>      <span class="token number">0</span>     <span class="token number">0</span> ?        S    <span class="token number">12</span>月19   <span class="token number">0</span>:00 <span class="token punctuation">[</span>migration/0<span class="token punctuation">]</span>\nroot          <span class="token number">8</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>      <span class="token number">0</span>     <span class="token number">0</span> ?        S    <span class="token number">12</span>月19   <span class="token number">0</span>:00 <span class="token punctuation">[</span>rcu_bh<span class="token punctuation">]</span>\nroot          <span class="token number">9</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>      <span class="token number">0</span>     <span class="token number">0</span> ?        S    <span class="token number">12</span>月19   <span class="token number">0</span>:18 <span class="token punctuation">[</span>rcu_sched<span class="token punctuation">]</span>\nroot         <span class="token number">10</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span>      <span class="token number">0</span>     <span class="token number">0</span> ?        S<span class="token operator">&lt;</span>   <span class="token number">12</span>月19   <span class="token number">0</span>:00 <span class="token punctuation">[</span>lru-add-drain<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>此<code>ps axu</code>指令的信息分析为</p><blockquote><p><code>USER</code>：该 process 属于那个使用者帐号的？</p><p><code>PID</code> ：该 process 的程序识别码。</p><p><code>%CPU</code>：该 process 使用掉的 CPU 资源百分比；</p><p><code>%MEM</code>：该 process 所占用的实体内存百分比；</p><p><code>VSZ</code> ：该 process 使用掉的虚拟内存量 （KBytes）</p><p><code>RSS</code> ：该 process 占用的固定的内存量 （KBytes）</p><p><code>TTY</code> ：该 process 是在那个终端机上面运行，若与终端机无关则显示 ?，另外， tty1-tty6是本机上面的登陆者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。</p><p><code>STAT</code>：该程序目前的状态，状态显示与 ps -l 的 S 旗标相同 （R/S/T/Z）</p><p><code>START</code>：该 process 被触发启动的时间；</p><p><code>TIME</code> ：该 process 实际使用 CPU 运行的时间。</p><p><code>COMMAND</code>：该程序的实际指令为何？</p></blockquote><h3 id="什么是僵尸程序" tabindex="-1"><a class="header-anchor" href="#什么是僵尸程序" aria-hidden="true">#</a> 什么是僵尸程序</h3><p>造成<code>僵尸程序(zombie)</code>的成因是因为该程序应该已经执行完毕，或者是因故应该要终止了，但是该程序的父程序却无法完整的将该程序结束掉，而造成那个程序一直存在内存当中。如果你发现在某个程序的 CMD后面还接上<code>&lt;defunct&gt;</code>时，就代表该程序是僵尸程序啦，例如：</p><p><code>apache 8683 0.0 0.9 83384 9992 ? Z 14:33 0:00 /usr/sbin/httpd &lt;defunct&gt;</code></p><p>当系统不稳定的时候就容易造成所谓的僵尸程序，可能是因为程序写的不好啦，或者是使用者的操作习惯不良等等所造成。</p><p>如果你发现系统中很多僵尸程序时，记得啊！要找出该程序的父程序，然后好好的做个追踪，好好的进行主机的环境最优化啊！</p><hr><p>事实上，通常僵尸程序都已经无法控管，而直接是交给<code>systemd</code>这支程序来负责了，偏偏<code>systemd</code>是系统第一支执行的程序，他是所有程序的父程序！我们无法杀掉该程序的 （杀掉他，系统就死掉了！），如果产生僵尸程序，而系统过一阵子还没有办法通过核心 非经常性的特殊处理来将该程序删除时，那你只好通过reboot 的方式来将该程序抹去了！</p><h3 id="top" tabindex="-1"><a class="header-anchor" href="#top" aria-hidden="true">#</a> top</h3><p>用法</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">top</span> 选项\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>常用选项</p><p><code>-d</code> ：后面可以接秒数，就是整个程序画面更新的秒数。默认是 5 秒；</p><p><code>-b</code> ：以批次的方式执行 top,通常会搭配数据流重导向来将批次的结果输出成为文件。</p><p><code>-n</code> ：与 -b 搭配，意义是，需要进行几次 top 的输出结果。</p><p><code>-p</code> ：指定某些个 PID 来进行观察监测而已。</p><p>...</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">top</span> - 00:10:40 up  <span class="token number">8</span>:57,  <span class="token number">3</span> users,  load average: <span class="token number">0.00</span>, <span class="token number">0.01</span>, <span class="token number">0.05</span>\nTasks: <span class="token number">278</span> total,   <span class="token number">1</span> running, <span class="token number">277</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">0</span> zombie\n%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:  <span class="token number">0.1</span> us,  <span class="token number">0.1</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">99.8</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> st\nKiB Mem <span class="token builtin class-name">:</span>  <span class="token number">3024908</span> total,   <span class="token number">141372</span> free,  <span class="token number">1351288</span> used,  <span class="token number">1532248</span> buff/cache\nKiB Swap:  <span class="token number">3145724</span> total,  <span class="token number">3145724</span> free,        <span class="token number">0</span> used.  <span class="token number">1264668</span> avail Mem \n\n   PID <span class="token environment constant">USER</span>      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                              \n  <span class="token number">8747</span> root      <span class="token number">20</span>   <span class="token number">0</span>  <span class="token number">246484</span>   <span class="token number">6852</span>   <span class="token number">5364</span> S   <span class="token number">0.7</span>  <span class="token number">0.2</span>   <span class="token number">0</span>:46.08 vmtoolsd                                                                                                             \n <span class="token number">11245</span> root      <span class="token number">20</span>   <span class="token number">0</span>  <span class="token number">566904</span>  <span class="token number">26100</span>  <span class="token number">19320</span> S   <span class="token number">0.3</span>  <span class="token number">0.9</span>   <span class="token number">0</span>:45.92 vmtoolsd                                                                                                             \n <span class="token number">11250</span> root      <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">1383916</span>  <span class="token number">60400</span>  <span class="token number">22324</span> S   <span class="token number">0.3</span>  <span class="token number">2.0</span>   <span class="token number">0</span>:04.37 gnome-software                                                                                                       \n <span class="token number">16489</span> root      <span class="token number">20</span>   <span class="token number">0</span>       <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span> S   <span class="token number">0.3</span>  <span class="token number">0.0</span>   <span class="token number">0</span>:04.14 kworker/0:0                                                                                                          \n <span class="token number">23632</span> root      <span class="token number">20</span>   <span class="token number">0</span>  <span class="token number">162152</span>   <span class="token number">2456</span>   <span class="token number">1596</span> R   <span class="token number">0.3</span>  <span class="token number">0.1</span>   <span class="token number">0</span>:00.16 <span class="token function">top</span>                                                                                                                  \n     <span class="token number">1</span> root      <span class="token number">20</span>   <span class="token number">0</span>  <span class="token number">193800</span>   <span class="token number">6932</span>   <span class="token number">4184</span> S   <span class="token number">0.0</span>  <span class="token number">0.2</span>   <span class="token number">0</span>:11.57 systemd        \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>默认情况下，程序检测更新数据的时间是5秒，但是我们可以通过<code>-d</code>进行修改</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">top</span> -d <span class="token number">20</span> <span class="token comment"># 20秒更新一次</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></div><hr><p>信息解读</p><blockquote><ul><li><p>第一行（top...）：这一行显示的信息分别为：</p><ul><li><p>目前的时间，亦即是 00:53:59 那个项目；</p></li><li><p>开机到目前为止所经过的时间，亦即是 up 6:07, 那个项目；</p></li><li><p>已经登陆系统的使用者人数，亦即是 3 users, 项目；</p><p>系统在 1, 5, 15 分钟的平均工作负载。</p></li></ul></li><li><p>第二行（Tasks...）：显示的是目前程序的总量与个别程序在什么状态（running, sleeping, stopped, zombie）。 比较需要注意的是最后的 zombie 那个数值，如果不是0！好好看看到底是那个 process 变成僵尸了吧？</p></li><li><p>第三行（%Cpus...）：显示的是 CPU 的整体负载，每个项目可使用 ? 查阅。需要特别注意的是 wa 项目，那个项目代表的是 I/O wait， 通常你的系统会变慢都是 I/O 产生的问题比较大！因此这里得要注意这个项目耗用 CPU 的资源喔！</p><p>另外，如果是多核心的设备，可以按下数字键“1”来切换成不同 CPU 的负载率。</p></li><li><p>第四行与第五行：表示目前的实体内存与虚拟内存 （Mem/Swap） 的使用情况。 再次重申，要注意的是 swap 的使用量要尽量的少！如果 swap 被用的很大量，表示系统的实体内存实在不足！</p></li><li><p>第六行：这个是当在 top 程序当中输入指令时，显示状态的地方。</p></li></ul></blockquote><p>除了上面那些，我们可以在<code>top [选项]</code>之外，我们也可以动态监控，也就是我们输入<code>top</code>进入之后，我们可以直接输入一些参数，例如按pid进行排序，按cpu占用，内存等等</p>',41),l=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211220142820814.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),t=(0,e.uE)('<div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>除了上面这些，还有<code>U</code>查看指定用户，<code>k</code>终止某个进程</p></div><h3 id="pstree" tabindex="-1"><a class="header-anchor" href="#pstree" aria-hidden="true">#</a> pstree</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pstree <span class="token punctuation">[</span>选项<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>常用选项</p><p><code>-p</code> :显示进程的 PID</p><p><code>-u</code> :显示进程的所属用户</p></blockquote><h2 id="kill-和-killall" tabindex="-1"><a class="header-anchor" href="#kill-和-killall" aria-hidden="true">#</a> kill 和 killall</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">kill</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 进程号 <span class="token comment">#（功能描述：通过进程号杀死/终止进程） </span>\n<span class="token function">killall</span> 进程名称  <span class="token comment">#（功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用）</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>常用选项</p><p><code>-9</code> :表示强迫进程立即停止</p><p><code>如果我们只是单纯使用kill指令，但是有一些程序，可能系统判定为是我们错误操作，并不会终止，所以这个时候，我们就需要加上-9，强迫终止</code></p></blockquote>',7),r=(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("p",null,"踢掉某个非法登录用户kill进程号"),(0,e._)("p",null,[(0,e.Uk)("首先，我们可以使用"),(0,e._)("code",null,"ps -ef | grep tom"),(0,e.Uk)("查看tom用户pid，然后使用"),(0,e._)("code",null,"kill -9 pid"),(0,e.Uk)("kill掉")])]),(0,e._)("li",null,[(0,e._)("p",null,"终止远程登录服务 sshd, 在适当时候再次重启 sshd 服务"),(0,e._)("p",null,"kill sshd 对应的进程号;"),(0,e._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"/bin/systemctl start sshd.service\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br")])])]),(0,e._)("li",null,[(0,e._)("p",null,"终止多个 gedit"),(0,e._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e._)("span",{class:"token function"},"killall"),(0,e.Uk)(" gedit \n")])]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br")])]),(0,e._)("p",null,"其中，gedit就是Linux桌面端，文件编辑器"),(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20211220003653621.png?x-oss-process=style/pictureProcess1",data:"aurora"})])])],-1),u={},d=(0,a(83744).Z)(u,[["render",function(s,n){return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,o,c,l,t,r],64)}]])}}]);