"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9579],{2952:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-78d328e4",path:"/javaweb/%E6%A1%88%E4%BE%8B.html",title:"javaweb案例",lang:"en-US",frontmatter:{stick:!1},excerpt:"",headers:[{level:2,title:"创建包",slug:"创建包",children:[]},{level:2,title:"查询所有用户信息",slug:"查询所有用户信息",children:[{level:3,title:"web层",slug:"web层",children:[]},{level:3,title:"service层",slug:"service层",children:[]},{level:3,title:"dao层",slug:"dao层",children:[]},{level:3,title:"util",slug:"util",children:[]}]},{level:2,title:"UserListServlet",slug:"userlistservlet",children:[{level:3,title:"list.jsp",slug:"list-jsp",children:[]},{level:3,title:"封装User对象",slug:"封装user对象",children:[]}]},{level:2,title:"删除操作",slug:"删除操作",children:[]},{level:2,title:"修改操作",slug:"修改操作",children:[]},{level:2,title:"删除选中",slug:"删除选中",children:[]},{level:2,title:"分页查询",slug:"分页查询",children:[{level:3,title:"前台字段的展示",slug:"前台字段的展示",children:[]}]},{level:2,title:"复杂条件查询",slug:"复杂条件查询",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},34210:(n,s,a)=>{a.r(s),a.d(s,{default:()=>v});var t=a(66252);const p=(0,t.uE)('<h1 id="javaweb案例" tabindex="-1"><a class="header-anchor" href="#javaweb案例" aria-hidden="true">#</a> javaweb案例</h1><h1 id="数据库创建" tabindex="-1"><a class="header-anchor" href="#数据库创建" aria-hidden="true">#</a> 数据库创建</h1><div class="language-mysql ext-mysql line-numbers-mode"><pre class="language-mysql"><code>CREATE table `user` (\nid int(3) PRIMARY key auto_increment,\nusername varchar(10) not null,\npassword VARCHAR(10) not null,\nage int(3) DEFAULT(22),\nsex VARCHAR(1) DEFAULT(&#39;男&#39;),\ncity VARCHAR(2) DEFAULT(&#39;云南&#39;),\nqq int(17) DEFAULT(2291308006),\nemail VARCHAR(15) DEFAULT(&#39;2291308006@qq.com&#39;)\n)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h1 id="三层结构" tabindex="-1"><a class="header-anchor" href="#三层结构" aria-hidden="true">#</a> 三层结构</h1><img src="http://ooszy.cco.vin/img/blog-note/image-20210220223909173.png?x-oss-process=style/pictureProcess1" alt="image-20210220223909173" style="zoom:80%;"><img src="http://ooszy.cco.vin/img/blog-note/image-20210221201942876.png?x-oss-process=style/pictureProcess1" alt="image-20210221201942876" style="zoom:50%;"><h2 id="创建包" tabindex="-1"><a class="header-anchor" href="#创建包" aria-hidden="true">#</a> 创建包</h2><blockquote><p>domain 存放具体的实现类 User</p></blockquote><h1 id="开始" tabindex="-1"><a class="header-anchor" href="#开始" aria-hidden="true">#</a> 开始</h1><h2 id="查询所有用户信息" tabindex="-1"><a class="header-anchor" href="#查询所有用户信息" aria-hidden="true">#</a> 查询所有用户信息</h2><blockquote><p>原则：尽量让每一个类，只完成一个操作</p></blockquote><h3 id="web层" tabindex="-1"><a class="header-anchor" href="#web层" aria-hidden="true">#</a> web层</h3>',12),e=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image-20210221204610341",originSrc:"C:%5CUsers%5Cchuchen%5CPictures%5C%E8%A7%86%E9%A2%91%E6%88%AA%E5%9B%BE%5Cjavaweb%5Cweb%5Cimage-20210221204610341.png",data:"aurora"})],-1),o=(0,t.uE)('<p>点击查询标签，应该让这个页面去<code>UserListServlet</code>文件中去执行查询结果，这个文件的service方法中只完成查询所有信息的操作，只管这一个</p><p>定义这个类在<code>web</code>包中执行，因为后期可能还有其他的，比如<code>过滤</code>，可以重新在web包中，建一个包，用于处理所有的servlet文件请求</p><p><code>web包是表现层，用于处理数据，并将结果数据返回给jsp页面进行展示</code></p><h3 id="service层" tabindex="-1"><a class="header-anchor" href="#service层" aria-hidden="true">#</a> service层</h3><p>service用于执行业务逻辑</p><blockquote><p>创建一个接口，此接口中定义的方法用于返回查询数据库的返回的结果</p><p>每一种查询对应一个方法</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>chu<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>chu<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">UserDao</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>chu<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">UserDaoImpl</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>chu<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>chu<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>\n    <span class="token comment">//可以理解为 每一个用户服务类，都是用于操作数据库，所以has a返回数据库的类</span>\n    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token doc-comment comment">/**\n     * <span class="token keyword">@description</span>: 返回DAO层中查询所有用户信息\n     * <span class="token keyword">@param</span>\n     * <span class="token keyword">@return</span> java.util.List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.chu.domain.User</span><span class="token punctuation">&gt;</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> findAll <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//调用dao的findAll()方法</span>\n        <span class="token keyword">return</span> userDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="dao层" tabindex="-1"><a class="header-anchor" href="#dao层" aria-hidden="true">#</a> dao层</h3><p>dao层用于执行查询操作</p><p>所有的sql语句的查询都在这个类中进行</p><p>最好定义一个接口，并重新建一个包，创建一个类，实现这个dao的接口，这样做的好处就是使用多态</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>chu<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>chu<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">UserDao</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>chu<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>chu<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">DruidUtil</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">BeanPropertyRowMapper</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JdbcTemplate</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token class-name">DruidUtil</span><span class="token punctuation">.</span><span class="token function">getDs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> findAll <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//使用JDBC操作数据库，完成查询所有的信息</span>\n        <span class="token comment">//编写sql语句</span>\n        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select * from user&quot;</span><span class="token punctuation">;</span>\n        <span class="token comment">//执行sql语句</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> users<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="util" tabindex="-1"><a class="header-anchor" href="#util" aria-hidden="true">#</a> util</h3><p>这个包用于存放工具类</p><h2 id="userlistservlet" tabindex="-1"><a class="header-anchor" href="#userlistservlet" aria-hidden="true">#</a> UserListServlet</h2><p>此类是执行查询所有的servlet文件</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> doPost <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//此类用于执行查询所有的用户信息</span>\n        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//返回所有的用户信息</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//存储用户信息，使用请求转发 转发到list.jsp页面</span>\n        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/list.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="list-jsp" tabindex="-1"><a class="header-anchor" href="#list-jsp" aria-hidden="true">#</a> list.jsp</h3><div class="language-jsp ext-jsp line-numbers-mode"><pre class="language-jsp"><code>&lt;table border=&quot;1&quot; class=&quot;table table-bordered table-hover&quot;&gt;\n        &lt;tr class=&quot;success&quot;&gt;\n            &lt;th&gt;编号&lt;/th&gt;\n            &lt;th&gt;姓名&lt;/th&gt;\n            &lt;th&gt;性别&lt;/th&gt;\n            &lt;th&gt;年龄&lt;/th&gt;\n            &lt;th&gt;籍贯&lt;/th&gt;\n            &lt;th&gt;QQ&lt;/th&gt;\n            &lt;th&gt;邮箱&lt;/th&gt;\n            &lt;th&gt;操作&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;c:forEach items=&quot;${users}&quot; var=&quot;user&quot; varStatus=&quot;s&quot;&gt;\n            &lt;tr&gt;\n                &lt;td&gt;${s.count}&lt;/td&gt;\n                &lt;td&gt;${user.username}&lt;/td&gt;\n                &lt;td&gt;${user.sex}&lt;/td&gt;\n                &lt;td&gt;${user.age}&lt;/td&gt;\n                &lt;td&gt;${user.city}&lt;/td&gt;\n                &lt;td&gt;${user.qq}&lt;/td&gt;\n                &lt;td&gt;${user.email}&lt;/td&gt;\n                &lt;td&gt;&lt;a class=&quot;btn btn-default btn-sm&quot; href=&quot;update.html&quot;&gt;修改&lt;/a&gt;&amp;nbsp;&lt;a class=&quot;btn btn-default btn-sm&quot; href=&quot;&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/c:forEach&gt;\n        &lt;tr&gt;\n            &lt;td colspan=&quot;8&quot; align=&quot;center&quot;&gt;&lt;a class=&quot;btn btn-primary&quot; href=&quot;add.html&quot;&gt;添加联系人&lt;/a&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><blockquote><p>&lt;c:forEach items=&quot;${users}&quot; var=&quot;user&quot; varStatus=&quot;s&quot;&gt;</p><p>varStatus=&quot;s&quot;定义的主要作用就是展示编号</p><img src="http://ooszy.cco.vin/img/blog-note/image-20210221220346331.png?x-oss-process=style/pictureProcess1" alt="image-20210221220346331" style="zoom:50%;"></blockquote><h3 id="封装user对象" tabindex="-1"><a class="header-anchor" href="#封装user对象" aria-hidden="true">#</a> 封装User对象</h3><ol><li><p>获取请求的usermap集合</p><p><code>Map&lt;String, String[]&gt; map = request.getParameterMap();</code></p></li><li><p><code>BeanUtils.populate(user,map);</code>调用BeanUtils的方法，可以将获取的map集合，自动存入user对象中</p></li><li><p>验证码正确，进行用户密码的验证</p></li><li><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token annotation punctuation">@Override</span>\n     <span class="token keyword">protected</span> <span class="token keyword">void</span> doPost <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n         request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token comment">//用户登录验证</span>\n         <span class="token comment">//1.获取用户输入验证码</span>\n         <span class="token class-name">String</span> verifycode <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;verifycode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token comment">//2.获取生成的验证码</span>\n         <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token class-name">String</span> checkcode_server <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;CHECKCODE_SERVER&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token comment">//3.验证码进行比对</span>\n         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>verifycode<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>checkcode_server<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n             <span class="token comment">//验证码不正确</span>\n             <span class="token comment">//错误提示信息</span>\n             request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;login_err&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;验证码错误!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n             <span class="token comment">//请求转发到失败页面</span>\n             request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/login.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n             <span class="token keyword">return</span><span class="token punctuation">;</span>\n         <span class="token punctuation">}</span>\n         <span class="token comment">//4.user对象的封装</span>\n         <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> map <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n         <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token keyword">try</span> <span class="token punctuation">{</span>\n             <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">populate</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token punctuation">}</span>\n         <span class="token comment">//调用service层返回查询的user对象</span>\n         <span class="token class-name">UserService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token class-name">User</span> login_User <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">findLoginUsernameAndPassword</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token comment">//判断</span>\n         <span class="token keyword">if</span> <span class="token punctuation">(</span>login_User <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n             <span class="token comment">//用户名正确</span>\n             <span class="token comment">//请求转发到查询所有界面</span>\n             request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/userListServlet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n             <span class="token comment">//移除保存的验证码</span>\n             session<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;CHECKCODE_SERVER&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n             <span class="token keyword">return</span><span class="token punctuation">;</span>\n         <span class="token punctuation">}</span>\n         <span class="token comment">//用户名或者密码错误</span>\n         <span class="token comment">//提示信息</span>\n         session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;Username_err&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;用户名或者密码错误!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token comment">//重定向到登录界面</span>\n         response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;/login.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div></li></ol><blockquote><p><code>注意：因为请求中会存在中文用户名，所以需要设置请求头的编码格式，否则就会出现乱码情况</code>，并且使用乱码的数据进行用户密码的验证，也会失败，</p><p><code>request.setCharacterEncoding(&quot;utf-8&quot;);</code>请求编码</p></blockquote><h2 id="删除操作" tabindex="-1"><a class="header-anchor" href="#删除操作" aria-hidden="true">#</a> 删除操作</h2><blockquote><p>删除操作应该根据唯一键进行删除，这样更简单，因为可能用户名会存在相同</p></blockquote><p>在jsp中为了让用户的体验更好，因为设置一个提示，只有点击确定之后，才能进行删除</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                             \n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">&quot;确定删除id为&#39;&quot;</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">&quot;&#39;的记录?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    \n        location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&quot;${pageContext.request.contextPath}/deletUserServlet?id=&quot;</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span>                                                                                 \n<span class="token punctuation">}</span>                                                                                        \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>confirm()</code>返回的是一个Boolean值，<img src="http://ooszy.cco.vin/img/blog-note/image-20210222194804533.png?x-oss-process=style/pictureProcess1" alt="image-20210222194804533" style="zoom:50%;"></p><h2 id="修改操作" tabindex="-1"><a class="header-anchor" href="#修改操作" aria-hidden="true">#</a> 修改操作</h2><img src="http://ooszy.cco.vin/img/blog-note/image-20210222195521958.png?x-oss-process=style/pictureProcess1" alt="image-20210222195521958" style="zoom:100%;"><p>点击修改按钮，进入修改页面，应该把需要修改记录的信息回显在修改框中，</p><img src="http://ooszy.cco.vin/img/blog-note/image-20210222212221032.png?x-oss-process=style/pictureProcess1" alt="image-20210222212221032"><p>因为性别还有籍贯是使用选择，所以这里使用<code>jsvascript</code>进行，根据请求转发过来的性别还有籍贯</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//性别还有籍贯的选择                                            </span>\n<span class="token keyword">var</span> sex <span class="token operator">=</span> <span class="token string">&quot;${requestScope.user.sex}&quot;</span><span class="token punctuation">;</span>                  \n<span class="token keyword">var</span> choice_sex <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.div_sex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> choice_sex<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">if</span> <span class="token punctuation">(</span>sex <span class="token operator">==</span> choice_sex<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>         \n        choice_sex<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked<span class="token operator">=</span><span class="token string">&quot;checked&quot;</span><span class="token punctuation">;</span>      \n    <span class="token punctuation">}</span>                                                  \n<span class="token punctuation">}</span>                                                      \n<span class="token comment">//籍贯的选择                                                </span>\n<span class="token keyword">var</span> select_c <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.select_c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    \n<span class="token keyword">var</span> city <span class="token operator">=</span> <span class="token string">&quot;${user.city}&quot;</span><span class="token punctuation">;</span>                             \n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> select_c<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   \n    <span class="token keyword">if</span> <span class="token punctuation">(</span>city <span class="token operator">==</span> select_c<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          \n        select_c<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>selected<span class="token operator">=</span><span class="token string">&quot;selected&quot;</span><span class="token punctuation">;</span>      \n    <span class="token punctuation">}</span>                                                  \n<span class="token punctuation">}</span>                                                      \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><blockquote><p>因为修改操作，最好使用唯一键进行修改，而修改页面中没有<code>id</code>，所以解决的办法就是，新加一个<code>input</code>并设置为隐藏，用来存储id的信息</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${user.id}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote><h2 id="删除选中" tabindex="-1"><a class="header-anchor" href="#删除选中" aria-hidden="true">#</a> 删除选中</h2>',36),c=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210222214046820.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),l=(0,t.uE)('<blockquote><p>获取选中的id，获取选中的id可以有很多种方式，就比如说，使用JavaScript进行，利用点击事件</p><p><code>比如，爱好复选框进行提交，默认就会把我们选中的提交，所以最简单的方式就是在让form套住复选框</code></p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn btn-primary select_all<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript:void(0);<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>删除选中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form_submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${pageContext.request.contextPath}/deleteSelectServlet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>table table-bordered table-hover<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>success<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>籍贯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>QQ<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>邮箱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>\n\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${users}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">varStatus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>s<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tr<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uid<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${user.id}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>${s.count}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>${user.username}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>${user.sex}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>${user.age}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>${user.city}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>${user.qq}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>${user.email}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>\n                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn btn-default btn-sm<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${pageContext.request.contextPath}/findUserServlet?id=${user.id}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title=" ">&amp;nbsp;</span>\n                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn btn-default btn-sm<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript:deleteUser(${user.id});<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">&gt;</span></span>\n\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>\n\n//js代码\n//删除选中\n    var selAll = document.querySelector(&quot;.select_all&quot;);\n    selAll.onclick = function () {\n        if (confirm(&quot;确定删除选中?&quot;)) {\n        //提交\n            document.querySelector(&quot;.form_submit&quot;).submit();\n        }\n    }\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div></blockquote><p>因为之前就写了一个，根据id进行删除，所以我们可以直接在service层遍历调用dao层的<code>delete()</code>进行删除</p><h2 id="分页查询" tabindex="-1"><a class="header-anchor" href="#分页查询" aria-hidden="true">#</a> 分页查询</h2>',3),u=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210222231155314.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),r=(0,t._)("blockquote",null,[(0,t._)("p",null,"浏览器和服务器的输入和输出问题："),(0,t._)("p",null,"输出指的是：服务器向浏览器输出"),(0,t._)("p",null,"输入是：浏览器向服务器进行输入")],-1),i=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210222231905836.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),k=(0,t._)("blockquote",null,[(0,t._)("p",null,[(0,t._)("code",null,"解决分页查询的主要思想就是先确定浏览器和服务器的输入的输出，需要展示的数据有哪些，如要如何进行这些的数据的封装")])],-1),b=(0,t._)("blockquote",null,[(0,t._)("p",null,"步骤"),(0,t._)("ol",null,[(0,t._)("li",null,[(0,t._)("p",null,[(0,t.Uk)("获取"),(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210223220535989.png?x-oss-process=style/pictureProcess1",data:"aurora"}),(0,t.Uk)("传入的某页的参数，默认每一页的展示的行数不变，")])]),(0,t._)("li",null,[(0,t._)("p",null,[(0,t.Uk)("进行参数的判断，因为传入的参数可能为空，就会使服务器发生"),(0,t._)("code",null,"500"),(0,t.Uk)("所以要进行传入参数的判断")])]),(0,t._)("li",null,[(0,t._)("p",null,[(0,t.Uk)("调用service方法，在这个方法中，需要将在dao层获取的数据存入"),(0,t._)("code",null,"PageBean"),(0,t.Uk)("中，进行对象的封装，前端数据展示需要使用")])]),(0,t._)("li",null,[(0,t._)("p",null,[(0,t.Uk)("获取"),(0,t._)("code",null,"PageBean"),(0,t.Uk)("对象")])]),(0,t._)("li",null,[(0,t._)("p",null,"请求转发，数据存储"),(0,t._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,t._)("pre",{class:"language-java"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"protected"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"void"),(0,t.Uk)(" doPost "),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token class-name"},"HttpServletRequest"),(0,t.Uk)(" request"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token class-name"},"HttpServletResponse"),(0,t.Uk)(" response"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"throws"),(0,t.Uk)(),(0,t._)("span",{class:"token class-name"},"ServletEx"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"//此类用于返回从数据库中查询出的总页面，条目数等                                                                    "),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"//设置编码格式                                                                                     "),(0,t.Uk)("\n    request"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"setCharacterEncoding"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},'"utf-8"'),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("                                                       \n    "),(0,t._)("span",{class:"token comment"},"//获取参数 当前页面 查询的条数                                                                            "),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token class-name"},"String"),(0,t.Uk)(" currentPage "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" request"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"getParameter"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},'"currentPage"'),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("                                    \n    "),(0,t._)("span",{class:"token class-name"},"String"),(0,t.Uk)(" rows "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" request"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"getParameter"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},'"rows"'),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("                                                  \n    "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("currentPage "),(0,t._)("span",{class:"token operator"},"=="),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"null"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"||"),(0,t.Uk)(" currentPage"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"equals"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},'""'),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("                                         \n        currentPage "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},'"1"'),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("                                                                       \n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("                                                                                            \n    "),(0,t._)("span",{class:"token keyword"},"if"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("rows "),(0,t._)("span",{class:"token operator"},"=="),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"null"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"||"),(0,t.Uk)(" rows"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"equals"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},'""'),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("                                                       \n        rows "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token string"},'"5"'),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("                                                                              \n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("                                                                                            \n    "),(0,t._)("span",{class:"token comment"},"//调用service层方法                                                                               "),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token class-name"},"UserService"),(0,t.Uk)(" service "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(),(0,t._)("span",{class:"token keyword"},"new"),(0,t.Uk)(),(0,t._)("span",{class:"token class-name"},"UserServiceImpl"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("                                                 \n    "),(0,t._)("span",{class:"token comment"},"//方法返回的是一个PageBean对象                                                                         "),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token class-name"},"PageBean"),(0,t._)("span",{class:"token generics"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t._)("span",{class:"token class-name"},"User"),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)(" pb "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" service"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"findUserPageBean"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("currentPage"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("rows"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("                              \n    "),(0,t._)("span",{class:"token comment"},"//返回UserList集合                                                                               "),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"//请求转发 并将pb对象存入                                                                              "),(0,t.Uk)("\n    request"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"setAttribute"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},'"pb"'),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("pb"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("                                                               \n    request"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"getRequestDispatcher"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},'"list.jsp"'),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"forward"),(0,t._)("span",{class:"token punctuation"},"("),(0,t.Uk)("request"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("response"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("                    \n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("                                                                                                \n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"7"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"8"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"9"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"10"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"11"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"12"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"13"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"14"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"15"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"16"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"17"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"18"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"19"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"20"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"21"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"22"),(0,t._)("br")])])])])],-1),m=(0,t.uE)('<p><code>service</code>层方法</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">PageBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> findUserPageBean <span class="token punctuation">(</span><span class="token class-name">String</span> _currentPage<span class="token punctuation">,</span> <span class="token class-name">String</span> _rows<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> currentPage <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>_currentPage<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> rows <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>_rows<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//此方法应该将查询到的结果，都存入PageBean对象中</span>\n        <span class="token class-name">PageBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> pb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        pb<span class="token punctuation">.</span><span class="token function">setCurrentPage</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        pb<span class="token punctuation">.</span><span class="token function">setRows</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//获取总的条目数</span>\n        <span class="token keyword">int</span> totalCount <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        pb<span class="token punctuation">.</span><span class="token function">setTotalCount</span><span class="token punctuation">(</span>totalCount<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//获取总的页码数</span>\n        <span class="token keyword">int</span> totalPage <span class="token operator">=</span> <span class="token punctuation">(</span>totalCount <span class="token operator">%</span> rows<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>totalCount <span class="token operator">/</span> rows<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>totalCount <span class="token operator">/</span> rows<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>\n        pb<span class="token punctuation">.</span><span class="token function">setTotalPage</span><span class="token punctuation">(</span>totalPage<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//根据当前页面，查询出User集合</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findUserList</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">,</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        pb<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> pb<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><code>PageBean</code>类中属性字段</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> totalCount<span class="token punctuation">;</span><span class="token comment">//总的条目数</span>\n<span class="token keyword">private</span> <span class="token keyword">int</span> totalPage<span class="token punctuation">;</span><span class="token comment">//总的页码数</span>\n<span class="token keyword">private</span> <span class="token keyword">int</span> currentPage<span class="token punctuation">;</span><span class="token comment">//当前的页码数</span>\n<span class="token keyword">private</span> <span class="token keyword">int</span> rows<span class="token punctuation">;</span><span class="token comment">//每页显示的条数</span>\n<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>dao</code>层查询所有条目返回值</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> findCount <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select count(*) from user&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> template<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token comment">//主要注意template.queryForObject(sql, Integer.class);</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="前台字段的展示" tabindex="-1"><a class="header-anchor" href="#前台字段的展示" aria-hidden="true">#</a> 前台字段的展示</h3><p><code>遍历每一页中的所有数据</code></p><div class="language-jsp ext-jsp line-numbers-mode"><pre class="language-jsp"><code>&lt;c:forEach items=&quot;${requestScope.pb.list}&quot; var=&quot;user&quot; varStatus=&quot;s&quot;&gt;\n            &lt;tr class=&quot;tr&quot;&gt;\n                &lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;uid&quot; value=&quot;${user.id}&quot;&gt;&lt;/td&gt;\n                &lt;td&gt;${s.count}&lt;/td&gt;\n                &lt;td&gt;${user.username}&lt;/td&gt;\n                &lt;td&gt;${user.sex}&lt;/td&gt;\n                &lt;td&gt;${user.age}&lt;/td&gt;\n                &lt;td&gt;${user.city}&lt;/td&gt;\n                &lt;td&gt;${user.qq}&lt;/td&gt;\n                &lt;td&gt;${user.email}&lt;/td&gt;\n                &lt;td&gt;\n                    &lt;a class=&quot;btn btn-default btn-sm&quot; href=&quot;${pageContext.request.contextPath}/findUserServlet?id=${user.id}&quot;&gt;修改&lt;/a&gt;&amp;nbsp;\n                    &lt;a class=&quot;btn btn-default btn-sm&quot; href=&quot;javascript:deleteUser(${user.id});&quot;&gt;删除&lt;/a&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/c:forEach&gt;\n//items=&quot;${requestScope.pb.list}&quot;注意\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><code>根据返回所有页数，进行页数的遍历</code></p><div class="language-jsp ext-jsp line-numbers-mode"><pre class="language-jsp"><code>&lt;c:forEach begin=&quot;1&quot; end=&quot;${pb.totalPage}&quot; var=&quot;i&quot; step=&quot;1&quot; varStatus=&quot;s&quot;&gt;                                                                       \n    &lt;li class=&quot;li_need&quot;&gt;&lt;a href=&quot;${pageContext.request.contextPath}/findUserByPageServlet?currentPage=${i}&amp;rows=5&quot;&gt;${i}&lt;/a&gt;&lt;/li&gt;                 \n    &lt;script&gt;                                                                                                                                     \n        //获取所有的                                                                                                                                  \n        var li_need = document.querySelectorAll(&quot;.li_need&quot;);                                                                                     \n        if (${pb.currentPage} == ${i}) {                                                                                                         \n            li_need[${i}-1].className = &quot;active li_need&quot;;                                                                                        \n        }                                                                                                                                        \n    &lt;/script&gt;                                                                                                                                    \n&lt;/c:forEach&gt;                                                                                    \n//js部分是进行当前页面，按钮为激活状态的设置\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>设置前一页和后一页</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n    <span class="token comment">//前后页的选择</span>\n    <span class="token keyword">var</span> previous <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.previous_page&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> next <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.next_page&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    previous<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> currentPage <span class="token operator">=</span> $<span class="token punctuation">{</span>pb<span class="token punctuation">.</span>currentPage<span class="token punctuation">}</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentPage <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            currentPage <span class="token operator">=</span> $<span class="token punctuation">{</span>pb<span class="token punctuation">.</span>totalPage<span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&quot;${pageContext.request.contextPath}/findUserByPageServlet?currentPage=&quot;</span><span class="token operator">+</span>currentPage<span class="token operator">+</span><span class="token string">&quot;&amp;rows=5&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    next<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> currentPage <span class="token operator">=</span> $<span class="token punctuation">{</span>pb<span class="token punctuation">.</span>currentPage<span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentPage <span class="token operator">&gt;=</span> $<span class="token punctuation">{</span>pb<span class="token punctuation">.</span>totalPage<span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            currentPage <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&quot;${pageContext.request.contextPath}/findUserByPageServlet?currentPage=&quot;</span><span class="token operator">+</span>currentPage<span class="token operator">+</span><span class="token string">&quot;&amp;rows=5&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><blockquote><p>如果当前页数为1，那么继续点前一页，就会到最后一页，最后一页也是同理</p></blockquote><h2 id="复杂条件查询" tabindex="-1"><a class="header-anchor" href="#复杂条件查询" aria-hidden="true">#</a> 复杂条件查询</h2><p>结构图</p>',16),g=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210223222250229.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),d=(0,t.uE)('<blockquote><p><code>对于复杂的条件查询，为了让我们的操作更容易，模糊查询时使用 select * from user where 1=1 and....</code>拼接模糊查询的语句就直接在<code>where后面</code>，使用<code>and</code>进行连接，因为<code>where 1=1</code>并不影响</p></blockquote><p>程序代码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> doPost <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;user...&quot;</span><span class="token operator">+</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;login_user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//此类用于返回从数据库中查询出的总页面，条目数等</span>\n        <span class="token comment">//设置编码格式</span>\n        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//获取参数 当前页面 查询的条数</span>\n        <span class="token class-name">String</span> currentPage <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;currentPage&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> rows <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;rows&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentPage <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> currentPage<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            currentPage <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>rows <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> rows<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            rows <span class="token operator">=</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">//获取模糊查询的参数  获取到的包括了currentPage rows 需要在进行sql拼接时 跳过这两个</span>\n        <span class="token comment">//如果是点击查询进行表单的提交 那么当前页面还有行数的参数不会被提交</span>\n        <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> condition <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//调用service层方法</span>\n        <span class="token class-name">UserService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//方法返回的是一个PageBean对象</span>\n        <span class="token class-name">PageBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> pb <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">findUserPageBean</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">,</span>rows<span class="token punctuation">,</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//返回UserList集合</span>\n        <span class="token comment">//请求转发 并将pb对象存入</span>\n        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;pb&quot;</span><span class="token punctuation">,</span>pb<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;list.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//service层</span>\n<span class="token keyword">public</span> <span class="token class-name">PageBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> findUserPageBean <span class="token punctuation">(</span><span class="token class-name">String</span> _currentPage<span class="token punctuation">,</span> <span class="token class-name">String</span> _rows<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> currentPage <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>_currentPage<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> rows <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>_rows<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//此方法应该将查询到的结果，都存入PageBean对象中</span>\n        <span class="token class-name">PageBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> pb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        pb<span class="token punctuation">.</span><span class="token function">setCurrentPage</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        pb<span class="token punctuation">.</span><span class="token function">setRows</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//获取总的条目数</span>\n        <span class="token keyword">int</span> totalCount <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findCount</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        pb<span class="token punctuation">.</span><span class="token function">setTotalCount</span><span class="token punctuation">(</span>totalCount<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//获取总的页码数</span>\n        <span class="token keyword">int</span> totalPage <span class="token operator">=</span> <span class="token punctuation">(</span>totalCount <span class="token operator">%</span> rows<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>totalCount <span class="token operator">/</span> rows<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>totalCount <span class="token operator">/</span> rows<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>\n        pb<span class="token punctuation">.</span><span class="token function">setTotalPage</span><span class="token punctuation">(</span>totalPage<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//根据当前页面，查询出User集合</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findUserList</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">,</span>rows<span class="token punctuation">,</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        pb<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> pb<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//dao层</span>\n<span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> findCount <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select count(*) from user where 1=1&quot;</span><span class="token punctuation">;</span><span class="token comment">//这是一个拼接的模板</span>\n        <span class="token comment">//只有当condition的size大于0时 才进行遍历</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//进行稽核的遍历</span>\n            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> condition<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">//判断参数是否是currentPage or rows  如果是 进行return;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;currentPage&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&quot;rows&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">continue</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token comment">//每一个key对应多个值 因为Map&lt;String, String[]&gt; value值为数组</span>\n                <span class="token comment">//通过key获取值</span>\n                <span class="token class-name">String</span> value <span class="token operator">=</span> condition<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//但是这里的情况 value就只有一个值 所以可以直接取出</span>\n                <span class="token comment">//进行模糊查询的拼接 不用管传递的是一个空值 因为</span>\n                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; and &quot;</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">&quot; like ? &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token comment">//将value保存至数组中</span>\n                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;%&quot;</span><span class="token operator">+</span>value<span class="token operator">+</span><span class="token string">&quot;%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            sql <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> username <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> city <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> email <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">return</span> template<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span>city<span class="token punctuation">,</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> template<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> findUserList <span class="token punctuation">(</span><span class="token keyword">int</span> start_row<span class="token punctuation">,</span> <span class="token keyword">int</span> rows<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token comment">//只有当condition的size大于3时 才进行遍历</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select * from user where 1=1 &quot;</span><span class="token punctuation">;</span><span class="token comment">//下标从0开始</span>\n            <span class="token comment">//进行稽核的遍历</span>\n            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> condition<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">//判断参数是否是currentPage or rows  如果是 进行return;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;currentPage&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&quot;rows&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">continue</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token comment">//每一个key对应多个值 因为Map&lt;String, String[]&gt; value值为数组</span>\n                <span class="token comment">//通过key获取值</span>\n                <span class="token class-name">String</span> value <span class="token operator">=</span> condition<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//但是这里的情况 value就只有一个值 所以可以直接取出</span>\n                <span class="token comment">//进行模糊查询的拼接 不用管传递的是一个空值 因为</span>\n                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; and &quot;</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">&quot; like ? &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token comment">//将value保存至数组中</span>\n                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;%&quot;</span><span class="token operator">+</span>value<span class="token operator">+</span><span class="token string">&quot;%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; limit ?,?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            sql <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> username <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> city <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">String</span> email <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">return</span> template<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span>city<span class="token punctuation">,</span>email<span class="token punctuation">,</span>start_row<span class="token punctuation">,</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select * from user where 1=1 limit ?, ? &quot;</span><span class="token punctuation">;</span><span class="token comment">//下标从0开始</span>\n        <span class="token keyword">return</span> template<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> start_row<span class="token punctuation">,</span> rows<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br></div></div>',5),q={},v=(0,a(83744).Z)(q,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,e,o,c,l,u,r,i,k,b,m,g,d],64)}]])}}]);