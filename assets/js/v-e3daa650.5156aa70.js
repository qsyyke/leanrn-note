"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6265],{19652:(s,n,e)=>{e.r(n),e.d(n,{data:()=>a});const a={key:"v-e3daa650",path:"/javaweb/jsp&Session.html",title:"jsp和session",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"jsp脚本",slug:"jsp脚本",children:[]},{level:2,title:"内置对象",slug:"内置对象",children:[]},{level:2,title:"out对象",slug:"out对象",children:[]},{level:2,title:"新颖写法",slug:"新颖写法",children:[{level:3,title:"改造cookie案例",slug:"改造cookie案例",children:[]}]},{level:2,title:"获取session对象",slug:"获取session对象",children:[]},{level:2,title:"问一",slug:"问一",children:[]},{level:2,title:"问二",slug:"问二",children:[]},{level:2,title:"问三",slug:"问三",children:[]},{level:2,title:"session特点",slug:"session特点",children:[]},{level:2,title:"指令",slug:"指令",children:[{level:3,title:"指令分类",slug:"指令分类",children:[]}]},{level:2,title:"注释",slug:"注释",children:[]},{level:2,title:"内置对象",slug:"内置对象-1",children:[]},{level:2,title:"有点和缺点",slug:"有点和缺点",children:[]},{level:2,title:"使用",slug:"使用",children:[]},{level:2,title:"获取值",slug:"获取值",children:[]},{level:2,title:"获取对象，List，Map集合的值",slug:"获取对象-list-map集合的值",children:[{level:3,title:"获取对象",slug:"获取对象",children:[]},{level:3,title:"List",slug:"list",children:[]},{level:3,title:"Map集合",slug:"map集合",children:[]}]},{level:2,title:"El隐式对象",slug:"el隐式对象",children:[]},{level:2,title:"循环遍历",slug:"循环遍历",children:[]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},59626:(s,n,e)=>{e.r(n),e.d(n,{default:()=>d});var a=e(66252);const t=(0,a.uE)('<h1 id="jsp和session" tabindex="-1"><a class="header-anchor" href="#jsp和session" aria-hidden="true">#</a> jsp和session</h1><p>什么是<code>jsp</code>？jsp就是为了简化我们开发时候的代码，如果没有，那么我们就需要使用java代码，将a标签，<code>&lt;html&gt;</code>等等标签，通过调用<code>response.getWriter().write()</code>方法写到页面上，这种非常麻烦，jsp就是为了解决这种情况</p><p><code>jsp</code>就是一个java文件</p><img src="http://ooszy.cco.vin/img/blog-note/image-20210218234614876.png?x-oss-process=style/pictureProcess1" alt="image-20210218234614876" style="zoom:50%;"><p>在控制台打印信息中找到工作空间的路径</p><img src="http://ooszy.cco.vin/img/blog-note/image-20210218234711670.png?x-oss-process=style/pictureProcess1" alt="image-20210218234711670" style="zoom:67%;">',6),p=(0,a._)("p",null,[(0,a._)("img",{src:"http://ooszy.cco.vin/img/blog-note/image-20210218234837763.png?x-oss-process=style/pictureProcess1",alt:"image-20210218234837763",style:{zoom:"50%"}}),(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210218234913574.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),l=(0,a._)("p",null,[(0,a._)("img",{src:"http://ooszy.cco.vin/img/blog-note/image-20210218234837763.png?x-oss-process=style/pictureProcess1",alt:"image-20210218234837763",style:{zoom:"50%"}}),(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210218234913574.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),o=(0,a.uE)('<p>就可以看到这个<code>jsp</code>文件被解析成了java文件，所以<code>jsp就是一个java文件</code>，并且它是一个<code>servlet</code>文件，里面的<code>public void _jspService()</code>方法相当于<code>service()</code>方法</p><h2 id="jsp脚本" tabindex="-1"><a class="header-anchor" href="#jsp脚本" aria-hidden="true">#</a> jsp脚本</h2><p>一共有三种方式写</p><blockquote><p><code>&lt;% 代码 %&gt;</code>：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。</p></blockquote><blockquote><p><code>&lt;%! 代码 %&gt;</code>：定义的java代码，在jsp转换后的java类的成员位置。</p></blockquote><blockquote><p><code>&lt;%= 代码 %&gt;</code>：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。</p><p>不同定义<code>System.out.println()</code>，因为这个是输出语句中定义的，我们不能在输出语句中有定义输出语句，不能使用分好<code>;</code>写其他的，这个并不是写语句，只能用加号</p></blockquote><p><code>&lt;%= request.getCookies()+&quot;hello&quot; %&gt;</code>内部是<code>out.print( request.getCookies()+&quot;hello&quot; );</code></p><p>还可以这样玩<code>&lt;input value=&lt;%= System.currentTimeMillis() %&gt;/&gt;</code></p><p>为什么在jsp中定义的JavaScript不起作用？</p><blockquote><p>因为根本就没有发送请求</p></blockquote><p>尽管注释了，但是如果注释中有jsp语法，那么也会对这个进行编译，因为在源文件中进行注释，再次访问，是会发送请求</p>',11),c=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210219093400030.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),i=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210219093416170.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),r=(0,a.uE)('<h2 id="内置对象" tabindex="-1"><a class="header-anchor" href="#内置对象" aria-hidden="true">#</a> 内置对象</h2><p>像JavaScript中的<code>Date()</code>等等对象一样，并不是我们自己定义的，开发人员已经在内部就给我们定义好了，我们直接拿来使用就行，在jsp中也是一样，一共有<code>9</code>个内置的对象，像<code>request,respone,out</code>都是内置对象，因为他们在页面中就有声明，<code>request,respone</code>在方法中已经声明，<code>javax.servlet.jsp.JspWriter out = null;</code>out对象也已经声明了，所以我们可以直接使用</p><h2 id="out对象" tabindex="-1"><a class="header-anchor" href="#out对象" aria-hidden="true">#</a> out对象</h2><p><code>out.write()</code>对象和<code>respone.getWriter().write()</code>方法差不多，但是他们直接也还是有区别，</p><blockquote><p>在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。 response.getWriter()数据输出永远在out.write()之前</p></blockquote><h2 id="新颖写法" tabindex="-1"><a class="header-anchor" href="#新颖写法" aria-hidden="true">#</a> 新颖写法</h2><h3 id="改造cookie案例" tabindex="-1"><a class="header-anchor" href="#改造cookie案例" aria-hidden="true">#</a> 改造cookie案例</h3><p>当粘贴代码在<code>&lt;%%&gt;</code>中时，其会进行自动导包</p><img src="http://ooszy.cco.vin/img/blog-note/image-20210219100406167.png?x-oss-process=style/pictureProcess1" alt="image-20210219100406167" style="zoom:67%;"><div class="language-jsp ext-jsp line-numbers-mode"><pre class="language-jsp"><code>&lt;%@ page import=&quot;java.net.URLDecoder&quot; %&gt;\n&lt;%@ page import=&quot;java.text.SimpleDateFormat&quot; %&gt;\n&lt;%@ page import=&quot;java.util.Date&quot; %&gt;\n&lt;%@ page import=&quot;java.net.URLEncoder&quot; %&gt;\n&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;%\n    response.setContentType(&quot;text/html;charset=utf-8&quot;);\n    //记录上次打开浏览器的时间 cookie名字为lastTime\n    Cookie[] cookies = request.getCookies();\n    //1.判断是否有cookie\n    //2.存在cookie，获取cookie 打印上次访问时间\n    //3.不存在cookie 则发送cookie，并写出欢迎词，发送cookie\n    if (cookies != null) {\n        //存在cookie 遍历cookie\n        for (Cookie cookie : cookies) {\n            //获取名字\n            String name = cookie.getName();\n            //判断名字中是否存在cookie名字\n            if (name.contains(&quot;lastTime&quot;)) {\n                //cookie中包含名字\n                //获取值\n                String value = cookie.getValue();\n                //解码\n                value = URLDecoder.decode(value,&quot;utf-8&quot;);\n%&gt;\n&lt;h1&gt;&lt;%= &quot;你上次访问时间为&quot;+value %&gt;&lt;/h1&gt;\n&lt;%--&lt;% Thread.sleep(10000); %&gt;\n&lt;script&gt;\n    alert(&quot;欢迎你&quot;)\n&lt;/script&gt;--%&gt;\n&lt;%\n                //设置新的cookie时间\n                //时间格式\n                SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);\n                String format = sdf.format(new Date());\n                //编码\n                format = URLEncoder.encode(format,&quot;utf-8&quot;);\n                cookie.setValue(format);\n                cookie.setMaxAge(60 * 60 * 24 * 30);//一个月\n                response.addCookie(cookie);\n                return;\n            }\n        }\n%&gt;\n&lt;%\n    }\n    if (cookies == null) {\n        //不存在cookie  新建cookie 发送\n        Date date = new Date();\n        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);\n        String format = sdf.format(date);\n        //编码\n        format = URLEncoder.encode(format, &quot;utf-8&quot;);\n\n        Cookie cookie = new Cookie(&quot;lastTime&quot;, format);\n        //设置cookie的存活时间\n        cookie.setMaxAge(60 * 60 * 24 * 30);//一个月\n        response.addCookie(cookie);\n        %&gt;\n&lt;h1&gt;欢迎你首次访问&lt;/h1&gt;\n&lt;%\n    }\n%&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br></div></div><p><code>输出欢迎词我们可以使用&lt;h1&gt;等等标签进行截断，因为在方法中是从上往下执行的，也就相当于从上往下进行解析</code></p><h1 id="session" tabindex="-1"><a class="header-anchor" href="#session" aria-hidden="true">#</a> Session</h1><p>是服务器端的会话技术，会将数据保存至服务器，使用根<code>cookie</code>一样</p><p><code>能够共享数据，所以可以叫做域对象</code></p><h2 id="获取session对象" tabindex="-1"><a class="header-anchor" href="#获取session对象" aria-hidden="true">#</a> 获取session对象</h2><p>因为session是和cookie一起使用的，需要使用<code>request</code>进行获取</p><p><code>Session</code>是一个接口，不能使用这个类new对象</p><p><code>HttpSession session = request.getSession();</code>返回的是一个<code>HttpSession</code>对象</p><blockquote><p><code>原理</code>：</p><p>如果没有cookie，也就是第一次请求的时候，通过<code>request</code>获取session，因为没有cookie，所以服务器会自动创建一个<code>session</code>，并为这个session设置一个唯一id，并且在相应头中添加一个<code>Set-Cookie: JSESSIONID=5801991ED53032A55BA35ED3A56B4CC0;</code>，<code>5801991ED53032A55BA35ED3A56B4CC0</code>就是服务器设置的一个唯一id，浏览器再次请求时，会把这个<code>JSESSIONID=.....</code>添加到请求头中，一起发送给服务器，服务器接收到请求，通过<code>request.getSession()</code>获取session，会拿到这个session对象，会通过id在服务器中查找，是否有这一个id，因为第一次请求的时候，服务器就创建了这个id的session，并且保存在了服务器端，所以他可以找到，也就是通过这个id确定一个请求中的session对象是否是同一个，这就是为什么，第一次通过<code>session.getId()</code>可以得到数据</p></blockquote><h2 id="问一" tabindex="-1"><a class="header-anchor" href="#问一" aria-hidden="true">#</a> 问一</h2><blockquote><p>关闭客户端，服务器不关闭，两次获取的session是否是同一个？</p><p>不是，因为session和cookie一样，代表的是<code>一次会话</code>之间的数据共享，如果客户端关闭，那么也就代表一次会话结束，再次打开时，就会重新发送请求，重新获取<code>session</code>，他们的id是不同的</p></blockquote><p>但是可以通过方法设置，从而达到持久化保存</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//获取session对象                                                          </span>\n<span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            \n<span class="token class-name">String</span> id <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//250B456186329D52E73E97CCFB7F9B68         </span>\n<span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;JSESSIONID&quot;</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                           \n<span class="token comment">//设置存活时间                                                               </span>\ncookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                               \nresponse<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="问二" tabindex="-1"><a class="header-anchor" href="#问二" aria-hidden="true">#</a> 问二</h2><blockquote><p>客户端不关闭，服务器关闭，两次获取的session是否是同一个？</p><p>不是同一个，但是在客户端关闭之前，我们可以将这个session对象进行<code>序列化</code>操作保存在服务器端，下次服务器启动时，我们可以使用<code>反序列化</code>将保存的这个session对象取出，这样就可以保证对象中的数据不丢失</p></blockquote><p><code>序列化和反序列化Tomcat已经为我们做了，我们不需要自己序列化和反序列化</code>，但是idea并没有这样，idea有序列化的过程，当服务器正常关闭的时候，idea会在Word目录中生成一个文件保存session对象，但是当下一次服务器启动的时候，idea会把这个work目录删除，重新创建一个新的work目录，里面保存的session对象文件也不在了</p><blockquote><p><code>session的钝化</code>:在服务器正常关闭之前，将session对象系列化到硬盘上 <code>session的活化</code>:在服务器启动后，将session文件转化为内存中的session对象即可。</p></blockquote><h2 id="问三" tabindex="-1"><a class="header-anchor" href="#问三" aria-hidden="true">#</a> 问三</h2><blockquote><p>session什么时候被销毁？</p><ol><li><p>服务器关闭的时候</p></li><li><p>session对象调用<code>invalidate()</code>方法</p></li><li><p>session默认的失效时间是30分钟，可以在<code>web.xml</code>文件中进行配置失效时间</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">&gt;</span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>失效时间就是，比如一个用户登录，如果30分钟没有操作，那么就提示退出，并让其再次登录，我们应该避免这种事情的发生</p></li></ol></blockquote><h2 id="session特点" tabindex="-1"><a class="header-anchor" href="#session特点" aria-hidden="true">#</a> session特点</h2><p>session不像cookie那样，对数据的个数和大小有限制，可以随便存储任何长度的数据</p><p>session存储数据是安全的，因为是存储在服务器中</p><p>session存储在服务器端，cookie存储在浏览器端</p><h1 id="jsp" tabindex="-1"><a class="header-anchor" href="#jsp" aria-hidden="true">#</a> jsp</h1><h2 id="指令" tabindex="-1"><a class="header-anchor" href="#指令" aria-hidden="true">#</a> 指令</h2><blockquote><p>作用：用于配置jsp页面，导入资源</p></blockquote><p><code>格式</code>:&lt;% @指令名称 属性名=属性值，属性名=属性值.... %&gt; <code>@和指令名称之间需要空格</code></p><h3 id="指令分类" tabindex="-1"><a class="header-anchor" href="#指令分类" aria-hidden="true">#</a> <code>指令分类</code></h3><h4 id="page-配置页面信息" tabindex="-1"><a class="header-anchor" href="#page-配置页面信息" aria-hidden="true">#</a> <code>page</code>:配置页面信息</h4><blockquote><ol><li><p><code>contentType</code>：等同于response.setContentType()</p><p>设置响应体的mime类型以及字符集 设置当前jsp页面的编码</p></li><li><p><code>import</code>：导包</p><p><code>&lt;%@ page import=&quot;java.util.Date&quot; %&gt;</code>现在就将<code>Date</code>类导入了进去，最好导一个，单独使用一行进行一个类的导入</p></li><li><p><code>errorPage</code>：当前页面发生异常后，会自动跳转到指定的错误页面</p><div class="language-jsp ext-jsp line-numbers-mode"><pre class="language-jsp"><code>&lt;%@ page errorPage=&quot;../index.jsp&quot; %&gt;\n&lt;% System.out.println(3/0); %&gt;\n这里3/0会发生一个异常，就会自动进入index.jsp页面，不会在页面上打印错误信息\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><code>isErrorPage</code>：标识当前也是是否是错误页面。</p><ol><li>true：是，可以使用内置对象exception</li><li>false：否。默认值。不可以使用内置对象exception</li></ol></li></ol></blockquote><h4 id="include" tabindex="-1"><a class="header-anchor" href="#include" aria-hidden="true">#</a> <code>include</code></h4><p><code>include</code>:页面包含的。导入页面的资源文件</p><p><code>&lt;%@include file=&quot;top.jsp&quot;%&gt;</code></p><p>这个指令只有一个属性值，就是<code>file</code></p><p>因为存在很多的页面，其表头，或者是logo都是相同的，我们可以使用这个指令进行这些页面的引入</p><h4 id="taglib" tabindex="-1"><a class="header-anchor" href="#taglib" aria-hidden="true">#</a> <code>taglib</code></h4><p><code>taglib</code>:导入资源</p><p>比如我们经常使用的<code>jstl</code>标签，就需要使用这个指令进行标签的引入，然后我们才能使用<code>jstl</code>标签</p><blockquote><p>使用<code>jstl</code>标签步骤</p><ol><li><p>导入<code>jstl</code>jar包</p><img src="http://ooszy.cco.vin/img/blog-note/image-20210220201450627.png?x-oss-process=style/pictureProcess1" alt="image-20210220201450627" style="zoom:67%;"></li><li><p>定义<code>taglib</code>指令</p><div class="language-jsp ext-jsp line-numbers-mode"><pre class="language-jsp"><code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>prefix</code>值我们可以随意定义，比如可以定义为<code>hello</code>,使用的时候直接<code>&lt;hello:&gt;</code>因为他们都是标签，就像div标签一样使用，但是需要加上<code>冒号:</code></p></li></ol></blockquote><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h2><blockquote><p>html注释： <code>&lt;!-- --&gt;</code>:只能注释html代码片段 jsp注释：推荐使用 <code>&lt;%-- --%&gt;</code>：可以注释所有</p></blockquote><h2 id="内置对象-1" tabindex="-1"><a class="header-anchor" href="#内置对象-1" aria-hidden="true">#</a> 内置对象</h2><p>jsp中已经内置了9个内置对象，因为每一个jsp都是一个java程序，在每一个jsp文件中，都定义了9个变量，也就是这9个对象，我们可以直接使用</p><table><thead><tr><th>变量名</th><th>真实类型</th><th>作用</th></tr></thead><tbody><tr><td>pageContext</td><td>PageContext</td><td>当前页面共享数据，还可以获取其他八个内置对象</td></tr><tr><td>request</td><td>HttpServletRequest</td><td>一次请求访问的多个资源(转发)</td></tr><tr><td>session</td><td>HttpSession</td><td>一次会话的多个请求间</td></tr><tr><td>application</td><td>ServletContext</td><td>所有用户间共享数据</td></tr><tr><td>response</td><td>HttpServletResponse</td><td>响应对象</td></tr><tr><td>page</td><td>Object</td><td>当前页面(Servlet)的对象 this</td></tr><tr><td>out</td><td>JspWriter</td><td>输出对象，数据输出到页面上</td></tr><tr><td>config</td><td>ServletConfig</td><td>Servlet的配置对象</td></tr><tr><td>exception</td><td>Throwable</td><td>异常对象</td></tr></tbody></table><h1 id="mvc" tabindex="-1"><a class="header-anchor" href="#mvc" aria-hidden="true">#</a> MVC</h1><p><code>MVC</code>是一种开发模式，不算设计模式，设计模式是解决一些开发中的小细节</p><ul><li>M：Model，模型。JavaBean <ul><li>完成具体的业务操作，如：查询数据库，封装对象</li></ul></li><li>V：View，视图。JSP <ul><li>展示数据</li></ul></li><li>C：Controller，控制器。Servlet <ul><li>获取用户的输入</li><li>调用模型</li><li>将数据交给视图进行展示</li></ul></li></ul><img src="http://ooszy.cco.vin/img/blog-note/image-20210220204550240.png?x-oss-process=style/pictureProcess1" alt="image-20210220204550240" style="zoom:67%;"><h2 id="有点和缺点" tabindex="-1"><a class="header-anchor" href="#有点和缺点" aria-hidden="true">#</a> 有点和缺点</h2><ul><li><p>优点：</p><ul><li><p>耦合性低，方便维护，可以利于分工协作</p></li><li><p>重用性高</p></li></ul></li><li><p>缺点：</p><ul><li>使得项目架构变得复杂，对开发人员要求高</li></ul></li></ul><h1 id="el表达式" tabindex="-1"><a class="header-anchor" href="#el表达式" aria-hidden="true">#</a> EL表达式</h1><p>什么是<code>EL</code>表达式：Expression Language 表达式语言，这是一种语言</p><p>使用这个，可以替换和简化jsp开发步骤</p><p>语法<code>${表达式}</code></p><p><code>jsp中默认是支持EL表达式的，如果想要禁止EL表达式，可以在page指令中进行设置</code></p><div class="language-jsp ext-jsp line-numbers-mode"><pre class="language-jsp"><code>&lt;%@ page isELIgnored=&quot;true&quot; %&gt;  \ntrue为忽视\nfalse为不忽视，也是默认的值\n如果这样设置，是忽略当前页面中的所有的EL表达式\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>忽略单独一个EL表达式</code></p><div class="language-jsp ext-jsp line-numbers-mode"><pre class="language-jsp"><code>\\${表达式} ：忽略当前这个el表达式\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><ul><li><p>作为运算符</p><blockquote><ul><li><p>算数运算符： + - * /(div) %(mod) 返回数字</p></li><li><p>比较运算符： &gt; &lt; &gt;= &lt;= == != 返回Boolean</p></li><li><p>逻辑运算符： &amp;&amp;(and) ||(or) !(not)</p></li><li><p>空运算符： empty 返回Boolean</p><ul><li><p>功能：用于判断字符串、集合、数组对象是否为null或者长度是否为0</p><ul><li><p>${empty list}:判断字符串、集合、数组对象是否为null或者长度为0</p></li><li><p>${not empty str}:表示判断字符串、集合、数组对象是否不为null 并且 长度&gt;0</p></li></ul></li></ul></li></ul></blockquote></li><li><p>使用</p><div class="language-jsp ext-jsp line-numbers-mode"><pre class="language-jsp"><code>&lt;h1&gt;算数运算符\\${4+5}${4+5}&lt;/h1&gt;\n&lt;h1&gt;算数运算符\\${4*5}${4*5}&lt;/h1&gt;\n&lt;h1&gt;比较运算符\\${4&gt;5}${4&gt;5}&lt;/h1&gt;\n&lt;h1&gt;比较运算符\\${4!=5}${4!=5}&lt;/h1&gt;\n&lt;h1&gt;逻辑运算符\\${!false}${!false}&lt;/h1&gt;\n&lt;h1&gt;逻辑运算符\\${notfalse}${not false}&lt;/h1&gt;\n&lt;h1&gt;空运算符\\${empty &quot;&quot;}${empty &quot;&quot;}&lt;/h1&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><p>运行结果</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>算数运算符${4+5}9\n算数运算符${4*5}20\n比较运算符${4&gt;5}false\n比较运算符${4!=5}true\n逻辑运算符${!false}true\n逻辑运算符${notfalse}true\n空运算符${empty &quot;&quot;}true\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="获取值" tabindex="-1"><a class="header-anchor" href="#获取值" aria-hidden="true">#</a> 获取值</h2><p><code>EL</code>表达式只能从域对象中获取值</p><p>在jsp中一共有4个域对象，分别是</p><blockquote><p>pageScope --&gt; pageContext requestScope --&gt; request sessionScope --&gt; session applicationScope --&gt; application（ServletContext）</p></blockquote><ol><li><p><code>${域名称.键名}</code>：从指定域中获取指定键的值，域名称也就上上面的4个域对象，因为域对象中我们可以通过<code>request.setAttribute(&quot;msg&quot;,&quot;hello&quot;);</code>等对象设置值，就可以通过<code>键名</code>获取保存在域对象中的值，键名就是<code>msg</code>（对于<code>request.setAttribute(&quot;msg&quot;,&quot;hello&quot;);</code>）</p><div class="language-jsp ext-jsp line-numbers-mode"><pre class="language-jsp"><code>&lt;% request.setAttribute(&quot;msg&quot;,&quot;hello&quot;); %&gt;\n&lt;h2&gt;通过键名获取值&lt;/h2&gt;\n&lt;h2&gt;${requestScope.msg}&lt;/h2&gt;\n返回hello\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p><code>${键名}</code>：表示依次从最小的域中查找是否有该键对应的值，直到找到为止</p></li><li><p>域对象范围从小到大的排序为:</p><blockquote><p>pageScope &lt; requestScope &lt; SessionScope &lt; applicationScope</p></blockquote><p>例如</p><div class="language-jsp ext-jsp line-numbers-mode"><pre class="language-jsp"><code>&lt;%\n    request.setAttribute(&quot;msg&quot;,&quot;hello_re&quot;);\n    pageContext.setAttribute(&quot;msg&quot;,&quot;hello_pa&quot;);\n%&gt;\n&lt;h2&gt;通过键名获取值&lt;/h2&gt;\n&lt;h2&gt;${msg}&lt;/h2&gt;\n\n返回结果为: hello_pa\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>${msg}</code>因为没有指明是哪个域对象中的<code>msg</code>键名，所以程序会从最小的开始查找那个域对象中是否有一个键名为<code>msg</code>，所以最开始从<code>pageScope</code>对象中查找，如果这个对象中没有保存键名为<code>msg</code>的数据，那么会接着从<code>request</code>中查找，如果到最后<code>applicationScope</code>中也没有找到，那么会返回<code>空字符串，并不是null</code></p></li></ol><h2 id="获取对象-list-map集合的值" tabindex="-1"><a class="header-anchor" href="#获取对象-list-map集合的值" aria-hidden="true">#</a> 获取对象，List，Map集合的值</h2><h3 id="获取对象" tabindex="-1"><a class="header-anchor" href="#获取对象" aria-hidden="true">#</a> 获取对象</h3><p>因为EL表达式获取值只能从域对象中获取，所以想要获取某个对象的值，必须先将对象存入域对象中，然后再通过EL进行获取</p><div class="language-jsp ext-jsp line-numbers-mode"><pre class="language-jsp"><code>&lt;%\nsession.setAttribute(&quot;time&quot;,new Date());\n%&gt;\n${sessionScope.time.month}\n返回1，因为英文中是从0月开始\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>其实，EL表达式获取对象的值是通过对象的set或者get方法进行的</code></p><h4 id="对象的属性" tabindex="-1"><a class="header-anchor" href="#对象的属性" aria-hidden="true">#</a> 对象的属性</h4><p>这里说的对象的属性和类中的属性定义其实不太一样</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>chu<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">char</span> sex<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> getName <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> setName <span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> getAge <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> setAge <span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">char</span> getSex <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> setSex <span class="token punctuation">(</span><span class="token keyword">char</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> toString <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;User{&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span> <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">&quot;, sex=&quot;</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>这个User类中的<code>name,sex,age</code>都是类中的属性</p><p>这里说的属性是，所有的<code>get...()或者set...()</code>方法去掉<code>get,set</code>得到的字段，并将这个字段的首字母小写后得到的字段，因为规范化命名的话，我们在类中定义的属性都是小写，去掉get，set后的属性名一般就是类中定义的属性</p><p>比如下面这个</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> name<span class="token punctuation">;</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">//去掉get，并设置首字母为小写后的属性就是name</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>但是有的时候，我们去掉get或者set，首字母小写之后，这个属性在类中并没有定义，这种情况我们也是会遇到</p><p>比如我们需要使用El表达式返回时间自定义的字符串格式，就可以通过下面这种形式</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//在User对类中定义</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//返回自定义时间格式</span>\n        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy年MM月dd日 HH:MM:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>getDate()</code>的属性为<code>date</code>，很明显，在User类中我们并没有定义这个变量，像这种，只是为了完成某种数据展示的属性，被称作<code>逻辑视图</code></p><p>现在在jsp中就可以通过user对象打印时间字符串了</p><div class="language-jsp ext-jsp line-numbers-mode"><pre class="language-jsp"><code>${sessionScope.user.date}\n返回结果\n2021年02月20日 22:02:33\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果直接<code>${sessionScope.user}</code>，那么就相当于执行<code>System.out.println(user)</code>的结果一样，调用<code>toString()</code>方法</p><h3 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List</h3><p>获取list数组结合中的值</p><blockquote><p>格式:<code>${域对象.键名[下标]}</code></p></blockquote><div class="language-jsp ext-jsp line-numbers-mode"><pre class="language-jsp"><code>&lt;%\n    List list = new ArrayList();\n    list.add(234);\n    list.add(&quot;Sdf&quot;);\n    list.add(34);\n    request.setAttribute(&quot;list&quot;,list);\n%&gt;\n&lt;h3&gt;获取list集合中的值&lt;/h3&gt;\n${requestScope.list[2]}\n//返回34\n相当于调用了list.get(2);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>操作数组的时候，操作失误可能会出现下标越界的情况，那么使用El执行下标越界操作会怎么样？</p><blockquote><p><code>El</code>已经解决数组下标越界的情况，如果真的发生了下标越界，那么会自动返回一个<code>空字符串</code>，并不会打印错误信息在页面上</p></blockquote><h3 id="map集合" tabindex="-1"><a class="header-anchor" href="#map集合" aria-hidden="true">#</a> Map集合</h3><p>使用El获取Map集合中的值操作</p><blockquote><p>语法/格式:</p><p><code>${域名称.键名.key名称}</code><code>${域名称.键名[&quot;key名称&quot;]}</code></p></blockquote><div class="language-jsp ext-jsp line-numbers-mode"><pre class="language-jsp"><code>&lt;%\n    Map map = new HashMap();\n    map.put(&quot;name&quot;,&quot;chuchen&quot;);\n    map.put(&quot;age&quot;,33);\n    map.put(&quot;sex&quot;,&quot;男&quot;);\n    session.setAttribute(&quot;map&quot;,map);\n%&gt;\n\n${sessionScope.map.name}\n&lt;br&gt;\n${sessionScope.map}\n返回结果\nchuchen\n{sex=男, name=chuchen, age=33}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="el隐式对象" tabindex="-1"><a class="header-anchor" href="#el隐式对象" aria-hidden="true">#</a> El隐式对象</h2><p>EL表达式一共有11个隐式对象，这11个对象都已经定义好的，我们可以直接拿来使用</p><blockquote><p>pageScope --&gt; pageContext requestScope --&gt; request sessionScope --&gt; session applicationScope --&gt; application（ServletContext）</p><p>这四个，就是隐式对象</p></blockquote><p><code>pageContext</code>：</p><pre><code>\t\t* 获取jsp其他八个内置对象\n\t\t\t* ${pageContext.request.contextPath}：动态获取虚拟目录\n</code></pre><p>虚拟目录在我们开发过程中有时候会经常使用，动态的获取虚目录便于我们日常的维护，在登录界面上的请求路径，就可以通过<code>{pageContext.request.contextPath}</code>动态的获取虚拟目录</p><h1 id="jstl" tabindex="-1"><a class="header-anchor" href="#jstl" aria-hidden="true">#</a> JSTL</h1><ul><li>概念：JavaServer Pages Tag Library JSP标准标签库 是由Apache组织提供的开源的免费的jsp标签 &lt;标签&gt;</li><li>作用： 用于简化和替换jsp页面上的java代码</li></ul><ol><li><p>if:相当于java代码的if语句 1. 属性： * test 必须属性，接受boolean表达式 * 如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容 * 一般情况下，test属性值会结合el表达式一起使用 2. 注意： * c:if标签没有else情况，想要else情况，则可以在定义一个c:if标签 2. choose:相当于java代码的switch语句 1. 使用choose标签声明 相当于switch声明 2. 使用when标签做判断 相当于case 3. 使用otherwise标签做其他情况的声明 相当于default</p><pre><code> 3. foreach:相当于java代码的for语句\n</code></pre></li></ol><p>、</p><h2 id="循环遍历" tabindex="-1"><a class="header-anchor" href="#循环遍历" aria-hidden="true">#</a> 循环遍历</h2><p><code>int i=1;i&lt;10;i++{}结构</code></p><blockquote><p>步骤：</p><ol><li><p>导入标签库，并定义使用的标签名称</p></li><li><p>使用标签</p><div class="language-jsp ext-jsp line-numbers-mode"><pre class="language-jsp"><code>&lt;%\nbyte[] bytes = {1,3,5,4,8,4};\n%&gt;\n&lt;c:forEach begin=&quot;1&quot; end=&quot;10&quot; var=&quot;i&quot; step=&quot;1&quot;&gt;\n    ${i}\n&lt;/c:forEach&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>begin 相当于i=1</p><p>end 相当于i&lt;10</p><p>var 相当于 int i</p><p>strp 相当于i++</p><p><code>begin and end都是[]</code></p></li></ol></blockquote><p>foreach结构</p><h1 id="三层架构-软件设计架构" tabindex="-1"><a class="header-anchor" href="#三层架构-软件设计架构" aria-hidden="true">#</a> 三层架构：软件设计架构</h1><ol><li><p>界面层(表示层)：用户看的得界面。用户可以通过界面上的组件和服务器进行交互</p></li><li><p>业务逻辑层：处理业务逻辑的。</p></li><li><p>数据访问层：操作数据存储文件。</p></li></ol><img src="http://ooszy.cco.vin/img/blog-note/image-20210220223909173.png?x-oss-process=style/pictureProcess1" alt="image-20210220223909173" style="zoom:50%;">',123),u={},d=(0,e(83744).Z)(u,[["render",function(s,n){return(0,a.wg)(),(0,a.iD)(a.HY,null,[t,p,l,o,c,i,r],64)}]])}}]);