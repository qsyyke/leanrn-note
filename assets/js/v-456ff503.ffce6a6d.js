"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4038],{55861:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-456ff503",path:"/javaweb/ajax.html",title:"ajax介绍",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"代码编写",slug:"代码编写",children:[]},{level:2,title:"同步请求缺点演示",slug:"同步请求缺点演示",children:[]},{level:2,title:"事件onreadystatechange()",slug:"事件onreadystatechange",children:[]},{level:2,title:"返回响应体",slug:"返回响应体",children:[{level:3,title:"js获取响应体",slug:"js获取响应体",children:[]},{level:3,title:"服务器端注意点",slug:"服务器端注意点",children:[]}]},{level:2,title:"jQuery",slug:"jquery",children:[{level:3,title:"jQuery.get(url, [data], [callback], [type])",slug:"jquery-get-url-data-callback-type",children:[]},{level:3,title:"jQuery.post(url, [data], [callback], [type])、",slug:"jquery-post-url-data-callback-type-、",children:[]}]}],git:{updatedTime:1654857597e3,contributors:[{name:"qsyyke",email:"2291308094@qq.com",commits:1}]}}},16546:(n,s,a)=>{a.r(s),a.d(s,{default:()=>g});var p=a(66252);const t=(0,p._)("h1",{id:"ajax介绍",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#ajax介绍","aria-hidden":"true"},"#"),(0,p.Uk)(" ajax介绍")],-1),e=(0,p._)("p",null,[(0,p.Uk)("什么是"),(0,p._)("code",null,"AJAX"),(0,p.Uk)("?")],-1),o=(0,p._)("p",null,[(0,p._)("code",null,"Asynchronous Javascript And XML"),(0,p.Uk)("（异步 JavaScript 和 XML）")],-1),c=(0,p._)("p",null,"同步请求和异步请求的区别",-1),l=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210303131826786.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),u=(0,p._)("p",null,[(0,p._)("code",null,"通过方式"),(0,p.Uk)(":")],-1),r=(0,p._)("p",null,[(0,p.Uk)("如果是同步请求的话，如果页面中的某个连接或者某一部分需要和服务器进行交互，那么在和服务器进行交互的这段时间之内，整个页面必须处于等待状态，只有这个请求完成之后，才能进行其他的请求，而且，如果是同步的方式的话，某一部分发送请求，整个页面的请求都会发送，就是刷新网页，"),(0,p._)("code",null,"同步方式发送请求非常的占用资源")],-1),i=(0,p._)("p",null,[(0,p._)("code",null,"异步方式"),(0,p.Uk)(":")],-1),k=(0,p._)("p",null,"异步方式就不需要像同步方式那样，如果我们点击输入搜索框，那么单独的这一部分就只会发送这部分的请求，在控制台就能够清晰的看到发送了一个请求(点击一下)",-1),d=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://picture.xcye.xyz/image-20210303132736544.png?x-oss-process=style/pictureProcess1",data:"aurora"})],-1),b=(0,p.uE)('<blockquote><p>客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。 客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。</p></blockquote><p><code>Ajax</code>是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术 通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。 传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。</p><h1 id="原生方式使用ajax发送请求" tabindex="-1"><a class="header-anchor" href="#原生方式使用ajax发送请求" aria-hidden="true">#</a> 原生方式使用ajax发送请求</h1><h2 id="代码编写" tabindex="-1"><a class="header-anchor" href="#代码编写" aria-hidden="true">#</a> 代码编写</h2><ol><li><p>创建核心对象</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> xhttp<span class="token punctuation">;</span>                                          \n<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        \n    xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   \n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                            \n    <span class="token comment">// code for IE6, IE5                            </span>\n    xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">&quot;Microsoft.XMLHTTP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>                                                   \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>建立连接</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>xhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;ajaxServlet&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>第一个参数：请求方式，如果是post请求，那么请求的数据可以放在<code>send()</code>方法中</p><p>第二个参数：请求的路径</p><p>第三个参数：true代表进行异步请求，反之</p></blockquote></li><li><p>发送请求</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>xhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;username=1232434&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol><p>在发送请求之前，可以使用<code>xhttp.setRequestHeader(&quot;&quot;,&quot;&quot;);</code>方法设置请求头信息</p><h2 id="同步请求缺点演示" tabindex="-1"><a class="header-anchor" href="#同步请求缺点演示" aria-hidden="true">#</a> 同步请求缺点演示</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>                                \n    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            \n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   \n    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             \n<span class="token punctuation">}</span>                 \n<span class="token comment">//HTML代码</span>\n<span class="token generics"><span class="token punctuation">&lt;</span>button<span class="token punctuation">&gt;</span></span>发送请求<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n<span class="token generics"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span>\n<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在浏览器发送请求的时候，服务器进行休眠7秒，那么在服务器休眠7秒的这期间，不能点击<code>input</code>框，只有等服务器响应结束之后，才能点击，但是如果是异步请求的话，就不出现这种问题，尽管服务器处于休眠状态，<code>input</code>框也是可以进行点击</p><h2 id="事件onreadystatechange" tabindex="-1"><a class="header-anchor" href="#事件onreadystatechange" aria-hidden="true">#</a> 事件onreadystatechange()</h2><p>使用ajax向服务器发送请求，会经历<code>5个阶段</code>，可以使用<code>xhttp.readyState</code>获取这几个状态</p><blockquote><p>保存了 XMLHttpRequest 的状态。</p><ul><li>0: 请求未初始化</li><li>1: 服务器连接已建立</li><li>2: 请求已接收</li><li>3: 正在处理请求</li><li>4: 请求已完成且响应已就绪</li></ul></blockquote><p><code>响应状态码</code>也可以通过<code>status</code>进行获取</p><blockquote><ul><li>200: &quot;OK&quot;</li><li>403: &quot;Forbidden&quot;</li><li>404: &quot;Page not found&quot;</li></ul></blockquote><p><code>onreadystatechange()</code>此事件只要<code>readyState</code>改变，便会被激活，可以使用这个事件巧妙的获取响应体信息</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">loadDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    xhttp<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>\n       <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    xhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ajax_info.txt&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    xhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="返回响应体" tabindex="-1"><a class="header-anchor" href="#返回响应体" aria-hidden="true">#</a> 返回响应体</h2><h3 id="js获取响应体" tabindex="-1"><a class="header-anchor" href="#js获取响应体" aria-hidden="true">#</a> js获取响应体</h3><p>通过<code>xhttp.responseText</code>可以获取响应的文本，<code>responseXML</code>获取 XML 数据形式的响应数据</p><table><thead><tr><th>getResponseHeader()</th><th>从服务器返回特定的头部信息</th></tr></thead><tbody><tr><td>getAllResponseHeaders()</td><td>从服务器返回所有头部信息</td></tr></tbody></table><h3 id="服务器端注意点" tabindex="-1"><a class="header-anchor" href="#服务器端注意点" aria-hidden="true">#</a> 服务器端注意点</h3><p>在服务器端设置响应体信息的时候，</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">&quot;hello world ajax&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         \n<span class="token class-name">ServletOutputStream</span> os <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出流</span>\nos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                       \n                                                      \nresponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;hello brows&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//另一个           </span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果同时使用<code>getOut....()</code>和<code>getWriter()</code>那么就会报错，这两个只能写一个</p><p>并且服务器端使用这两种方式进行响应的时候，浏览器通过</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> text <span class="token operator">=</span> xhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>就可以获取到</p><h2 id="jquery" tabindex="-1"><a class="header-anchor" href="#jquery" aria-hidden="true">#</a> jQuery</h2><p>使用jQuery进行ajax请求，会使代码变得特别简单</p><p>代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//发送请求</span>\n        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&quot;ajaxServlet2&quot;</span><span class="token punctuation">,</span><span class="token comment">//请求路径</span>\n            <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span><span class="token comment">//请求方式 默认get</span>\n            <span class="token comment">// data:&quot;username=chuchen&amp;password=123&amp;blog=vipblogs.cn&quot;,//请求数据</span>\n            <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>\n                <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">&quot;chuchen&quot;</span><span class="token punctuation">,</span>\n                <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">&quot;chu123&quot;</span><span class="token punctuation">,</span>\n                <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">123</span><span class="token punctuation">,</span>\n                <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token boolean">true</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">async</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//异步还是同步</span>\n            <span class="token literal-property property">statusCode</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token number">200</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;状态码200&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;fff&quot;</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token number">2000</span><span class="token comment">//超时时间</span>\n\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>直接调用<code>$.ajax()</code>便可进行</p><p>直接在参数中使用键值对的方式进行写</p><ul><li><code>data</code>键可以有两种方式</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//第一种方式\ndata:&quot;username=chuchen&amp;password=123&amp;blog=vipblogs.cn&quot;\n\n//第二种方式\ndata:{\n    username:&quot;chuchen&quot;,\n    password:&quot;chu123&quot;,\n    age:123,\n    sex:true\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>推荐使用第二种方式</p><p>使用第二种json的方式，在发送的时候，浏览器会将<code>json</code>解析为第一种的方式，再传给服务器</p><ul><li><p>statuCode</p><p>可以对响应的状态码进行判断</p><p>如果是200，可以执行自定义的函数</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>statusCode:{200:function () {\n   alert(&quot;状态码200&quot;);\n}},\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>success</p><p><code>请求成功后的回调函数</code>，请求成功就执行的函数</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>function (data, textStatus) {\n    // data 可能是 xmlDoc, jsonObj, html, text, 等等...\n    this; // 调用本次AJAX请求时传递的options参数\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>error</p><p>如果请求出错，便会执行其函数</p></li></ul><h3 id="jquery-get-url-data-callback-type" tabindex="-1"><a class="header-anchor" href="#jquery-get-url-data-callback-type" aria-hidden="true">#</a> jQuery.get(url, <em>[data]</em>, <em>[callback]</em>, <em>[type]</em>)</h3><blockquote><p><strong>url</strong>:待载入页面的URL地址</p><p><strong>data</strong>:待发送 Key/value 参数。</p><p><strong>callback</strong>:载入成功时回调函数。</p><p><strong>type</strong>:返回内容格式，xml, html, script, json, text, _default。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token comment">//发送请求                      </span>\n    $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;ajaxServlet2&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>      \n        <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">&quot;chu&quot;</span><span class="token punctuation">,</span>         \n        <span class="token literal-property property">pwd</span><span class="token operator">:</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span>              \n        <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">2323</span>                \n    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span>f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       \n        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;request: &quot;</span><span class="token operator">+</span>data<span class="token punctuation">)</span> \n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="jquery-post-url-data-callback-type-、" tabindex="-1"><a class="header-anchor" href="#jquery-post-url-data-callback-type-、" aria-hidden="true">#</a> jQuery.post(url, <em>[data]</em>, <em>[callback]</em>, <em>[type]</em>)、</h3><blockquote><p><strong>url</strong>:发送请求地址。</p><p><strong>data</strong>:待发送 Key/value 参数。</p><p><strong>callback</strong>:发送成功时回调函数。</p><p><strong>type</strong>:返回内容格式，xml, html, script, json, text, _default。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//发送请求</span>\n    $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;ajaxServlet2&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">&quot;chu&quot;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">pwd</span><span class="token operator">:</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">2323</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span>f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;request: &quot;</span><span class="token operator">+</span>data<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h1 id="案例注意" tabindex="-1"><a class="header-anchor" href="#案例注意" aria-hidden="true">#</a> 案例注意</h1><p>如果服务器传回的是一个<code>json</code>，那么必须在响应头中设置格式</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/json;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>否则，浏览器获得的总是字符串格式，只有设置响应头的格式<code>json</code>，浏览器才能拿到这个json</p><ul><li><p>如果服务器返回的是一个<code>json</code>，那么浏览器不能直接输出</p></li><li><p>如果服务器返回的json有多个，那么返回的格式中间没有逗号，这样对于JavaScript操作来说，有点困难</p><p>就可以使用数组的方式，也就是<code>dao</code>层查到结果集，封装在一个list集合中，使用</p><p><code>mapper.writeValueAsString(lists)</code>获取到的就是一个数组，中间有逗号，并且直接响应给浏览器，浏览器通过下标获取到的就是一个对象</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">[</span>\n    <span class="token punctuation">{</span><span class="token property">&quot;suggest&quot;</span><span class="token operator">:</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span><span class="token property">&quot;suggest&quot;</span><span class="token operator">:</span><span class="token string">&quot;chuchen&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span><span class="token property">&quot;suggest&quot;</span><span class="token operator">:</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Suggest</span><span class="token punctuation">&gt;</span></span> lists <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getSuggest</span><span class="token punctuation">(</span>suggest<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span><span class="token punctuation">;</span>\nresponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>jQuery获取服务器返回的结果</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/aj/suggestServlet&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n   <span class="token literal-property property">suggest</span><span class="token operator">:</span>input<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n   <span class="token literal-property property">dataType</span><span class="token operator">:</span><span class="token string">&quot;text&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span>isRight</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>get</code>方法的第三个参数就可以传递一个<code>function</code>，就可以在这个函数中操作返回的结果</p><p>这个函数可以接收两个参数，第一个是返回的响应体数据，第二个是返回的成功与否</p><p>成功就返回<code>success</code>，也就是<code>isRight=success</code></p></li></ul>',49),m={},g=(0,a(83744).Z)(m,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,o,c,l,u,r,i,k,d,b],64)}]])}}]);